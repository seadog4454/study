GAS LISTING kernel.s 			page 1


   1              	.include "./define.s"
   1              	.set BOOT_LOAD, 0x7C00
   2              	.set BOOT_SIZE, 0x2000 #(1024 * 8)
   3              	.set SECT_SIZE, 512
   4              	.set BOOT_SECT, 0x10 #(.Lboot_BOOT_SIZE / .Lboot_SECT_SIZE)
   5              	.set BOOT_END, 0x9C00
   6              	.set KERNEL_SECT, 0x10 #(.Lboot_KERNEL_SIZE / .Lboot_SECT_SIZE)
   7              	.set KERNEL_SIZE, 8192
   8              	.set VRAM, 0x000A0000
   9              	.set KERNEL_LOAD, 0x00101000
   2              	
   3              	.code32
   4              	.global kernel
   5              	
   6              	
   7              	kernel:
   8              	  
   9              	  # Get font addr. The addr is had in boot.s(where, the addr = BOOT_LOAD + SECT_SIZE).
  10              	  #push %ebx
  11              	  #push %ecx
  12              	
  13              	  #mov $BOOT_LOAD, %ebx
  14              	  #mov $SECT_SIZE, %ecx
  15              	  #add %ecx, %ebx
  16              	  #mov %ebx, %esi
  17              	  #pop %ecx
  18              	  #pop %ebx
  19              	  
  20 0000 BE007E00 	  mov $(BOOT_LOAD + SECT_SIZE), %esi
  20      00
  21 0005 0FB706   	  movzxw (%esi), %eax
  22 0008 0FB75E02 	  movzxw 0x2(%esi), %ebx # segment
  23 000c C1E004   	  shl $0x4, %eax # offset
  24 000f 01D8     	  add %ebx, %eax
  25 0011 A3000000 	  mov %eax, (FONT_ADR)
  25      00
  26              	/*
  27              	  push $0x41
  28              	  push $0x010F
  29              	  push $0x0
  30              	  push $0x0
  31              	  call draw_char
  32              	  add $0x10, %sp
  33              	
  34              	
  35              	  push $0x42
  36              	  push $0x010F
  37              	  push $0x0
  38              	  push $0x1
  39              	  call draw_char
  40              	  add $0x10, %sp
  41              	
  42              	  push $0x43
  43              	  push $0x010F
  44              	  push $0x0
  45              	  push $0x2
  46              	  call draw_char
GAS LISTING kernel.s 			page 2


  47              	  add $0x10, %sp
  48              	
  49              	
  50              	  push $0x31
  51              	  push $0x010F
  52              	  push $0x0
  53              	  push $0x0
  54              	  call draw_char
  55              	  add $0x10, %sp
  56              	
  57              	
  58              	  push $0x32
  59              	  push $0x010F
  60              	  push $0x0
  61              	  push $0x1
  62              	  call draw_char
  63              	  add $0x10, %sp
  64              	
  65              	
  66              	  push $0x33
  67              	  push $0x010F
  68              	  push $0x0
  69              	  push $0x2
  70              	  call draw_char
  71              	  add $0x10, %sp
  72              	*/
  73              	
  74              	/*  
  75              	  # Draw horizontal line(8bit).
  76              	  mov $0x7, %ah # set 1bit in RGB plane.
  77              	  mov $0x2, %al # map mask register
  78              	  mov $0x3C4, %dx # sequence control port
  79              	  out %ax, %dx
  80              	  
  81              	  movb $0xFF, (VRAM)
  82              	  
  83              	  mov $0x4, %ah
  84              	  out %ax, %dx
  85              	
  86              	  movb $0xFF, (VRAM + 0x1)
  87              	  
  88              	  mov $0x2, %ah
  89              	  out %ax, %dx
  90              	
  91              	  movb $0xFF, (VRAM + 0x2)
  92              	  
  93              	  mov $0x1, %ah
  94              	  out %ax, %dx
  95              	
  96              	  movb $0xFF, (VRAM + 0x3)
  97              	
  98              	  # Draw horizontal line is traversed screen.
  99              	  
 100              	  mov $0x02, %ah
 101              	  out %ax, %dx
 102              	
 103              	  lea (VRAM + 80), %edi
GAS LISTING kernel.s 			page 3


 104              	  mov $80, %ecx
 105              	  mov $0xFF, %al
 106              	  rep stosb
 107              	
 108              	  # Draw 8 bit's rectangle in the 2nd row.
 109              	  
 110              	  # add offset 1280(oen line)
 111              	  mov $0x1, %edi # number of the lines
 112              	  shl $0x8, %edi # %edi * 256
 113              	  lea VRAM(%edi, %edi, 0x4), %edi
 114              	
 115              	  # x = 640, 80 * 8 bits = 640
 116              	  movw $0xFF, (80*0)(%edi)
 117              	  movw $0xFF, (80*1)(%edi)
 118              	  movw $0xFF, (80*2)(%edi)
 119              	  movw $0xFF, (80*3)(%edi)
 120              	  movw $0xFF, (80*4)(%edi)
 121              	  movw $0xFF, (80*5)(%edi)
 122              	  movw $0xFF, (80*6)(%edi)
 123              	  movw $0xFF, (80*7)(%edi)
 124              	    
 125              	
 126              	  # Draw char in the 3rd row.
 127              	  mov $0x41, %esi
 128              	  shl $0x4, %esi
 129              	  add (FONT_ADR), %esi
 130              	
 131              	  
 132              	  # add offset 1280(oen line)
 133              	  mov $0x2, %edi # number of the lines
 134              	  shl $0x8, %edi # %edi * 256
 135              	  lea VRAM(%edi, %edi, 0x4), %edi
 136              	
 137              	  mov $0x10, %ecx
 138              	.Lkernel_10L:
 139              	
 140              	  movsb
 141              	  add $(80 - 1), %edi
 142              	  loop .Lkernel_10L
 143              	*/
 144              	
 145              	
 146              	
 147 0016 6A0D     	  push $13
 148 0018 6A3F     	  push $63
 149 001a E8E00100 	  call draw_font
 149      00
 150 001f 6683C408 	  add $0x8, %sp 
 151              	
 152              	
 153 0023 68000000 	  push $.Lkernel_s0
 153      00
 154 0028 680F0100 	  push $0x010F
 154      00
 155 002d 6A0E     	  push $14
 156 002f 6A19     	  push $0x19
 157 0031 E80E0200 	  call draw_str
GAS LISTING kernel.s 			page 4


 157      00
 158 0036 6683C410 	  add $0x10, %sp
 159              	
 160 003a 6A04     	  push $0x4
 161 003c 6A3F     	  push $63
 162 003e E84A0200 	  call draw_color_bar
 162      00
 163 0043 6683C408 	  add $0x8, %sp
 164              	
 165              	/*
 166              	  push $0x01
 167              	  push $0x4
 168              	  push $0x8
 169              	  call draw_pixel
 170              	  add $0xc, %sp
 171              	
 172              	  push $0x01
 173              	  push $0x5
 174              	  push $0x9
 175              	  call draw_pixel
 176              	  add $0xc, %sp
 177              	
 178              	  push $0x02
 179              	  push $0x6
 180              	  push $0xa
 181              	  call draw_pixel
 182              	  add $0xc, %sp
 183              	
 184              	  push $0x02
 185              	  push $0x7
 186              	  push $0xb
 187              	  call draw_pixel
 188              	  add $0xc, %sp
 189              	
 190              	  push $0x03
 191              	  push $0x8
 192              	  push $0xc
 193              	  call draw_pixel
 194              	  add $0xc, %sp
 195              	  
 196              	  push $0x03
 197              	  push $0x9
 198              	  push $0xd
 199              	  call draw_pixel
 200              	  add $0xc, %sp
 201              	
 202              	  push $0x04
 203              	  push $0xa
 204              	  push $0xe
 205              	  call draw_pixel
 206              	  add $0xc, %sp
 207              	
 208              	  push $0x04
 209              	  push $0xb
 210              	  push $0xf
 211              	  call draw_pixel
 212              	  add $0xc, %sp
GAS LISTING kernel.s 			page 5


 213              	  
 214              	  push $0x03
 215              	  push $0x4
 216              	  push $0xf
 217              	  call draw_pixel
 218              	  add $0xc, %sp
 219              	
 220              	  push $0x03
 221              	  push $0x5
 222              	  push $0xe
 223              	  call draw_pixel
 224              	  add $0xc, %sp
 225              	
 226              	  push $0x04
 227              	  push $0x6
 228              	  push $0xd
 229              	  call draw_pixel
 230              	  add $0xc, %sp
 231              	
 232              	  push $0x04
 233              	  push $0x7
 234              	  push $0xc
 235              	  call draw_pixel
 236              	  add $0xc, %sp
 237              	
 238              	  push $0x01
 239              	  push $0x8
 240              	  push $0xb
 241              	  call draw_pixel
 242              	  add $0xc, %sp
 243              	
 244              	  push $0x01
 245              	  push $0x9
 246              	  push $0xa
 247              	  call draw_pixel
 248              	  add $0xc, %sp
 249              	
 250              	  push $0x02
 251              	  push $0xa
 252              	  push $0x9
 253              	  call draw_pixel
 254              	  add $0xc, %sp
 255              	
 256              	  push $0x02
 257              	  push $0xb
 258              	  push $0x8
 259              	  call draw_pixel
 260              	  add $0xc, %sp
 261              	*/
 262 0047 6A0F     	  push $0x0F
 263 0049 6A00     	  push $0x0
 264 004b 6A00     	  push $0x0 
 265 004d 6A64     	  push $100
 266 004f 6A64     	  push $100
 267 0051 E8740300 	  call draw_line
 267      00
 268 0056 6683C414 	  add $0x14, %sp 
GAS LISTING kernel.s 			page 6


 269              	
 270 005a 6A03     	  push $0x3
 271 005c 68C80000 	  push $200
 271      00
 272 0061 68C80000 	  push $200
 272      00
 273 0066 6A64     	  push $100
 274 0068 6A64     	  push $100
 275 006a E80D0400 	  call draw_rect
 275      00
 276 006f 6683C414 	  add $0x14, %sp
 277              	
 278 0073 EBFE     	  jmp .
 279              	
 280 0075 48656C6C 	.Lkernel_s0: .string "Hello, kernel!"
 280      6F2C206B 
 280      65726E65 
 280      6C2100
 281              	
 282              	.align 4
 283 0084 00000000 	FONT_ADR: .long 0x0
 284              	
 285              	
 286              	.include "../modules/protect/vga.s"
   1              	/*
   2              	 *  vga_set_read_plane(plane)
   3              	 *  arguments:
   4              	 *    plane:  reading plane
   5              	 *  return: void
   6              	 */
   7              	vga_set_read_plane:
   8 0088 55       	  push %ebp
   9 0089 89E5     	  mov %esp, %ebp
  10              	
  11 008b 50       	  push %eax
  12 008c 52       	  push %edx
  13              	
  14 008d 8A6508   	  mov 0x8(%ebp), %ah
  15 0090 80E403   	  and $0x03, %ah
  16 0093 B004     	  mov $0x04, %al
  17 0095 66BACE03 	  mov $0x03CE, %dx
  18 0099 66EF     	  out %ax, %dx
  19              	
  20 009b 5A       	  pop %edx
  21 009c 58       	  pop %eax
  22              	
  23 009d 89EC     	  mov %ebp, %esp
  24 009f 5D       	  pop %ebp
  25              	
  26 00a0 C3       	  ret
  27              	
  28              	
  29              	/*
  30              	 * vga_set_write_plane(plane)
  31              	 * arguments:
  32              	 *  plane:  writing plane
  33              	 * return: void
GAS LISTING kernel.s 			page 7


  34              	 */
  35              	
  36              	vga_set_write_plane:
  37 00a1 55       	  push %ebp
  38 00a2 89E5     	  mov %esp, %ebp
  39              	
  40 00a4 50       	  push %eax
  41 00a5 52       	  push %edx
  42              	
  43 00a6 8A6508   	  mov 0x8(%ebp), %ah
  44 00a9 80E40F   	  and $0xF, %ah
  45 00ac B002     	  mov $0x2, %al
  46 00ae 66BAC403 	  mov $0x03C4, %dx
  47 00b2 66EF     	  out %ax, %dx
  48              	  
  49 00b4 5A       	  pop %edx
  50 00b5 58       	  pop %eax
  51              	
  52 00b6 89EC     	  mov %ebp, %esp
  53 00b8 5D       	  pop %ebp
  54 00b9 C3       	  ret
  55              	
  56              	/*
  57              	 * vram_font_copy(font, vram, plane, color)
  58              	 * arguments:
  59              	 *  font: font addr
  60              	 *  vram: vram addr
  61              	 *  plane:  output plane
  62              	 *  color:  drawing color
  63              	 * reutnr: void
  64              	 */
  65              	
  66              	vram_font_copy:
  67 00ba 55       	  push %ebp
  68 00bb 89E5     	  mov %esp, %ebp
  69              	
  70 00bd 50       	  push %eax
  71 00be 53       	  push %ebx
  72 00bf 51       	  push %ecx
  73 00c0 52       	  push %edx
  74 00c1 56       	  push %esi
  75 00c2 57       	  push %edi
  76              	
  77 00c3 8B7508   	  mov 0x8(%ebp), %esi # font
  78 00c6 8B7D0C   	  mov 0xc(%ebp), %edi # vram
  79 00c9 0FB64510 	  movzxb 0x10(%ebp), %eax # plane
  80 00cd 0FB75D14 	  movzxw 0x14(%ebp), %ebx # color
  81              	
  82 00d1 84C7     	  test %al, %bh
  83 00d3 0F94C6   	  setz %dh
  84 00d6 FECE     	  dec %dh
  85              	
  86 00d8 84C3     	  test %al, %bl
  87 00da 0F94C2   	  setz %dl
  88 00dd FECA     	  dec %dl
  89              	
  90              	  # copy 16 dot's font
GAS LISTING kernel.s 			page 8


  91 00df FC       	  cld
  92              	
  93 00e0 B9100000 	  mov $0x10, %ecx
  93      00
  94              	.Lvram_font_copy_10L:
  95              	  
  96              	  # create font mask
  97 00e5 AC       	  lodsb
  98 00e6 88C4     	  mov %al, %ah
  99 00e8 F6D4     	  not %ah
 100              	  
 101              	  # front color(font color)
 102 00ea 20D0     	  and %dl, %al
 103              	
 104              	  # background color
 105 00ec F7C31000 	  test $0x0010, %ebx
 105      0000
 106 00f2 7404     	  jz .Lvram_font_copy_11F
 107 00f4 2227     	  and (%edi), %ah
 108 00f6 EB02     	  jmp .Lvram_font_copy_11E
 109              	
 110              	.Lvram_font_copy_11F:
 111 00f8 20F4     	  and %dh, %ah
 112              	
 113              	.Lvram_font_copy_11E:
 114              	
 115              	  # merge front and background color
 116 00fa 08E0     	  or %ah, %al
 117              	
 118 00fc 8807     	  mov %al, (%edi)
 119              	  
 120 00fe 83C750   	  add $80, %edi
 121 0101 E2E2     	  loop .Lvram_font_copy_10L
 122              	
 123              	.Lvram_font_copy_10E:
 124              	
 125 0103 5F       	  pop %edi
 126 0104 5E       	  pop %esi
 127 0105 5A       	  pop %edx
 128 0106 59       	  pop %ecx
 129 0107 5B       	  pop %ebx
 130 0108 58       	  pop %eax
 131              	
 132 0109 89EC     	  mov %ebp, %esp
 133 010b 5D       	  pop %ebp
 134              	
 135 010c C3       	  ret
 136              	
 137              	
 138              	
 139              	
 140              	
 141              	/*
 142              	 *  vram_bit_copy(bit, vram, plane, color)
 143              	 *  arguments:
 144              	 *    bit:  bit pattern
 145              	 *    vram: vram addr
GAS LISTING kernel.s 			page 9


 146              	 *    plane:
 147              	 *    color:
 148              	 *
 149              	 */
 150              	
 151              	vram_bit_copy:
 152 010d 55       	  push %ebp
 153 010e 89E5     	  mov %esp, %ebp
 154              	
 155 0110 50       	  push %eax
 156 0111 53       	  push %ebx
 157 0112 57       	  push %edi
 158              	
 159 0113 8B7D0C   	  mov 0xc(%ebp), %edi # vram addr
 160 0116 0FB64510 	  movzxb 0x10(%ebp), %eax # plane
 161 011a 0FB75D14 	  movzxw 0x14(%ebp), %ebx # color
 162              	
 163 011e 84C3     	  test %al, %bl
 164 0120 0F94C3   	  setz %bl
 165 0123 FECB     	  dec %bl
 166              	
 167 0125 8A4508   	  mov 0x8(%ebp), %al
 168 0128 88C4     	  mov %al, %ah
 169 012a F6D4     	  not %ah
 170              	
 171 012c 2227     	  and (%edi), %ah
 172 012e 20D8     	  and %bl, %al
 173 0130 08E0     	  or %ah, %al
 174              	  
 175 0132 8807     	  mov %al, (%edi)
 176              	
 177 0134 5F       	  pop %edi
 178 0135 5B       	  pop %ebx
 179 0136 58       	  pop %eax
 180              	
 181 0137 89EC     	  mov %ebp, %esp
 182 0139 5D       	  pop %ebp
 183              	  
 184 013a C3       	  ret
 287              	.include "../modules/protect/draw_char.s"
   1              	/*
   2              	 *  draw_char(col, row, color, ch)
   3              	 *  arguments:
   4              	 *    col: 0 ~ 79
   5              	 *    row: 0 ~ 29
   6              	 *    color: drawing color
   7              	 *    ch : char
   8              	 *  return : null
   9              	 */
  10              	
  11              	.include "./define.s"
  12              	
  13              	draw_char:
  14 013b 55       	  push %ebp
  15 013c 89E5     	  mov %esp, %ebp
  16              	
  17 013e 50       	  push %eax
GAS LISTING kernel.s 			page 10


  18 013f 53       	  push %ebx
  19 0140 51       	  push %ecx
  20 0141 52       	  push %edx
  21 0142 56       	  push %esi
  22 0143 57       	  push %edi
  23              	
  24              	  # get font addr
  25 0144 0FB67514 	  movzxb 0x14(%ebp), %esi # font addr
  26 0148 C1E604   	  shl $0x4, %esi
  27 014b 03350000 	  add (FONT_ADR), %esi
  27      0000
  28              	
  29 0151 8B7D0C   	  mov 0xc(%ebp), %edi # row
  30 0154 C1E708   	  shl $0x8, %edi
  31 0157 8DBCBF00 	  lea VRAM(%edi, %edi, 0x4), %edi
  31      000A00
  32 015e 037D08   	  add 0x8(%ebp), %edi # col
  33              	  
  34              	  # put char
  35 0161 0FB75D10 	  movzxw 0x10(%ebp), %ebx # color
  36              	 
  37 0165 6A03     	  push $0x03
  38 0167 E81CFFFF 	  call vga_set_read_plane
  38      FF
  39 016c 6683C404 	  add $0x4, %sp
  40              	  
  41 0170 6A08     	  push $0x08
  42 0172 E82AFFFF 	  call vga_set_write_plane
  42      FF
  43 0177 6683C404 	  add $0x4, %sp
  44              	
  45 017b 53       	  push %ebx
  46 017c 6A08     	  push $0x08
  47 017e 57       	  push %edi
  48 017f 56       	  push %esi
  49 0180 E835FFFF 	  call vram_font_copy
  49      FF
  50 0185 6683C410 	  add $0x10, %sp
  51              	
  52              	  
  53 0189 6A02     	  push $0x02
  54 018b E8F8FEFF 	  call vga_set_read_plane
  54      FF
  55 0190 6683C404 	  add $0x4, %sp
  56              	  
  57 0194 6A04     	  push $0x04
  58 0196 E806FFFF 	  call vga_set_write_plane
  58      FF
  59 019b 6683C404 	  add $0x4, %sp
  60              	
  61 019f 53       	  push %ebx
  62 01a0 6A04     	  push $0x04
  63 01a2 57       	  push %edi
  64 01a3 56       	  push %esi
  65 01a4 E811FFFF 	  call vram_font_copy
  65      FF
  66 01a9 6683C410 	  add $0x10, %sp
GAS LISTING kernel.s 			page 11


  67              	
  68              	
  69 01ad 6A01     	  push $0x01
  70 01af E8D4FEFF 	  call vga_set_read_plane
  70      FF
  71 01b4 6683C404 	  add $0x4, %sp
  72              	  
  73 01b8 6A02     	  push $0x02
  74 01ba E8E2FEFF 	  call vga_set_write_plane
  74      FF
  75 01bf 6683C404 	  add $0x4, %sp
  76              	
  77 01c3 53       	  push %ebx
  78 01c4 6A02     	  push $0x02
  79 01c6 57       	  push %edi
  80 01c7 56       	  push %esi
  81 01c8 E8EDFEFF 	  call vram_font_copy
  81      FF
  82 01cd 6683C410 	  add $0x10, %sp
  83              	
  84 01d1 6A00     	  push $0x00
  85 01d3 E8B0FEFF 	  call vga_set_read_plane
  85      FF
  86 01d8 6683C404 	  add $0x4, %sp
  87              	  
  88 01dc 6A01     	  push $0x01
  89 01de E8BEFEFF 	  call vga_set_write_plane
  89      FF
  90 01e3 6683C404 	  add $0x4, %sp
  91              	
  92 01e7 53       	  push %ebx
  93 01e8 6A01     	  push $0x01
  94 01ea 57       	  push %edi
  95 01eb 56       	  push %esi
  96 01ec E8C9FEFF 	  call vram_font_copy
  96      FF
  97 01f1 6683C410 	  add $0x10, %sp
  98              	
  99 01f5 5F       	  pop %edi
 100 01f6 5E       	  pop %esi
 101 01f7 5A       	  pop %edx
 102 01f8 59       	  pop %ecx
 103 01f9 5B       	  pop %ebx
 104 01fa 58       	  pop %eax
 105              	
 106 01fb 89EC     	  mov %ebp, %esp
 107 01fd 5D       	  pop %ebp
 108              	
 109 01fe C3       	  ret
 288              	.include "../modules/protect/draw_font.s"
   1              	/*
   2              	 *  draw_font(col, row)
   3              	 *  arguments:
   4              	 *    col:
   5              	 *    row
   6              	 *  return: null
   7              	 */
GAS LISTING kernel.s 			page 12


   8              	
   9              	draw_font:
  10 01ff 55       	  push %ebp
  11 0200 89E5     	  mov %esp, %ebp
  12              	
  13 0202 50       	  push %eax
  14 0203 53       	  push %ebx
  15 0204 51       	  push %ecx
  16 0205 52       	  push %edx
  17 0206 56       	  push %esi
  18 0207 57       	  push %edi
  19              	
  20 0208 8B7508   	  mov 0x8(%ebp), %esi # col
  21 020b 8B7D0C   	  mov 0xc(%ebp), %edi # row
  22              	
  23 020e B9000000 	  mov $0x0, %ecx
  23      00
  24              	.Ldraw_font_10L:  
  25 0213 81F90001 	  cmp $0x100, %ecx
  25      0000
  26 0219 731F     	  jae .Ldraw_font_10E
  27              	
  28 021b 89C8     	  mov %ecx, %eax
  29 021d 83E00F   	  and $0x0F, %eax
  30 0220 01F0     	  add %esi, %eax
  31              	
  32 0222 89CB     	  mov %ecx, %ebx
  33 0224 C1EB04   	  shr $0x4, %ebx
  34 0227 01FB     	  add %edi, %ebx
  35              	
  36 0229 51       	  push %ecx
  37 022a 6A07     	  push $0x07
  38 022c 53       	  push %ebx
  39 022d 50       	  push %eax
  40 022e E808FFFF 	  call draw_char
  40      FF
  41 0233 6683C410 	  add $0x10, %sp
  42              	
  43 0237 41       	  inc %ecx
  44 0238 EBD9     	  jmp .Ldraw_font_10L
  45              	.Ldraw_font_10E:
  46              	
  47 023a 5F       	  pop %edi
  48 023b 5E       	  pop %esi
  49 023c 5A       	  pop %edx
  50 023d 59       	  pop %ecx
  51 023e 5B       	  pop %ebx
  52 023f 58       	  pop %eax
  53              	
  54 0240 89EC     	  mov %ebp, %esp
  55 0242 5D       	  pop %ebp
  56              	
  57 0243 C3       	  ret
 289              	.include "../modules/protect/draw_str.s"
   1              	/*
   2              	 *  draw_str(col, row, color, p)
   3              	 *  arguments:
GAS LISTING kernel.s 			page 13


   4              	 *    col
   5              	 *    row:
   6              	 *    color: drawing color
   7              	 *    str's addr
   8              	 */
   9              	
  10              	draw_str:
  11 0244 55       	  push %ebp
  12 0245 89E5     	  mov %esp, %ebp
  13              	
  14 0247 50       	  push %eax
  15 0248 53       	  push %ebx
  16 0249 51       	  push %ecx
  17 024a 52       	  push %edx
  18 024b 56       	  push %esi
  19              	
  20 024c 8B4D08   	  mov 0x8(%ebp), %ecx
  21 024f 8B550C   	  mov 0xc(%ebp), %edx
  22 0252 0FB75D10 	  movzxw 0x10(%ebp), %ebx
  23 0256 8B7514   	  mov 0x14(%ebp), %esi
  24              	
  25 0259 FC       	  cld
  26              	.Ldraw_str_10L:
  27              	
  28 025a AC       	  lodsb
  29 025b 3C00     	  cmp $0x0, %al
  30 025d 7425     	  je .Ldraw_str_10E
  31              	
  32 025f 50       	  push %eax
  33 0260 53       	  push %ebx
  34 0261 52       	  push %edx
  35 0262 51       	  push %ecx
  36 0263 E8D3FEFF 	  call draw_char
  36      FF
  37 0268 6683C410 	  add $0x10, %sp
  38              	
  39              	
  40              	
  41 026c 41       	  inc %ecx
  42 026d 83F950   	  cmp $80, %ecx
  43 0270 7C10     	  jl .Ldraw_str_12E
  44 0272 B9000000 	  mov $0, %ecx
  44      00
  45 0277 42       	  inc %edx
  46 0278 83FA1E   	  cmp $30, %edx
  47 027b 7C05     	  jl .Ldraw_str_12E
  48 027d BA000000 	  mov $0, %edx
  48      00
  49              	
  50              	.Ldraw_str_12E:
  51 0282 EBD6     	  jmp .Ldraw_str_10L
  52              	
  53              	.Ldraw_str_10E:
  54              	
  55 0284 5E       	  pop %esi
  56 0285 5A       	  pop %edx
  57 0286 59       	  pop %ecx
GAS LISTING kernel.s 			page 14


  58 0287 5B       	  pop %ebx
  59 0288 58       	  pop %eax
  60              	
  61 0289 89EC     	  mov %ebp, %esp
  62 028b 5D       	  pop %ebp
  63              	
  64 028c C3       	  ret
  65              	
 290              	.include "../modules/protect/draw_color_bar.s"
   1              	/*
   2              	 *  draw_color_bar(row, col)
   3              	 *  arguments:
   4              	 *    row:
   5              	 *    col:
   6              	 *  reuturn: void
   7              	 */
   8              	
   9              	draw_color_bar:
  10 028d 55       	  push %ebp
  11 028e 89E5     	  mov %esp, %ebp
  12              	
  13 0290 50       	  push %eax
  14 0291 53       	  push %ebx
  15 0292 51       	  push %ecx
  16 0293 52       	  push %edx
  17 0294 56       	  push %esi
  18 0295 57       	  push %edi
  19              	
  20 0296 8B7508   	  mov 0x8(%ebp), %esi #row
  21 0299 8B7D0C   	  mov 0xc(%ebp), %edi #col
  22              	
  23 029c B9000000 	  mov $0x0, %ecx
  23      00
  24              	.Ldraw_color_bar_10L:
  25 02a1 83F910   	  cmp $0x10, %ecx
  26 02a4 732E     	  jae .Ldraw_color_bar_10E
  27              	
  28 02a6 89C8     	  mov %ecx, %eax
  29 02a8 83E001   	  and $0x01, %eax
  30 02ab C1E003   	  shl $0x3, %eax
  31 02ae 01F0     	  add %esi, %eax
  32              	
  33 02b0 89CB     	  mov %ecx, %ebx
  34 02b2 D1EB     	  shr $0x1, %ebx
  35 02b4 01FB     	  add %edi, %ebx
  36              	
  37 02b6 89CA     	  mov %ecx, %edx
  38 02b8 D1E2     	  shl $0x1, %edx
  39 02ba 8B920000 	  mov .Ldraw_color_bar_t0(%edx), %edx
  39      0000
  40              	
  41 02c0 68000000 	  push $.Ldraw_color_bar_s0
  41      00
  42 02c5 52       	  push %edx
  43 02c6 53       	  push %ebx
  44 02c7 50       	  push %eax
  45 02c8 E877FFFF 	  call draw_str
GAS LISTING kernel.s 			page 15


  45      FF
  46 02cd 6683C410 	  add $0x10, %sp
  47              	
  48 02d1 41       	  inc %ecx
  49 02d2 EBCD     	  jmp .Ldraw_color_bar_10L
  50              	
  51              	.Ldraw_color_bar_10E:
  52              	  
  53 02d4 5F       	  pop %edi
  54 02d5 5E       	  pop %esi
  55 02d6 5A       	  pop %edx
  56 02d7 59       	  pop %ecx
  57 02d8 5B       	  pop %ebx
  58 02d9 58       	  pop %eax
  59              	
  60 02da 89EC     	  mov %ebp, %esp
  61 02dc 5D       	  pop %ebp
  62              	
  63 02dd C3       	  ret
  64              	
  65 02de 20202020 	.Ldraw_color_bar_s0: .string "        "
  65      20202020 
  65      00
  66              	
  67 02e7 00000008 	.Ldraw_color_bar_t0: .word 0x0000, 0x0800 
  68 02eb 00010009 	.word 0x0100, 0x0900
  69 02ef 0002000A 	.word 0x0200, 0x0A00
  70 02f3 0003000B 	.word 0x0300, 0x0B00
  71 02f7 0004000C 	.word 0x0400, 0x0C00
  72 02fb 0005000D 	.word 0x0500, 0x0D00
  73 02ff 0006000E 	.word 0x0600, 0x0E00
  74 0303 0007000F 	.word 0x0700, 0x0F00
 291              	.include "../modules/protect/draw_pixel.s"
   1              	/*
   2              	 *  draw_pixel(X, Y, color)
   3              	 *  X:
   4              	 *  Y:
   5              	 *  color:
   6              	 *  return: void
   7              	 */
   8              	
   9              	
  10              	draw_pixel:
  11              	
  12 0307 55       	  push %ebp
  13 0308 89E5     	  mov %esp, %ebp
  14              	
  15 030a 50       	  push %eax
  16 030b 53       	  push %ebx
  17 030c 51       	  push %Ecx
  18 030d 57       	  push %edi
  19              	
  20 030e 8B7D0C   	  mov 0xc(%ebp), %edi # Y
  21 0311 C1E704   	  shl $0x4, %edi
  22 0314 8DBCBF00 	  lea VRAM(%edi, %edi, 0x4), %edi
  22      000A00
  23              	  
GAS LISTING kernel.s 			page 16


  24 031b 8B5D08   	  mov 0x8(%ebp), %ebx
  25 031e 89D9     	  mov %ebx, %ecx
  26 0320 C1EB03   	  shr $0x3, %ebx
  27 0323 01DF     	  add %ebx, %edi
  28              	
  29 0325 83E107   	  and $0x7, %ecx
  30 0328 BB800000 	  mov $0x80, %ebx
  30      00
  31 032d D3EB     	  shr %cl, %ebx
  32              	
  33 032f 8B4D10   	  mov 0x10(%ebp), %ecx
  34              	
  35 0332 6A03     	  push $0x03
  36 0334 E84FFDFF 	  call vga_set_read_plane
  36      FF
  37 0339 6683C404 	  add $0x04, %sp
  38              	
  39 033d 6A08     	  push $0x08
  40 033f E85DFDFF 	  call vga_set_write_plane
  40      FF
  41 0344 6683C404 	  add $0x04, %sp
  42              	
  43 0348 51       	  push %ecx
  44 0349 6A08     	  push $0x08
  45 034b 57       	  push %edi
  46 034c 53       	  push %ebx
  47 034d E8BBFDFF 	  call vram_bit_copy
  47      FF
  48 0352 6683C410 	  add $0x10, %sp
  49              	
  50              	
  51 0356 6A02     	  push $0x02
  52 0358 E82BFDFF 	  call vga_set_read_plane
  52      FF
  53 035d 6683C404 	  add $0x04, %sp
  54              	
  55 0361 6A04     	  push $0x04
  56 0363 E839FDFF 	  call vga_set_write_plane
  56      FF
  57 0368 6683C404 	  add $0x04, %sp
  58              	
  59 036c 51       	  push %ecx
  60 036d 6A04     	  push $0x04
  61 036f 57       	  push %edi
  62 0370 53       	  push %ebx
  63 0371 E897FDFF 	  call vram_bit_copy
  63      FF
  64 0376 6683C410 	  add $0x10, %sp
  65              	
  66              	
  67 037a 6A01     	  push $0x01
  68 037c E807FDFF 	  call vga_set_read_plane
  68      FF
  69 0381 6683C404 	  add $0x04, %sp
  70              	
  71 0385 6A02     	  push $0x02
  72 0387 E815FDFF 	  call vga_set_write_plane
GAS LISTING kernel.s 			page 17


  72      FF
  73 038c 6683C404 	  add $0x04, %sp
  74              	
  75 0390 51       	  push %ecx
  76 0391 6A02     	  push $0x02
  77 0393 57       	  push %edi
  78 0394 53       	  push %ebx
  79 0395 E873FDFF 	  call vram_bit_copy
  79      FF
  80 039a 6683C410 	  add $0x10, %sp
  81              	
  82              	
  83              	
  84 039e 6A00     	  push $0x00
  85 03a0 E8E3FCFF 	  call vga_set_read_plane
  85      FF
  86 03a5 6683C404 	  add $0x04, %sp
  87              	
  88 03a9 6A01     	  push $0x01
  89 03ab E8F1FCFF 	  call vga_set_write_plane
  89      FF
  90 03b0 6683C404 	  add $0x04, %sp
  91              	
  92 03b4 51       	  push %ecx
  93 03b5 6A01     	  push $0x01
  94 03b7 57       	  push %edi
  95 03b8 53       	  push %ebx
  96 03b9 E84FFDFF 	  call vram_bit_copy
  96      FF
  97 03be 6683C410 	  add $0x10, %sp
  98              	
  99              	
 100 03c2 5F       	  pop %edi
 101 03c3 59       	  pop %ecx
 102 03c4 5B       	  pop %ebx
 103 03c5 58       	  pop %eax
 104              	
 105 03c6 89EC     	  mov %ebp, %esp
 106 03c8 5D       	  pop %ebp
 107              	
 108 03c9 C3       	  ret
 292              	.include "../modules/protect/draw_line.s"
   1              	/*
   2              	 *  draw_line(X0, Y0, X1, Y1, color)
   3              	 *  X0: start point of x
   4              	 *  Y0: start point of y
   5              	 *  X1: end point of x
   6              	 *  Y1: end point of y
   7              	 *  color:  drawing color
   8              	 *  return: void
   9              	 */
  10              	
  11              	draw_line:
  12 03ca 55       	  push %ebp
  13 03cb 89E5     	  mov %esp, %ebp
  14              	
  15 03cd 6A00     	  pushl $0
GAS LISTING kernel.s 			page 18


  16 03cf 6A00     	  pushl $0
  17 03d1 6A00     	  pushl $0
  18 03d3 6A00     	  pushl $0
  19 03d5 6A00     	  pushl $0
  20 03d7 6A00     	  pushl $0
  21 03d9 6A00     	  pushl $0
  22              	
  23 03db 50       	  push %eax
  24 03dc 53       	  push %ebx
  25 03dd 51       	  push %ecx
  26 03de 52       	  push %edx
  27 03df 56       	  push %esi
  28 03e0 57       	  push %edi
  29              	
  30 03e1 8B4508   	  mov 0x8(%ebp), %eax # X0
  31 03e4 8B5D10   	  mov 0x10(%ebp), %ebx # X1
  32 03e7 29C3     	  sub %eax, %ebx # X1 - X0
  33 03e9 7D09     	  jge .Ldraw_line_10F
  34              	
  35 03eb F7DB     	  neg %ebx
  36 03ed BEFFFFFF 	  mov $-0x1, %esi
  36      FF
  37 03f2 EB05     	  jmp .Ldraw_line_10E
  38              	
  39              	.Ldraw_line_10F:
  40              	
  41 03f4 BE010000 	  mov $0x1, %esi
  41      00
  42              	
  43              	.Ldraw_line_10E:
  44              	  
  45 03f9 8B4D0C   	  mov 0xc(%ebp), %ecx # Y0
  46 03fc 8B5514   	  mov 0x14(%ebp), %edx # Y1
  47 03ff 29CA     	  sub %ecx, %edx # Y1 - Y0
  48 0401 7D09     	  jge .Ldraw_line_20F
  49              	
  50 0403 F7DA     	  neg %edx
  51 0405 BFFFFFFF 	  mov $-0x1, %edi
  51      FF
  52 040a EB05     	  jmp .Ldraw_line_20E
  53              	
  54              	.Ldraw_line_20F:
  55              	  
  56 040c BF010000 	  mov $0x1, %edi
  56      00
  57              	
  58              	
  59              	.Ldraw_line_20E:
  60              	
  61 0411 8945F8   	  mov %eax, -0x8(%ebp)
  62 0414 895DF4   	  mov %ebx, -0xc(%ebp)
  63 0417 8975F0   	  mov %esi, -0x10(%ebp)
  64              	
  65 041a 894DEC   	  mov %ecx, -0x14(%ebp)
  66 041d 8955E8   	  mov %edx, -0x18(%ebp)
  67 0420 897DE4   	  mov %edi, -0x1c(%ebp)
  68              	
GAS LISTING kernel.s 			page 19


  69 0423 39D3     	  cmp %edx, %ebx
  70 0425 7F08     	  jg .Ldraw_line_22F
  71              	
  72 0427 8D75EC   	  lea -0x14(%ebp), %esi
  73 042a 8D7DF8   	  lea -0x8(%ebp), %edi
  74              	
  75 042d EB06     	  jmp .Ldraw_line_22E
  76              	
  77              	.Ldraw_line_22F:
  78              	
  79 042f 8D75F8   	  lea -0x8(%ebp), %esi
  80 0432 8D7DEC   	  lea -0x14(%ebp), %edi
  81              	
  82              	
  83              	.Ldraw_line_22E:
  84 0435 8B4EFC   	  mov -0x4(%esi), %ecx
  85 0438 83F900   	  cmp $0x0, %ecx
  86 043b 7505     	  jnz .Ldraw_line_30E
  87 043d B9010000 	  mov $0x1, %ecx
  87      00
  88              	
  89              	
  90              	.Ldraw_line_30E:
  91              	  
  92              	
  93              	.Ldraw_line_50L:
  94              	  
  95 0442 FF7518   	  pushl 0x18(%ebp)
  96 0445 FF75EC   	  pushl -0x14(%ebp)
  97 0448 FF75F8   	  pushl -0x8(%ebp)
  98 044b E8B7FEFF 	  call draw_pixel
  98      FF
  99 0450 6683C40C 	  add $0xc, %sp
 100              	
 101 0454 8B46F8   	  mov -0x8(%esi), %eax
 102 0457 0106     	  add %eax, (%esi)
 103              	
 104 0459 8B45FC   	  mov -0x4(%ebp), %eax
 105 045c 0347FC   	  add -0x4(%edi), %eax
 106 045f 8B5EFC   	  mov -0x4(%esi), %ebx
 107              	
 108 0462 39D8     	  cmp %ebx, %eax
 109 0464 7C07     	  jl .Ldraw_line_52E
 110 0466 29D8     	  sub %ebx, %eax
 111              	
 112 0468 8B5FF8   	  mov -0x8(%edi), %ebx
 113 046b 011F     	  add %ebx, (%edi)
 114              	
 115              	.Ldraw_line_52E:
 116 046d 8945FC   	  mov %eax, -0x4(%ebp)
 117 0470 E2D0     	  loop .Ldraw_line_50L
 118              	
 119              	
 120              	.Ldraw_line_50E:
 121              	  
 122 0472 5F       	  pop %edi
 123 0473 5E       	  pop %esi
GAS LISTING kernel.s 			page 20


 124 0474 5A       	  pop %edx
 125 0475 59       	  pop %ecx
 126 0476 5B       	  pop %ebx
 127 0477 58       	  pop %eax
 128              	
 129 0478 89EC     	  mov %ebp, %esp
 130 047a 5D       	  pop %ebp
 131              	
 132 047b C3       	  ret
 133              	
 134              	  
 135              	
 136              	  
 293              	.include "../modules/protect/draw_rect.s"
   1              	/*
   2              	 *  draw_rect(X0, Y0, X1, Y1, color)
   3              	 *  arguments:
   4              	 *    X0: starting x
   5              	 *    Y0: starting y
   6              	 *    X1: end of x
   7              	 *    Y1: end of y
   8              	 *    color: drawing color
   9              	 *  return: void
  10              	 */
  11              	
  12              	 draw_rect:
  13 047c 55       	  push %ebp
  14 047d 89E5     	  mov %esp, %ebp
  15              	
  16 047f 50       	  push %eax
  17 0480 53       	  push %ebx
  18 0481 51       	  push %ecx
  19 0482 52       	  push %edx
  20 0483 56       	  push %esi
  21              	
  22 0484 8B4508   	  mov 0x8(%ebp), %eax # X0
  23 0487 8B5D0C   	  mov 0xc(%ebp), %ebx # Y0
  24 048a 8B4D10   	  mov 0x10(%ebp), %ecx # X1
  25 048d 8B5514   	  mov 0x14(%ebp), %edx # Y1
  26 0490 8B7518   	  mov 0x18(%ebp), %esi # color
  27              	
  28 0493 39C8     	  cmp %ecx, %eax
  29 0495 7C01     	  jl .Ldraw_rect_10E
  30 0497 91       	  xchg %ecx, %eax
  31              	
  32              	.Ldraw_rect_10E:
  33              	  
  34 0498 39D3     	  cmp %edx, %ebx
  35 049a 7C02     	  jl .Ldraw_rect_20E
  36 049c 87D3     	  xchg %edx, %ebx
  37              	
  38              	.Ldraw_rect_20E:
  39              	
  40 049e 56       	  push %esi
  41 049f 53       	  push %ebx
  42 04a0 51       	  push %ecx
  43 04a1 53       	  push %ebx
GAS LISTING kernel.s 			page 21


  44 04a2 50       	  push %eax
  45 04a3 E822FFFF 	  call draw_line
  45      FF
  46 04a8 6683C414 	  add $0x14, %sp
  47              	
  48 04ac 56       	  push %esi
  49 04ad 52       	  push %edx
  50 04ae 50       	  push %eax
  51 04af 53       	  push %ebx
  52 04b0 50       	  push %eax
  53 04b1 E814FFFF 	  call draw_line
  53      FF
  54 04b6 6683C414 	  add $0x14, %sp
  55              	
  56 04ba 4A       	  dec %edx
  57 04bb 56       	  push %esi
  58 04bc 52       	  push %edx
  59 04bd 51       	  push %ecx
  60 04be 52       	  push %edx
  61 04bf 50       	  push %eax
  62 04c0 E805FFFF 	  call draw_line
  62      FF
  63 04c5 6683C414 	  add $0x14, %sp
  64 04c9 42       	  inc %edx
  65              	
  66 04ca 49       	  dec %ecx
  67 04cb 56       	  push %esi
  68 04cc 52       	  push %edx
  69 04cd 51       	  push %ecx
  70 04ce 53       	  push %ebx
  71 04cf 51       	  push %ecx
  72 04d0 E8F5FEFF 	  call draw_line
  72      FF
  73 04d5 6683C414 	  add $0x14, %sp
  74              	
  75 04d9 5E       	  pop %esi
  76 04da 5A       	  pop %edx
  77 04db 59       	  pop %ecx
  78 04dc 5B       	  pop %ebx
  79 04dd 58       	  pop %eax
  80              	
  81 04de 89EC     	  mov %ebp, %esp
  82 04e0 5D       	  pop %ebp
  83              	
  84 04e1 C3       	  ret
 294              	
 295 04e2 00000000 	.fill KERNEL_SIZE - (. - kernel), 0x1, 0x0
 295      00000000 
 295      00000000 
 295      00000000 
 295      00000000 
GAS LISTING kernel.s 			page 22


DEFINED SYMBOLS
          ./define.s:1      *ABS*:0000000000007c00 BOOT_LOAD
          ./define.s:2      *ABS*:0000000000002000 BOOT_SIZE
          ./define.s:3      *ABS*:0000000000000200 SECT_SIZE
          ./define.s:4      *ABS*:0000000000000010 BOOT_SECT
          ./define.s:5      *ABS*:0000000000009c00 BOOT_END
          ./define.s:6      *ABS*:0000000000000010 KERNEL_SECT
          ./define.s:7      *ABS*:0000000000002000 KERNEL_SIZE
          ./define.s:8      *ABS*:00000000000a0000 VRAM
          ./define.s:9      *ABS*:0000000000101000 KERNEL_LOAD
            kernel.s:7      .text:0000000000000000 kernel
            kernel.s:283    .text:0000000000000084 FONT_ADR
../modules/protect/draw_font.s:9      .text:00000000000001ff draw_font
../modules/protect/draw_str.s:10     .text:0000000000000244 draw_str
../modules/protect/draw_color_bar.s:9      .text:000000000000028d draw_color_bar
../modules/protect/draw_line.s:11     .text:00000000000003ca draw_line
../modules/protect/draw_rect.s:12     .text:000000000000047c draw_rect
../modules/protect/vga.s:7      .text:0000000000000088 vga_set_read_plane
../modules/protect/vga.s:36     .text:00000000000000a1 vga_set_write_plane
../modules/protect/vga.s:66     .text:00000000000000ba vram_font_copy
../modules/protect/vga.s:151    .text:000000000000010d vram_bit_copy
../modules/protect/draw_char.s:13     .text:000000000000013b draw_char
../modules/protect/draw_pixel.s:10     .text:0000000000000307 draw_pixel

NO UNDEFINED SYMBOLS
