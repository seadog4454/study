GAS LISTING kernel.s 			page 1


   1              	.include "./define.s"
   1              	.set BOOT_LOAD, 0x7C00
   2              	.set BOOT_SIZE, 0x2000 #(1024 * 8)
   3              	.set SECT_SIZE, 512
   4              	.set BOOT_SECT, 0x10 #(.Lboot_BOOT_SIZE / .Lboot_SECT_SIZE)
   5              	.set BOOT_END, 0x9C00
   6              	.set KERNEL_SECT, 0x10 #(.Lboot_KERNEL_SIZE / .Lboot_SECT_SIZE)
   7              	.set KERNEL_SIZE, 8192
   8              	.set VRAM, 0x000A0000
   9              	.set KERNEL_LOAD, 0x00101000
  10              	.set VECT_BASE, 0x00100000
  11              	
  12              	.set RING_ITEM_SIZE, (1 << 4)
  13              	.set RING_INDEX_MASK, (RING_ITEM_SIZE - 1)
   2              	.include "./macro.s"
   1              	.macro set_vect interruptNum, funcAddr
   2              	  push %eax
   3              	  push %edi
   4              	  mov $VECT_BASE + (\interruptNum * 8), %edi
   5              	  mov \funcAddr, %eax
   6              	
   7              	  mov %ax, (%edi)
   8              	  shr $0x10, %eax
   9              	  mov %ax, 0x6(%edi)
  10              	
  11              	  pop %edi
  12              	  pop %eax
  13              	.endm
  14              	
  15              	.macro outp port, val
  16              	  mov \val, %al
  17              	  out %al, \port
  18              	.endm
   3              	
   4              	.code32
   5              	.global kernel
   6              	
   7              	
   8              	kernel:
   9              	  
  10              	  
  11 0000 BE007E00 	  mov $(BOOT_LOAD + SECT_SIZE), %esi
  11      00
  12 0005 0FB706   	  movzxw (%esi), %eax
  13 0008 0FB75E02 	  movzxw 0x2(%esi), %ebx # segment
  14 000c C1E004   	  shl $0x4, %eax # offset
  15 000f 01D8     	  add %ebx, %eax
  16 0011 A3000000 	  mov %eax, (FONT_ADR)
  16      00
  17              	  
  18 0016 E8430700 	  call init_int
  18      00
  19 001b E8CB0600 	  call init_pic
  19      00
  20              	
  21 0020 5057BF00 	  set_vect 0x00, $int_zero_div
  21      001000B8 
GAS LISTING kernel.s 			page 2


  21      00000000 
  21      668907C1 
  21      E8106689 
  22 0038 5057BF00 	  set_vect 0x20, $int_timer
  22      011000B8 
  22      00000000 
  22      668907C1 
  22      E8106689 
  23 0050 5057BF08 	  set_vect 0x21, $int_keyboard
  23      011000B8 
  23      00000000 
  23      668907C1 
  23      E8106689 
  24 0068 5057BF40 	  set_vect 0x28, $int_rtc
  24      011000B8 
  24      00000000 
  24      668907C1 
  24      E8106689 
  25              	
  26 0080 6A10     	  push $0x10
  27 0082 E88F0600 	  call rtc_int_en
  27      00
  28 0087 83C404   	  add $0x4, %esp
  29 008a E8890900 	  call int_en_timer0
  29      00
  30              	
  31 008f B0F8E621 	  outp $0x21, $0b11111000# enable slavePIC/KBC/timer
  32              	  #outp $0x21, $0b11111011
  33              	  #outp $0x21, $0b11111001
  34 0093 B0FEE6A1 	  outp $0xA1, $0b11111110 # enable RTC
  35              	
  36 0097 FB       	  sti
  37              	
  38              	  
  39 0098 6A0D     	  push $13
  40 009a 6A3F     	  push $63
  41 009c E8060200 	  call draw_font
  41      00
  42 00a1 6683C408 	  add $0x8, %sp 
  43              	
  44              	
  45              	
  46 00a5 6A04     	  push $0x4
  47 00a7 6A3F     	  push $63
  48 00a9 E8870200 	  call draw_color_bar
  48      00
  49 00ae 6683C408 	  add $0x8, %sp
  50              	
  51              	
  52 00b2 68000000 	  push $.Lkernel_s0
  52      00
  53 00b7 680F0100 	  push $0x010F
  53      00
  54 00bc 6A0E     	  push $14
  55 00be 6A19     	  push $0x19
  56 00c0 E8270200 	  call draw_str
  56      00
GAS LISTING kernel.s 			page 3


  57 00c5 6683C410 	  add $0x10, %sp
  58              	
  59              	.Lkernel_10L:
  60              	
  61              	
  62 00c9 A1000000 	  mov (RTC_TIME), %eax
  62      00
  63              	
  64 00ce 50       	  push %eax
  65 00cf 68000700 	  push $0x0700
  65      00
  66 00d4 6A00     	  push $0x0
  67 00d6 6A48     	  push $72
  68 00d8 E8780500 	  call draw_time
  68      00
  69 00dd 6683C410 	  add $0x10, %sp
  70              	
  71 00e1 E8410900 	  call draw_rotation_bar
  71      00
  72              	
  73 00e6 68000000 	  push $.int_key
  73      00
  74 00eb 68000000 	  push $_KEY_BUFF
  74      00
  75 00f0 E82F0800 	  call ring_rd
  75      00
  76 00f5 6683C408 	  add $0x8, %sp
  77 00f9 83F800   	  cmp $0x0, %eax
  78 00fc 7412     	  je .Lkernel_10E
  79              	
  80 00fe 68000000 	  push $_KEY_BUFF
  80      00
  81 0103 6A1D     	  push $29
  82 0105 6A02     	  push $2
  83 0107 E8940800 	  call draw_key
  83      00
  84 010c 6683C40C 	  add $0xc, %sp
  85              	
  86              	.Lkernel_10E:
  87 0110 EBB7     	  jmp .Lkernel_10L 
  88              	
  89 0112 48656C6C 	.Lkernel_s0: .string "Hello, kernel!"
  89      6F2C206B 
  89      65726E65 
  89      6C2100
  90              	
  91 0121 0F1F00   	.align 4
  92 0124 00000000 	FONT_ADR: .long 0x0
  93 0128 00000000 	RTC_TIME: .long 0x0
  94 012c 00000000 	.int_key: .long 0x0
  95              	
  96              	.include "../modules/protect/vga.s"
   1              	/*
   2              	 *  vga_set_read_plane(plane)
   3              	 *  arguments:
   4              	 *    plane:  reading plane
   5              	 *  return: void
GAS LISTING kernel.s 			page 4


   6              	 */
   7              	vga_set_read_plane:
   8 0130 55       	  push %ebp
   9 0131 89E5     	  mov %esp, %ebp
  10              	
  11 0133 50       	  push %eax
  12 0134 52       	  push %edx
  13              	
  14 0135 8A6508   	  mov 0x8(%ebp), %ah
  15 0138 80E403   	  and $0x03, %ah
  16 013b B004     	  mov $0x04, %al
  17 013d 66BACE03 	  mov $0x03CE, %dx
  18 0141 66EF     	  out %ax, %dx
  19              	
  20 0143 5A       	  pop %edx
  21 0144 58       	  pop %eax
  22              	
  23 0145 89EC     	  mov %ebp, %esp
  24 0147 5D       	  pop %ebp
  25              	
  26 0148 C3       	  ret
  27              	
  28              	
  29              	/*
  30              	 * vga_set_write_plane(plane)
  31              	 * arguments:
  32              	 *  plane:  writing plane
  33              	 * return: void
  34              	 */
  35              	
  36              	vga_set_write_plane:
  37 0149 55       	  push %ebp
  38 014a 89E5     	  mov %esp, %ebp
  39              	
  40 014c 50       	  push %eax
  41 014d 52       	  push %edx
  42              	
  43 014e 8A6508   	  mov 0x8(%ebp), %ah
  44 0151 80E40F   	  and $0xF, %ah
  45 0154 B002     	  mov $0x2, %al
  46 0156 66BAC403 	  mov $0x03C4, %dx
  47 015a 66EF     	  out %ax, %dx
  48              	  
  49 015c 5A       	  pop %edx
  50 015d 58       	  pop %eax
  51              	
  52 015e 89EC     	  mov %ebp, %esp
  53 0160 5D       	  pop %ebp
  54 0161 C3       	  ret
  55              	
  56              	/*
  57              	 * vram_font_copy(font, vram, plane, color)
  58              	 * arguments:
  59              	 *  font: font addr
  60              	 *  vram: vram addr
  61              	 *  plane:  output plane
  62              	 *  color:  drawing color
GAS LISTING kernel.s 			page 5


  63              	 * reutnr: void
  64              	 */
  65              	
  66              	vram_font_copy:
  67 0162 55       	  push %ebp
  68 0163 89E5     	  mov %esp, %ebp
  69              	
  70 0165 50       	  push %eax
  71 0166 53       	  push %ebx
  72 0167 51       	  push %ecx
  73 0168 52       	  push %edx
  74 0169 56       	  push %esi
  75 016a 57       	  push %edi
  76              	
  77 016b 8B7508   	  mov 0x8(%ebp), %esi # font
  78 016e 8B7D0C   	  mov 0xc(%ebp), %edi # vram
  79 0171 0FB64510 	  movzxb 0x10(%ebp), %eax # plane
  80 0175 0FB75D14 	  movzxw 0x14(%ebp), %ebx # color
  81              	
  82 0179 84C7     	  test %al, %bh
  83 017b 0F94C6   	  setz %dh
  84 017e FECE     	  dec %dh
  85              	
  86 0180 84C3     	  test %al, %bl
  87 0182 0F94C2   	  setz %dl
  88 0185 FECA     	  dec %dl
  89              	
  90              	  # copy 16 dot's font
  91 0187 FC       	  cld
  92              	
  93 0188 B9100000 	  mov $0x10, %ecx
  93      00
  94              	.Lvram_font_copy_10L:
  95              	  
  96              	  # create font mask
  97 018d AC       	  lodsb
  98 018e 88C4     	  mov %al, %ah
  99 0190 F6D4     	  not %ah
 100              	  
 101              	  # front color(font color)
 102 0192 20D0     	  and %dl, %al
 103              	
 104              	  # background color
 105 0194 F7C31000 	  test $0x0010, %ebx
 105      0000
 106 019a 7404     	  jz .Lvram_font_copy_11F
 107 019c 2227     	  and (%edi), %ah
 108 019e EB02     	  jmp .Lvram_font_copy_11E
 109              	
 110              	.Lvram_font_copy_11F:
 111 01a0 20F4     	  and %dh, %ah
 112              	
 113              	.Lvram_font_copy_11E:
 114              	
 115              	  # merge front and background color
 116 01a2 08E0     	  or %ah, %al
 117              	
GAS LISTING kernel.s 			page 6


 118 01a4 8807     	  mov %al, (%edi)
 119              	  
 120 01a6 83C750   	  add $80, %edi
 121 01a9 E2E2     	  loop .Lvram_font_copy_10L
 122              	
 123              	.Lvram_font_copy_10E:
 124              	
 125 01ab 5F       	  pop %edi
 126 01ac 5E       	  pop %esi
 127 01ad 5A       	  pop %edx
 128 01ae 59       	  pop %ecx
 129 01af 5B       	  pop %ebx
 130 01b0 58       	  pop %eax
 131              	
 132 01b1 89EC     	  mov %ebp, %esp
 133 01b3 5D       	  pop %ebp
 134              	
 135 01b4 C3       	  ret
 136              	
 137              	
 138              	
 139              	
 140              	
 141              	/*
 142              	 *  vram_bit_copy(bit, vram, plane, color)
 143              	 *  arguments:
 144              	 *    bit:  bit pattern
 145              	 *    vram: vram addr
 146              	 *    plane:
 147              	 *    color:
 148              	 *
 149              	 */
 150              	
 151              	vram_bit_copy:
 152 01b5 55       	  push %ebp
 153 01b6 89E5     	  mov %esp, %ebp
 154              	
 155 01b8 50       	  push %eax
 156 01b9 53       	  push %ebx
 157 01ba 57       	  push %edi
 158              	
 159 01bb 8B7D0C   	  mov 0xc(%ebp), %edi # vram addr
 160 01be 0FB64510 	  movzxb 0x10(%ebp), %eax # plane
 161 01c2 0FB75D14 	  movzxw 0x14(%ebp), %ebx # color
 162              	
 163 01c6 84C3     	  test %al, %bl
 164 01c8 0F94C3   	  setz %bl
 165 01cb FECB     	  dec %bl
 166              	
 167 01cd 8A4508   	  mov 0x8(%ebp), %al
 168 01d0 88C4     	  mov %al, %ah
 169 01d2 F6D4     	  not %ah
 170              	
 171 01d4 2227     	  and (%edi), %ah
 172 01d6 20D8     	  and %bl, %al
 173 01d8 08E0     	  or %ah, %al
 174              	  
GAS LISTING kernel.s 			page 7


 175 01da 8807     	  mov %al, (%edi)
 176              	
 177 01dc 5F       	  pop %edi
 178 01dd 5B       	  pop %ebx
 179 01de 58       	  pop %eax
 180              	
 181 01df 89EC     	  mov %ebp, %esp
 182 01e1 5D       	  pop %ebp
 183              	  
 184 01e2 C3       	  ret
  97              	.include "../modules/protect/draw_char.s"
   1              	/*
   2              	 *  draw_char(col, row, color, ch)
   3              	 *  arguments:
   4              	 *    col: 0 ~ 79
   5              	 *    row: 0 ~ 29
   6              	 *    color: drawing color
   7              	 *    ch : char
   8              	 *  return : null
   9              	 */
  10              	
  11              	.include "./define.s"
  12              	
  13              	draw_char:
  14 01e3 55       	  push %ebp
  15 01e4 89E5     	  mov %esp, %ebp
  16              	
  17 01e6 50       	  push %eax
  18 01e7 53       	  push %ebx
  19 01e8 51       	  push %ecx
  20 01e9 52       	  push %edx
  21 01ea 56       	  push %esi
  22 01eb 57       	  push %edi
  23              	
  24              	  # get font addr
  25 01ec 0FB67514 	  movzxb 0x14(%ebp), %esi # font addr
  26 01f0 C1E604   	  shl $0x4, %esi
  27 01f3 03350000 	  add (FONT_ADR), %esi
  27      0000
  28              	
  29 01f9 8B7D0C   	  mov 0xc(%ebp), %edi # row
  30 01fc C1E708   	  shl $0x8, %edi
  31 01ff 8DBCBF00 	  lea VRAM(%edi, %edi, 0x4), %edi
  31      000A00
  32 0206 037D08   	  add 0x8(%ebp), %edi # col
  33              	  
  34              	  # put char
  35 0209 0FB75D10 	  movzxw 0x10(%ebp), %ebx # color
  36              	 
  37 020d 6A03     	  push $0x03
  38 020f E81CFFFF 	  call vga_set_read_plane
  38      FF
  39 0214 6683C404 	  add $0x4, %sp
  40              	  
  41 0218 6A08     	  push $0x08
  42 021a E82AFFFF 	  call vga_set_write_plane
  42      FF
GAS LISTING kernel.s 			page 8


  43 021f 6683C404 	  add $0x4, %sp
  44              	
  45 0223 53       	  push %ebx
  46 0224 6A08     	  push $0x08
  47 0226 57       	  push %edi
  48 0227 56       	  push %esi
  49 0228 E835FFFF 	  call vram_font_copy
  49      FF
  50 022d 6683C410 	  add $0x10, %sp
  51              	
  52              	  
  53 0231 6A02     	  push $0x02
  54 0233 E8F8FEFF 	  call vga_set_read_plane
  54      FF
  55 0238 6683C404 	  add $0x4, %sp
  56              	  
  57 023c 6A04     	  push $0x04
  58 023e E806FFFF 	  call vga_set_write_plane
  58      FF
  59 0243 6683C404 	  add $0x4, %sp
  60              	
  61 0247 53       	  push %ebx
  62 0248 6A04     	  push $0x04
  63 024a 57       	  push %edi
  64 024b 56       	  push %esi
  65 024c E811FFFF 	  call vram_font_copy
  65      FF
  66 0251 6683C410 	  add $0x10, %sp
  67              	
  68              	
  69 0255 6A01     	  push $0x01
  70 0257 E8D4FEFF 	  call vga_set_read_plane
  70      FF
  71 025c 6683C404 	  add $0x4, %sp
  72              	  
  73 0260 6A02     	  push $0x02
  74 0262 E8E2FEFF 	  call vga_set_write_plane
  74      FF
  75 0267 6683C404 	  add $0x4, %sp
  76              	
  77 026b 53       	  push %ebx
  78 026c 6A02     	  push $0x02
  79 026e 57       	  push %edi
  80 026f 56       	  push %esi
  81 0270 E8EDFEFF 	  call vram_font_copy
  81      FF
  82 0275 6683C410 	  add $0x10, %sp
  83              	
  84 0279 6A00     	  push $0x00
  85 027b E8B0FEFF 	  call vga_set_read_plane
  85      FF
  86 0280 6683C404 	  add $0x4, %sp
  87              	  
  88 0284 6A01     	  push $0x01
  89 0286 E8BEFEFF 	  call vga_set_write_plane
  89      FF
  90 028b 6683C404 	  add $0x4, %sp
GAS LISTING kernel.s 			page 9


  91              	
  92 028f 53       	  push %ebx
  93 0290 6A01     	  push $0x01
  94 0292 57       	  push %edi
  95 0293 56       	  push %esi
  96 0294 E8C9FEFF 	  call vram_font_copy
  96      FF
  97 0299 6683C410 	  add $0x10, %sp
  98              	
  99 029d 5F       	  pop %edi
 100 029e 5E       	  pop %esi
 101 029f 5A       	  pop %edx
 102 02a0 59       	  pop %ecx
 103 02a1 5B       	  pop %ebx
 104 02a2 58       	  pop %eax
 105              	
 106 02a3 89EC     	  mov %ebp, %esp
 107 02a5 5D       	  pop %ebp
 108              	
 109 02a6 C3       	  ret
  98              	.include "../modules/protect/draw_font.s"
   1              	/*
   2              	 *  draw_font(col, row)
   3              	 *  arguments:
   4              	 *    col:
   5              	 *    row
   6              	 *  return: null
   7              	 */
   8              	
   9              	draw_font:
  10 02a7 55       	  push %ebp
  11 02a8 89E5     	  mov %esp, %ebp
  12              	
  13 02aa 50       	  push %eax
  14 02ab 53       	  push %ebx
  15 02ac 51       	  push %ecx
  16 02ad 52       	  push %edx
  17 02ae 56       	  push %esi
  18 02af 57       	  push %edi
  19              	
  20 02b0 8B7508   	  mov 0x8(%ebp), %esi # col
  21 02b3 8B7D0C   	  mov 0xc(%ebp), %edi # row
  22              	
  23 02b6 B9000000 	  mov $0x0, %ecx
  23      00
  24              	.Ldraw_font_10L:  
  25 02bb 81F90001 	  cmp $0x100, %ecx
  25      0000
  26 02c1 731F     	  jae .Ldraw_font_10E
  27              	
  28 02c3 89C8     	  mov %ecx, %eax
  29 02c5 83E00F   	  and $0x0F, %eax
  30 02c8 01F0     	  add %esi, %eax
  31              	
  32 02ca 89CB     	  mov %ecx, %ebx
  33 02cc C1EB04   	  shr $0x4, %ebx
  34 02cf 01FB     	  add %edi, %ebx
GAS LISTING kernel.s 			page 10


  35              	
  36 02d1 51       	  push %ecx
  37 02d2 6A07     	  push $0x07
  38 02d4 53       	  push %ebx
  39 02d5 50       	  push %eax
  40 02d6 E808FFFF 	  call draw_char
  40      FF
  41 02db 6683C410 	  add $0x10, %sp
  42              	
  43 02df 41       	  inc %ecx
  44 02e0 EBD9     	  jmp .Ldraw_font_10L
  45              	.Ldraw_font_10E:
  46              	
  47 02e2 5F       	  pop %edi
  48 02e3 5E       	  pop %esi
  49 02e4 5A       	  pop %edx
  50 02e5 59       	  pop %ecx
  51 02e6 5B       	  pop %ebx
  52 02e7 58       	  pop %eax
  53              	
  54 02e8 89EC     	  mov %ebp, %esp
  55 02ea 5D       	  pop %ebp
  56              	
  57 02eb C3       	  ret
  99              	.include "../modules/protect/draw_str.s"
   1              	/*
   2              	 *  draw_str(col, row, color, p)
   3              	 *  arguments:
   4              	 *    col
   5              	 *    row:
   6              	 *    color: drawing color
   7              	 *    str's addr
   8              	 */
   9              	
  10              	draw_str:
  11 02ec 55       	  push %ebp
  12 02ed 89E5     	  mov %esp, %ebp
  13              	
  14 02ef 50       	  push %eax
  15 02f0 53       	  push %ebx
  16 02f1 51       	  push %ecx
  17 02f2 52       	  push %edx
  18 02f3 56       	  push %esi
  19              	
  20 02f4 8B4D08   	  mov 0x8(%ebp), %ecx
  21 02f7 8B550C   	  mov 0xc(%ebp), %edx
  22 02fa 0FB75D10 	  movzxw 0x10(%ebp), %ebx
  23 02fe 8B7514   	  mov 0x14(%ebp), %esi
  24              	
  25 0301 FC       	  cld
  26              	.Ldraw_str_10L:
  27              	
  28 0302 AC       	  lodsb
  29 0303 3C00     	  cmp $0x0, %al
  30 0305 7425     	  je .Ldraw_str_10E
  31              	
  32 0307 50       	  push %eax
GAS LISTING kernel.s 			page 11


  33 0308 53       	  push %ebx
  34 0309 52       	  push %edx
  35 030a 51       	  push %ecx
  36 030b E8D3FEFF 	  call draw_char
  36      FF
  37 0310 6683C410 	  add $0x10, %sp
  38              	
  39              	
  40              	
  41 0314 41       	  inc %ecx
  42 0315 83F950   	  cmp $80, %ecx
  43 0318 7C10     	  jl .Ldraw_str_12E
  44 031a B9000000 	  mov $0, %ecx
  44      00
  45 031f 42       	  inc %edx
  46 0320 83FA1E   	  cmp $30, %edx
  47 0323 7C05     	  jl .Ldraw_str_12E
  48 0325 BA000000 	  mov $0, %edx
  48      00
  49              	
  50              	.Ldraw_str_12E:
  51 032a EBD6     	  jmp .Ldraw_str_10L
  52              	
  53              	.Ldraw_str_10E:
  54              	
  55 032c 5E       	  pop %esi
  56 032d 5A       	  pop %edx
  57 032e 59       	  pop %ecx
  58 032f 5B       	  pop %ebx
  59 0330 58       	  pop %eax
  60              	
  61 0331 89EC     	  mov %ebp, %esp
  62 0333 5D       	  pop %ebp
  63              	
  64 0334 C3       	  ret
  65              	
 100              	.include "../modules/protect/draw_color_bar.s"
   1              	/*
   2              	 *  draw_color_bar(row, col)
   3              	 *  arguments:
   4              	 *    row:
   5              	 *    col:
   6              	 *  reuturn: void
   7              	 */
   8              	
   9              	draw_color_bar:
  10 0335 55       	  push %ebp
  11 0336 89E5     	  mov %esp, %ebp
  12              	
  13 0338 50       	  push %eax
  14 0339 53       	  push %ebx
  15 033a 51       	  push %ecx
  16 033b 52       	  push %edx
  17 033c 56       	  push %esi
  18 033d 57       	  push %edi
  19              	
  20 033e 8B7508   	  mov 0x8(%ebp), %esi #row
GAS LISTING kernel.s 			page 12


  21 0341 8B7D0C   	  mov 0xc(%ebp), %edi #col
  22              	
  23 0344 B9000000 	  mov $0x0, %ecx
  23      00
  24              	.Ldraw_color_bar_10L:
  25 0349 83F910   	  cmp $0x10, %ecx
  26 034c 732E     	  jae .Ldraw_color_bar_10E
  27              	
  28 034e 89C8     	  mov %ecx, %eax
  29 0350 83E001   	  and $0x01, %eax
  30 0353 C1E003   	  shl $0x3, %eax
  31 0356 01F0     	  add %esi, %eax
  32              	
  33 0358 89CB     	  mov %ecx, %ebx
  34 035a D1EB     	  shr $0x1, %ebx
  35 035c 01FB     	  add %edi, %ebx
  36              	
  37 035e 89CA     	  mov %ecx, %edx
  38 0360 D1E2     	  shl $0x1, %edx
  39 0362 8B920000 	  mov .Ldraw_color_bar_t0(%edx), %edx
  39      0000
  40              	
  41 0368 68000000 	  push $.Ldraw_color_bar_s0
  41      00
  42 036d 52       	  push %edx
  43 036e 53       	  push %ebx
  44 036f 50       	  push %eax
  45 0370 E877FFFF 	  call draw_str
  45      FF
  46 0375 6683C410 	  add $0x10, %sp
  47              	
  48 0379 41       	  inc %ecx
  49 037a EBCD     	  jmp .Ldraw_color_bar_10L
  50              	
  51              	.Ldraw_color_bar_10E:
  52              	  
  53 037c 5F       	  pop %edi
  54 037d 5E       	  pop %esi
  55 037e 5A       	  pop %edx
  56 037f 59       	  pop %ecx
  57 0380 5B       	  pop %ebx
  58 0381 58       	  pop %eax
  59              	
  60 0382 89EC     	  mov %ebp, %esp
  61 0384 5D       	  pop %ebp
  62              	
  63 0385 C3       	  ret
  64              	
  65 0386 20202020 	.Ldraw_color_bar_s0: .string "        "
  65      20202020 
  65      00
  66              	
  67 038f 00000008 	.Ldraw_color_bar_t0: .word 0x0000, 0x0800 
  68 0393 00010009 	.word 0x0100, 0x0900
  69 0397 0002000A 	.word 0x0200, 0x0A00
  70 039b 0003000B 	.word 0x0300, 0x0B00
  71 039f 0004000C 	.word 0x0400, 0x0C00
GAS LISTING kernel.s 			page 13


  72 03a3 0005000D 	.word 0x0500, 0x0D00
  73 03a7 0006000E 	.word 0x0600, 0x0E00
  74 03ab 0007000F 	.word 0x0700, 0x0F00
 101              	.include "../modules/protect/draw_pixel.s"
   1              	/*
   2              	 *  draw_pixel(X, Y, color)
   3              	 *  X:
   4              	 *  Y:
   5              	 *  color:
   6              	 *  return: void
   7              	 */
   8              	
   9              	
  10              	draw_pixel:
  11              	
  12 03af 55       	  push %ebp
  13 03b0 89E5     	  mov %esp, %ebp
  14              	
  15 03b2 50       	  push %eax
  16 03b3 53       	  push %ebx
  17 03b4 51       	  push %Ecx
  18 03b5 57       	  push %edi
  19              	
  20 03b6 8B7D0C   	  mov 0xc(%ebp), %edi # Y
  21 03b9 C1E704   	  shl $0x4, %edi
  22 03bc 8DBCBF00 	  lea VRAM(%edi, %edi, 0x4), %edi
  22      000A00
  23              	  
  24 03c3 8B5D08   	  mov 0x8(%ebp), %ebx
  25 03c6 89D9     	  mov %ebx, %ecx
  26 03c8 C1EB03   	  shr $0x3, %ebx
  27 03cb 01DF     	  add %ebx, %edi
  28              	
  29 03cd 83E107   	  and $0x7, %ecx
  30 03d0 BB800000 	  mov $0x80, %ebx
  30      00
  31 03d5 D3EB     	  shr %cl, %ebx
  32              	
  33 03d7 8B4D10   	  mov 0x10(%ebp), %ecx
  34              	
  35 03da 6A03     	  push $0x03
  36 03dc E84FFDFF 	  call vga_set_read_plane
  36      FF
  37 03e1 6683C404 	  add $0x04, %sp
  38              	
  39 03e5 6A08     	  push $0x08
  40 03e7 E85DFDFF 	  call vga_set_write_plane
  40      FF
  41 03ec 6683C404 	  add $0x04, %sp
  42              	
  43 03f0 51       	  push %ecx
  44 03f1 6A08     	  push $0x08
  45 03f3 57       	  push %edi
  46 03f4 53       	  push %ebx
  47 03f5 E8BBFDFF 	  call vram_bit_copy
  47      FF
  48 03fa 6683C410 	  add $0x10, %sp
GAS LISTING kernel.s 			page 14


  49              	
  50              	
  51 03fe 6A02     	  push $0x02
  52 0400 E82BFDFF 	  call vga_set_read_plane
  52      FF
  53 0405 6683C404 	  add $0x04, %sp
  54              	
  55 0409 6A04     	  push $0x04
  56 040b E839FDFF 	  call vga_set_write_plane
  56      FF
  57 0410 6683C404 	  add $0x04, %sp
  58              	
  59 0414 51       	  push %ecx
  60 0415 6A04     	  push $0x04
  61 0417 57       	  push %edi
  62 0418 53       	  push %ebx
  63 0419 E897FDFF 	  call vram_bit_copy
  63      FF
  64 041e 6683C410 	  add $0x10, %sp
  65              	
  66              	
  67 0422 6A01     	  push $0x01
  68 0424 E807FDFF 	  call vga_set_read_plane
  68      FF
  69 0429 6683C404 	  add $0x04, %sp
  70              	
  71 042d 6A02     	  push $0x02
  72 042f E815FDFF 	  call vga_set_write_plane
  72      FF
  73 0434 6683C404 	  add $0x04, %sp
  74              	
  75 0438 51       	  push %ecx
  76 0439 6A02     	  push $0x02
  77 043b 57       	  push %edi
  78 043c 53       	  push %ebx
  79 043d E873FDFF 	  call vram_bit_copy
  79      FF
  80 0442 6683C410 	  add $0x10, %sp
  81              	
  82              	
  83              	
  84 0446 6A00     	  push $0x00
  85 0448 E8E3FCFF 	  call vga_set_read_plane
  85      FF
  86 044d 6683C404 	  add $0x04, %sp
  87              	
  88 0451 6A01     	  push $0x01
  89 0453 E8F1FCFF 	  call vga_set_write_plane
  89      FF
  90 0458 6683C404 	  add $0x04, %sp
  91              	
  92 045c 51       	  push %ecx
  93 045d 6A01     	  push $0x01
  94 045f 57       	  push %edi
  95 0460 53       	  push %ebx
  96 0461 E84FFDFF 	  call vram_bit_copy
  96      FF
GAS LISTING kernel.s 			page 15


  97 0466 6683C410 	  add $0x10, %sp
  98              	
  99              	
 100 046a 5F       	  pop %edi
 101 046b 59       	  pop %ecx
 102 046c 5B       	  pop %ebx
 103 046d 58       	  pop %eax
 104              	
 105 046e 89EC     	  mov %ebp, %esp
 106 0470 5D       	  pop %ebp
 107              	
 108 0471 C3       	  ret
 102              	.include "../modules/protect/draw_line.s"
   1              	/*
   2              	 *  draw_line(X0, Y0, X1, Y1, color)
   3              	 *  X0: start point of x
   4              	 *  Y0: start point of y
   5              	 *  X1: end point of x
   6              	 *  Y1: end point of y
   7              	 *  color:  drawing color
   8              	 *  return: void
   9              	 */
  10              	
  11              	draw_line:
  12 0472 55       	  push %ebp
  13 0473 89E5     	  mov %esp, %ebp
  14              	
  15 0475 6A00     	  pushl $0
  16 0477 6A00     	  pushl $0
  17 0479 6A00     	  pushl $0
  18 047b 6A00     	  pushl $0
  19 047d 6A00     	  pushl $0
  20 047f 6A00     	  pushl $0
  21 0481 6A00     	  pushl $0
  22              	
  23 0483 50       	  push %eax
  24 0484 53       	  push %ebx
  25 0485 51       	  push %ecx
  26 0486 52       	  push %edx
  27 0487 56       	  push %esi
  28 0488 57       	  push %edi
  29              	
  30 0489 8B4508   	  mov 0x8(%ebp), %eax # X0
  31 048c 8B5D10   	  mov 0x10(%ebp), %ebx # X1
  32 048f 29C3     	  sub %eax, %ebx # X1 - X0
  33 0491 7D09     	  jge .Ldraw_line_10F
  34              	
  35 0493 F7DB     	  neg %ebx
  36 0495 BEFFFFFF 	  mov $-0x1, %esi
  36      FF
  37 049a EB05     	  jmp .Ldraw_line_10E
  38              	
  39              	.Ldraw_line_10F:
  40              	
  41 049c BE010000 	  mov $0x1, %esi
  41      00
  42              	
GAS LISTING kernel.s 			page 16


  43              	.Ldraw_line_10E:
  44              	  
  45 04a1 8B4D0C   	  mov 0xc(%ebp), %ecx # Y0
  46 04a4 8B5514   	  mov 0x14(%ebp), %edx # Y1
  47 04a7 29CA     	  sub %ecx, %edx # Y1 - Y0
  48 04a9 7D09     	  jge .Ldraw_line_20F
  49              	
  50 04ab F7DA     	  neg %edx
  51 04ad BFFFFFFF 	  mov $-0x1, %edi
  51      FF
  52 04b2 EB05     	  jmp .Ldraw_line_20E
  53              	
  54              	.Ldraw_line_20F:
  55              	  
  56 04b4 BF010000 	  mov $0x1, %edi
  56      00
  57              	
  58              	
  59              	.Ldraw_line_20E:
  60              	
  61 04b9 8945F8   	  mov %eax, -0x8(%ebp)
  62 04bc 895DF4   	  mov %ebx, -0xc(%ebp)
  63 04bf 8975F0   	  mov %esi, -0x10(%ebp)
  64              	
  65 04c2 894DEC   	  mov %ecx, -0x14(%ebp)
  66 04c5 8955E8   	  mov %edx, -0x18(%ebp)
  67 04c8 897DE4   	  mov %edi, -0x1c(%ebp)
  68              	
  69 04cb 39D3     	  cmp %edx, %ebx
  70 04cd 7F08     	  jg .Ldraw_line_22F
  71              	
  72 04cf 8D75EC   	  lea -0x14(%ebp), %esi
  73 04d2 8D7DF8   	  lea -0x8(%ebp), %edi
  74              	
  75 04d5 EB06     	  jmp .Ldraw_line_22E
  76              	
  77              	.Ldraw_line_22F:
  78              	
  79 04d7 8D75F8   	  lea -0x8(%ebp), %esi
  80 04da 8D7DEC   	  lea -0x14(%ebp), %edi
  81              	
  82              	
  83              	.Ldraw_line_22E:
  84 04dd 8B4EFC   	  mov -0x4(%esi), %ecx
  85 04e0 83F900   	  cmp $0x0, %ecx
  86 04e3 7505     	  jnz .Ldraw_line_30E
  87 04e5 B9010000 	  mov $0x1, %ecx
  87      00
  88              	
  89              	
  90              	.Ldraw_line_30E:
  91              	  
  92              	
  93              	.Ldraw_line_50L:
  94              	  
  95 04ea FF7518   	  pushl 0x18(%ebp)
  96 04ed FF75EC   	  pushl -0x14(%ebp)
GAS LISTING kernel.s 			page 17


  97 04f0 FF75F8   	  pushl -0x8(%ebp)
  98 04f3 E8B7FEFF 	  call draw_pixel
  98      FF
  99 04f8 6683C40C 	  add $0xc, %sp
 100              	
 101 04fc 8B46F8   	  mov -0x8(%esi), %eax
 102 04ff 0106     	  add %eax, (%esi)
 103              	
 104 0501 8B45FC   	  mov -0x4(%ebp), %eax
 105 0504 0347FC   	  add -0x4(%edi), %eax
 106 0507 8B5EFC   	  mov -0x4(%esi), %ebx
 107              	
 108 050a 39D8     	  cmp %ebx, %eax
 109 050c 7C07     	  jl .Ldraw_line_52E
 110 050e 29D8     	  sub %ebx, %eax
 111              	
 112 0510 8B5FF8   	  mov -0x8(%edi), %ebx
 113 0513 011F     	  add %ebx, (%edi)
 114              	
 115              	.Ldraw_line_52E:
 116 0515 8945FC   	  mov %eax, -0x4(%ebp)
 117 0518 E2D0     	  loop .Ldraw_line_50L
 118              	
 119              	
 120              	.Ldraw_line_50E:
 121              	  
 122 051a 5F       	  pop %edi
 123 051b 5E       	  pop %esi
 124 051c 5A       	  pop %edx
 125 051d 59       	  pop %ecx
 126 051e 5B       	  pop %ebx
 127 051f 58       	  pop %eax
 128              	
 129 0520 89EC     	  mov %ebp, %esp
 130 0522 5D       	  pop %ebp
 131              	
 132 0523 C3       	  ret
 133              	
 134              	  
 135              	
 136              	  
 103              	.include "../modules/protect/draw_rect.s"
   1              	/*
   2              	 *  draw_rect(X0, Y0, X1, Y1, color)
   3              	 *  arguments:
   4              	 *    X0: starting x
   5              	 *    Y0: starting y
   6              	 *    X1: end of x
   7              	 *    Y1: end of y
   8              	 *    color: drawing color
   9              	 *  return: void
  10              	 */
  11              	
  12              	 draw_rect:
  13 0524 55       	  push %ebp
  14 0525 89E5     	  mov %esp, %ebp
  15              	
GAS LISTING kernel.s 			page 18


  16 0527 50       	  push %eax
  17 0528 53       	  push %ebx
  18 0529 51       	  push %ecx
  19 052a 52       	  push %edx
  20 052b 56       	  push %esi
  21              	
  22 052c 8B4508   	  mov 0x8(%ebp), %eax # X0
  23 052f 8B5D0C   	  mov 0xc(%ebp), %ebx # Y0
  24 0532 8B4D10   	  mov 0x10(%ebp), %ecx # X1
  25 0535 8B5514   	  mov 0x14(%ebp), %edx # Y1
  26 0538 8B7518   	  mov 0x18(%ebp), %esi # color
  27              	
  28 053b 39C8     	  cmp %ecx, %eax
  29 053d 7C01     	  jl .Ldraw_rect_10E
  30 053f 91       	  xchg %ecx, %eax
  31              	
  32              	.Ldraw_rect_10E:
  33              	  
  34 0540 39D3     	  cmp %edx, %ebx
  35 0542 7C02     	  jl .Ldraw_rect_20E
  36 0544 87D3     	  xchg %edx, %ebx
  37              	
  38              	.Ldraw_rect_20E:
  39              	
  40 0546 56       	  push %esi
  41 0547 53       	  push %ebx
  42 0548 51       	  push %ecx
  43 0549 53       	  push %ebx
  44 054a 50       	  push %eax
  45 054b E822FFFF 	  call draw_line
  45      FF
  46 0550 6683C414 	  add $0x14, %sp
  47              	
  48 0554 56       	  push %esi
  49 0555 52       	  push %edx
  50 0556 50       	  push %eax
  51 0557 53       	  push %ebx
  52 0558 50       	  push %eax
  53 0559 E814FFFF 	  call draw_line
  53      FF
  54 055e 6683C414 	  add $0x14, %sp
  55              	
  56 0562 4A       	  dec %edx
  57 0563 56       	  push %esi
  58 0564 52       	  push %edx
  59 0565 51       	  push %ecx
  60 0566 52       	  push %edx
  61 0567 50       	  push %eax
  62 0568 E805FFFF 	  call draw_line
  62      FF
  63 056d 6683C414 	  add $0x14, %sp
  64 0571 42       	  inc %edx
  65              	
  66 0572 49       	  dec %ecx
  67 0573 56       	  push %esi
  68 0574 52       	  push %edx
  69 0575 51       	  push %ecx
GAS LISTING kernel.s 			page 19


  70 0576 53       	  push %ebx
  71 0577 51       	  push %ecx
  72 0578 E8F5FEFF 	  call draw_line
  72      FF
  73 057d 6683C414 	  add $0x14, %sp
  74              	
  75 0581 5E       	  pop %esi
  76 0582 5A       	  pop %edx
  77 0583 59       	  pop %ecx
  78 0584 5B       	  pop %ebx
  79 0585 58       	  pop %eax
  80              	
  81 0586 89EC     	  mov %ebp, %esp
  82 0588 5D       	  pop %ebp
  83              	
  84 0589 C3       	  ret
 104              	.include "../modules/protect/itoa.s"
   1              	# void itoa(num, buff, size, radix, flag)
   2              	# num:source addr
   3              	# buff:dist addr
   4              	# radix:set 2, 8, 10, or 16 
   5              	# flag:When set 
   6              	#                 1st bit: 0 padding on space
   7              	#                 2nd bit: add +/- sign
   8              	#                 3rd bit: treat as signed variable 
   9              	
  10              	
  11              	itoa:
  12 058a 55       	  push %ebp
  13 058b 89E5     	  mov %esp, %ebp
  14              	
  15              	# store register
  16 058d 50       	  push %eax
  17 058e 53       	  push %ebx
  18 058f 51       	  push %ecx
  19 0590 52       	  push %edx
  20 0591 56       	  push %esi
  21 0592 57       	  push %edi
  22              	
  23              	# get arguments
  24 0593 8B4508   	  mov 0x8(%ebp), %eax # num
  25 0596 8B750C   	  mov 0xc(%ebp), %esi # buff
  26 0599 8B4D10   	  mov 0x10(%ebp), %ecx # size
  27 059c 8B5D18   	  mov 0x18(%ebp), %ebx # flag
  28              	# The remaining arguments(radix: 0xa(%bp) ) will be assigend later.
  29 059f 89F7     	  mov %esi, %edi
  30 05a1 01CF     	  add %ecx, %edi
  31 05a3 4F       	  dec %edi
  32              	
  33              	
  34              	
  35              	# detect signed variable
  36 05a4 F7C30100 	  test $0b0001, %ebx
  36      0000
  37 05aa 7408     	  jz .Litoa1
  38 05ac 83F800   	  cmp $0, %eax
  39 05af 7D03     	  jge .Litoa2
GAS LISTING kernel.s 			page 20


  40 05b1 83CB02   	  or $0b0010, %ebx
  41              	.Litoa1: 
  42              	.Litoa2:
  43              	
  44              	# detect add +/- sign
  45 05b4 F7C30200 	  test $0b0010, %ebx
  45      0000
  46 05ba 7410     	  jz .Litoa3
  47 05bc 83F800   	  cmp $0, %eax
  48 05bf 7D07     	  jge .Litoa4
  49 05c1 F7D8     	  neg %eax
  50 05c3 C6062D   	  movb $0x2d, (%esi) # 0x2d == '-'
  51 05c6 EB03     	  jmp .Litoa5
  52              	.Litoa4:
  53 05c8 C6062B   	  movb $0x2b, (%esi) # 0x2b == '+'
  54              	.Litoa5:
  55 05cb 49       	  dec %ecx
  56              	.Litoa3:
  57              	
  58              	# convert to ascii
  59 05cc 8B5D14   	  mov 0x14(%ebp), %ebx
  60              	.LitoaLOOP1:
  61 05cf BA000000 	  mov $0, %edx
  61      00
  62 05d4 F7F3     	  div %ebx
  63 05d6 89D6     	  mov %edx, %esi
  64 05d8 8A960000 	  movb ascii_table(%esi), %dl
  64      0000
  65 05de 8817     	  mov %dl, (%edi)
  66 05e0 4F       	  dec %edi
  67 05e1 83F800   	  cmp $0, %eax
  68 05e4 E0E9     	  loopnz .LitoaLOOP1
  69              	.LotpaLOOPEND1:
  70              	
  71              	
  72              	# 0 padding in the space
  73 05e6 83F900   	  cmp $0, %ecx
  74 05e9 740E     	  je .Litoa6
  75 05eb B020     	  mov $0x20, %al
  76 05ed 66837D18 	  cmpw $0b0100, 0x18(%ebp)
  76      04
  77 05f2 7502     	  jne .Litoa7
  78 05f4 B030     	  mov $0x30, %al
  79              	.Litoa7:
  80 05f6 FD       	  std
  81 05f7 F3AA     	  rep stosb
  82              	.Litoa6:
  83              	
  84              	# return register
  85 05f9 5F       	  pop %edi
  86 05fa 5E       	  pop %esi
  87 05fb 5A       	  pop %edx
  88 05fc 59       	  pop %ecx
  89 05fd 5B       	  pop %ebx
  90 05fe 58       	  pop %eax
  91              	
  92              	# destroy stack frame
GAS LISTING kernel.s 			page 21


  93 05ff 89EC     	  mov %ebp, %esp
  94 0601 5D       	  pop %ebp
  95 0602 C3       	  ret
  96              	
  97              	
  98              	
  99 0603 30313233 	ascii_table: .string "0123456789ABCDEF"
  99      34353637 
  99      38394142 
  99      43444546 
  99      00
 105              	.include "../modules/protect/rtc.s"
   1              	/*
   2              	 *  rtc_get_time(dst)
   3              	 *  arguments:
   4              	 *    dst:  stored address
   5              	 *  return:
   6              	 *    0:  sucsess
   7              	 *    other:  false
   8              	 */
   9              	rtc_get_time:
  10 0614 55       	  push %ebp
  11 0615 89E5     	  mov %esp, %ebp
  12              	
  13 0617 53       	  push %ebx
  14              	
  15 0618 B00A     	  mov $0x0A, %al
  16 061a E670     	  out %al, $0x70
  17 061c E471     	  in $0x71, %al
  18 061e A880     	  test $0x80, %al
  19 0620 7407     	  je .Lrtc_10F
  20 0622 B8010000 	  mov $0x1, %eax
  20      00
  21 0627 EB27     	  jmp .Lrtc_10E
  22              	.Lrtc_10F:
  23              	
  24 0629 B004     	  mov $0x4, %al # hour data
  25 062b E670     	  out %al, $0x70
  26 062d E471     	  in $0x71, %al
  27              	  
  28 062f C1E008   	  shl $0x8, %eax # hour 00
  29              	
  30 0632 B002     	  mov $0x2, %al # minute
  31 0634 E670     	  out %al, $0x70
  32 0636 E471     	  in $0x71, %al 
  33              	  
  34 0638 C1E008   	  shl $0x8, %eax # hour minute 00
  35              	
  36 063b B000     	  mov $0x0, %al # second
  37 063d E670     	  out %al, $0x70
  38 063f E471     	  in $0x71, %al # hour minute second 00
  39              	
  40 0641 25FFFFFF 	  and $0x00FFFFFF, %eax # FF(hour) FF(minute) FF(second)
  40      00
  41              	
  42 0646 8B5D08   	  mov 0x8(%ebp), %ebx
  43 0649 8903     	  mov %eax, (%ebx)
GAS LISTING kernel.s 			page 22


  44              	
  45 064b B8000000 	  mov $0x0, %eax
  45      00
  46              	
  47              	.Lrtc_10E:
  48              	
  49 0650 5B       	  pop %ebx
  50              	
  51 0651 89EC     	  mov %ebp, %esp
  52 0653 5D       	  pop %ebp
  53              	
  54 0654 C3       	  ret
 106              	.include "../modules/protect/draw_time.s"
   1              	/*
   2              	 *  draw_time(col, row, color, time)
   3              	 *  arguments:
   4              	 *    col:
   5              	 *    row:
   6              	 *    color:
   7              	 *    time:
   8              	 *  return: void
   9              	 */
  10              	
  11              	
  12              	 draw_time:
  13              	
  14 0655 55       	  push %ebp
  15 0656 89E5     	  mov %esp, %ebp
  16              	
  17 0658 50       	  push %eax
  18 0659 53       	  push %ebx
  19              	
  20 065a 8B4514   	  mov 0x14(%ebp), %eax
  21 065d 3B050000 	  cmp (.last), %eax
  21      0000
  22 0663 7466     	  je .Ldraw_time_10E
  23              	
  24 0665 A3000000 	  mov %eax, (.last)
  24      00
  25              	  
  26              	
  27 066a BB000000 	  mov $0x0, %ebx
  27      00
  28 066f 88C3     	  mov %al, %bl
  29 0671 6A04     	  push $0b100
  30 0673 6A10     	  push $0x10
  31 0675 6A02     	  push $0x2
  32 0677 68000000 	  push $.sec
  32      00
  33 067c 53       	  push %ebx
  34 067d E808FFFF 	  call itoa
  34      FF
  35 0682 6683C414 	  add $0x14, %sp
  36              	  
  37 0686 88E3     	  mov %ah, %bl
  38 0688 6A04     	  push $0b100
  39 068a 6A10     	  push $0x10
GAS LISTING kernel.s 			page 23


  40 068c 6A02     	  push $0x2
  41 068e 68000000 	  push $.min
  41      00
  42 0693 53       	  push %ebx
  43 0694 E8F1FEFF 	  call itoa
  43      FF
  44 0699 6683C414 	  add $0x14, %sp
  45              	
  46 069d C1E810   	  shr $0x10, %eax
  47 06a0 6A04     	  push $0b100
  48 06a2 6A10     	  push $0x10
  49 06a4 6A02     	  push $0x2
  50 06a6 68000000 	  push $.hour
  50      00
  51 06ab 50       	  push %eax
  52 06ac E8D9FEFF 	  call itoa
  52      FF
  53 06b1 6683C414 	  add $0x14, %sp
  54              	
  55 06b5 68000000 	  push $.hour
  55      00
  56 06ba FF7510   	  pushl 0x10(%ebp)
  57 06bd FF750C   	  pushl 0xc(%ebp)
  58 06c0 FF7508   	  pushl 0x8(%ebp)
  59 06c3 E824FCFF 	  call draw_str
  59      FF
  60 06c8 83C410   	  add $0x10, %esp
  61              	
  62              	.Ldraw_time_10E:
  63              	
  64 06cb 5B       	  pop %ebx
  65 06cc 58       	  pop %eax
  66              	
  67 06cd 89EC     	  mov %ebp, %esp
  68 06cf 5D       	  pop %ebp
  69              	
  70 06d0 C3       	  ret
  71              	
  72 06d1 90       	.align 2
  73 06d2 00000000 	.temp:  .quad 0x0
  73      00000000 
  74 06da 00000000 	.last:  .quad 0x0
  74      00000000 
  75 06e2 5A5A3A   	.hour:  .ascii "ZZ:"
  76 06e5 5A5A3A   	.min:   .ascii "ZZ:"
  77 06e8 5A5A00   	.sec:   .string "ZZ"
 107              	#.include "./modules/interrupt.s"
 108              	.include "../modules/protect/pic.s"
   1              	init_pic:
   2 06eb 50       	  push %eax
   3              	  
   4              	# setting master pic
   5              	
   6 06ec B011E620 	  outp $0x20, $0x11 
   7 06f0 B020E621 	  outp $0x21, $0x20
   8 06f4 B004E621 	  outp $0x21, $0x04
   9 06f8 B005E621 	  outp $0x21, $0x05
GAS LISTING kernel.s 			page 24


  10 06fc B0FFE621 	  outp $0x21, $0xFF
  11              	
  12              	# setting slave
  13              	
  14 0700 B011E6A0 	  outp $0xA0, $0x11
  15 0704 B028E6A1 	  outp $0xA1, $0x28
  16 0708 B002E6A1 	  outp $0xA1, $0x02
  17 070c B001E6A1 	  outp $0xA1, $0x01
  18 0710 B0FFE6A1 	  outp $0xA1, $0xFF
  19              	
  20 0714 58       	  pop %eax
  21              	
  22 0715 C3       	  ret 
  23              	
 109              	.include "../modules/protect/int_rtc.s"
   1              	/*
   2              	 *  rtc_int(bit)
   3              	 */
   4              	
   5              	rtc_int_en:
   6 0716 55       	  push %ebp
   7 0717 89E5     	  mov %esp, %ebp
   8              	
   9 0719 50       	  push %eax
  10              	
  11 071a B00BE670 	  outp $0x70, $0x0B
  12              	
  13 071e E471     	  in $0x71, %al
  14 0720 0A4508   	  or 0x8(%ebp), %al
  15 0723 E671     	  out %al, $0x71
  16              	
  17 0725 58       	  pop %eax
  18              	
  19 0726 89EC     	  mov %ebp, %esp
  20 0728 5D       	  pop %ebp
  21 0729 C3       	  ret
  22              	
  23              	int_rtc:
  24 072a 60       	  pusha
  25 072b 1E       	  push %ds
  26 072c 06       	  push %es
  27              	
  28 072d 66B81000 	  mov $0x0010, %ax
  29 0731 8ED8     	  mov %ax, %ds
  30 0733 8EC0     	  mov %ax, %es
  31              	
  32 0735 68000000 	  push $RTC_TIME
  32      00
  33 073a E8D5FEFF 	  call rtc_get_time
  33      FF
  34 073f 6683C404 	  add $0x4, %sp
  35              	
  36 0743 B00CE670 	  outp $0x70, $0x0C
  37 0747 E471     	  in $0x71, %al
  38              	
  39              	  # EOI command
  40 0749 B020E6A0 	  outp $0xA0, $0x20
GAS LISTING kernel.s 			page 25


  41 074d B020E620 	  outp $0x20, $0x20
  42              	
  43 0751 07       	  pop %es
  44 0752 1F       	  pop %ds
  45 0753 61       	  popa
  46              	
  47 0754 CF       	  iret
 110              	.include "../modules/protect/interrupt.s"
   1 0755 0F1F00   	.align 0x4
   2 0758 FF07     	IDTR: .word 8 * 256 - 1
   3 075a 00001000 	.long VECT_BASE
   4              	
   5              	init_int:
   6 075e 50       	  push %eax
   7 075f 53       	  push %ebx
   8 0760 51       	  push %ecx
   9 0761 57       	  push %edi
  10              	
  11 0762 8D050000 	  lea (int_default), %eax
  11      0000
  12 0768 BB008E08 	  mov $0x00088E00, %ebx
  12      00
  13 076d 6693     	  xchg %bx, %ax
  14              	
  15 076f B9000100 	  mov $256, %ecx
  15      00
  16 0774 BF000010 	  mov $VECT_BASE, %edi
  16      00
  17              	
  18              	.10L:
  19              	  
  20 0779 891F     	  mov %ebx, (%edi)
  21 077b 894704   	  mov %eax, 0x4(%edi)
  22 077e 83C708   	  add $0x8, %edi
  23 0781 E2F6     	  loop .10L
  24              	
  25 0783 0F011D00 	  lidt (IDTR)
  25      000000
  26              	
  27 078a 5F       	  pop %edi
  28 078b 59       	  pop %ecx
  29 078c 5B       	  pop %ebx
  30 078d 58       	  pop %eax
  31              	
  32 078e C3       	  ret
  33              	
  34              	int_stop:
  35 078f FB       	  sti
  36              	
  37 0790 50       	  push %eax
  38 0791 680F0600 	  push $0x060F
  38      00
  39 0796 6A0F     	  push $0xF
  40 0798 6A19     	  push $0x19
  41 079a E84DFBFF 	  call draw_str
  41      FF
  42 079f 6683C410 	  add $0x10, %sp
GAS LISTING kernel.s 			page 26


  43              	
  44 07a3 8B0424   	  mov (%esp), %eax
  45 07a6 6A04     	  push $0b0100
  46 07a8 6A10     	  push $0x10
  47 07aa 6A08     	  push $0x8
  48 07ac 68000000 	  push $.p1
  48      00
  49 07b1 50       	  push %eax
  50 07b2 E8D3FDFF 	  call itoa
  50      FF
  51 07b7 6683C414 	  add $0x14, %sp
  52              	
  53 07bb 8B442404 	  mov 0x4(%esp), %eax
  54 07bf 6A04     	  push $0b0100
  55 07c1 6A10     	  push $0x10
  56 07c3 6A08     	  push $0x8
  57 07c5 68000000 	  push $.p2
  57      00
  58 07ca 50       	  push %eax
  59 07cb E8BAFDFF 	  call itoa
  59      FF
  60 07d0 6683C414 	  add $0x14, %sp
  61              	
  62              	
  63 07d4 8B442408 	  mov 0x8(%esp), %eax
  64 07d8 6A04     	  push $0b0100
  65 07da 6A10     	  push $0x10
  66 07dc 6A08     	  push $0x8
  67 07de 68000000 	  push $.p3
  67      00
  68 07e3 50       	  push %eax
  69 07e4 E8A1FDFF 	  call itoa
  69      FF
  70 07e9 6683C414 	  add $0x14, %sp
  71              	
  72 07ed 8B44240C 	  mov 0xc(%esp), %eax
  73 07f1 6A04     	  push $0b0100
  74 07f3 6A10     	  push $0x10
  75 07f5 6A08     	  push $0x8
  76 07f7 68000000 	  push $.p4
  76      00
  77 07fc 50       	  push %eax
  78 07fd E888FDFF 	  call itoa
  78      FF
  79 0802 6683C414 	  add $0x14, %sp
  80              	
  81 0806 68000000 	  push $.s1
  81      00
  82 080b 68040F00 	  push $0x0F04
  82      00
  83 0810 6A10     	  push $0x10
  84 0812 6A19     	  push $0x19
  85 0814 E8D3FAFF 	  call draw_str
  85      FF
  86 0819 6683C410 	  add $0x10, %sp
  87              	  
  88 081d 68000000 	  push $.s2
GAS LISTING kernel.s 			page 27


  88      00
  89 0822 68040F00 	  push $0x0F04
  89      00
  90 0827 6A11     	  push $0x11
  91 0829 6A19     	  push $0x19
  92 082b E8BCFAFF 	  call draw_str
  92      FF
  93 0830 6683C410 	  add $0x10, %sp
  94              	
  95 0834 68000000 	  push $.s3
  95      00
  96 0839 68040F00 	  push $0x0F04
  96      00
  97 083e 6A12     	  push $0x12
  98 0840 6A19     	  push $0x19
  99 0842 E8A5FAFF 	  call draw_str
  99      FF
 100 0847 6683C410 	  add $0x10, %sp
 101              	
 102 084b 68000000 	  push $.s4
 102      00
 103 0850 68040F00 	  push $0x0F04
 103      00
 104 0855 6A13     	  push $0x13
 105 0857 6A19     	  push $0x19
 106 0859 E88EFAFF 	  call draw_str
 106      FF
 107 085e 6683C410 	  add $0x10, %sp
 108              	
 109 0862 EBFE     	  jmp .
 110              	
 111 0864 4553502B 	.s1: .ascii "ESP+ 0:"
 111      20303A
 112 086b 5F5F5F5F 	.p1: .string "________ "
 112      5F5F5F5F 
 112      2000
 113 0875 2020202B 	.s2: .ascii "   + 4:"
 113      20343A
 114 087c 5F5F5F5F 	.p2: .string "________ "
 114      5F5F5F5F 
 114      2000
 115 0886 2020202B 	.s3: .ascii "   + 8:"
 115      20383A
 116 088d 5F5F5F5F 	.p3: .string "________ "
 116      5F5F5F5F 
 116      2000
 117 0897 2020202B 	.s4: .ascii "   +12:"
 117      31323A
 118 089e 5F5F5F5F 	.p4: .string "________ "
 118      5F5F5F5F 
 118      2000
 119              	
 120              	int_default:
 121 08a8 9C       	  pushf
 122 08a9 0E       	  push %cs
 123 08aa 68000000 	  push $int_stop
 123      00
GAS LISTING kernel.s 			page 28


 124 08af B8000000 	  mov $.int_default_s0, %eax
 124      00
 125 08b4 CF       	  iret
 126              	
 127 08b5 203C2020 	.int_default_s0: .string " <    STOP    > "
 127      20205354 
 127      4F502020 
 127      20203E20 
 127      00
 128              	
 129              	int_zero_div:
 130 08c6 9C       	  pushf
 131 08c7 0E       	  push %cs
 132 08c8 68000000 	  push $int_stop
 132      00
 133              	
 134 08cd B8000000 	  mov $.int_zero_div, %eax
 134      00
 135 08d2 CF       	  iret
 136              	
 137 08d3 203C2020 	.int_zero_div: .string " <   ZERO DIV  > "
 137      205A4552 
 137      4F204449 
 137      5620203E 
 137      2000
 111              	.include "../modules/protect/int_keyboard.s"
   1              	int_keyboard:
   2 08e5 60       	  pusha
   3 08e6 1E       	  push %ds
   4 08e7 06       	  push %es
   5              	
   6 08e8 66B81000 	  mov $0x0010, %ax
   7 08ec 8ED8     	  mov %ax, %ds
   8 08ee 8EC0     	  mov %ax, %es
   9              	
  10 08f0 E460     	  in $0x60, %al
  11              	
  12 08f2 50       	  push %eax
  13 08f3 68000000 	  push $_KEY_BUFF
  13      00
  14 08f8 E8650000 	  call ring_wr
  14      00
  15 08fd 6683C408 	  add $0x8, %sp
  16              	
  17 0901 B020E620 	  outp $0x20, $0x20
  18              	
  19 0905 07       	  pop %es
  20 0906 1F       	  pop %ds
  21 0907 61       	  popa
  22              	
  23 0908 CF       	  iret
  24              	
  25 0909 0F1F00   	.align 4
  26 090c 00000000 	_KEY_BUFF: .fill ring_buff.size, 0x1, 0x0
  26      00000000 
  26      00000000 
  26      00000000 
GAS LISTING kernel.s 			page 29


  26      00000000 
 112              	.include "../modules/protect/ring_buff.s"
   1              	ring_rd:
   2 0924 55       	  push %ebp
   3 0925 89E5     	  mov %esp, %ebp
   4              	
   5 0927 53       	  push %ebx
   6 0928 56       	  push %esi
   7 0929 57       	  push %edi
   8              	
   9 092a 8B7508   	  mov 0x8(%ebp), %esi
  10 092d 8B7D0C   	  mov 0xc(%ebp), %edi
  11              	
  12 0930 B8000000 	  mov $0x0, %eax
  12      00
  13 0935 8B9E0000 	  mov ring_buff.rp(%esi), %ebx
  13      0000
  14 093b 3B9E0400 	  cmp ring_buff.wp(%esi), %ebx
  14      0000
  15 0941 7418     	  je .10E
  16              	
  17 0943 8A843308 	  mov ring_buff.item(%ebx, %esi), %al
  17      000000
  18 094a 8807     	  mov %al, (%edi)
  19              	
  20 094c 43       	  inc %ebx
  21 094d 83E30F   	  and $RING_INDEX_MASK, %ebx
  22 0950 899E0000 	  mov %ebx, ring_buff.rp(%esi)
  22      0000
  23 0956 B8010000 	  mov $0x1, %eax
  23      00
  24              	.10E:
  25              	
  26 095b 5F       	  pop %edi
  27 095c 5E       	  pop %esi
  28 095d 5B       	  pop %ebx
  29              	
  30 095e 89EC     	  mov %ebp, %esp
  31 0960 5D       	  pop %ebp
  32              	
  33 0961 C3       	  ret
  34              	
  35              	ring_wr:
  36 0962 55       	  push %ebp
  37 0963 89E5     	  mov %esp, %ebp
  38              	
  39 0965 53       	  push %ebx
  40 0966 51       	  push %ecx
  41 0967 56       	  push %esi
  42              	
  43 0968 8B7508   	  mov 0x8(%ebp), %esi
  44 096b B8000000 	  mov $0x0, %eax
  44      00
  45 0970 8B9E0400 	  mov ring_buff.wp(%esi), %ebx
  45      0000
  46 0976 89D9     	  mov %ebx, %ecx
  47 0978 41       	  inc %ecx
GAS LISTING kernel.s 			page 30


  48 0979 83E10F   	  and $RING_INDEX_MASK, %ecx
  49              	
  50 097c 3B8E0000 	  cmp ring_buff.rp(%esi), %ecx
  50      0000
  51 0982 7415     	  je .ringwr_10E
  52 0984 8A450C   	  mov 0xc(%ebp), %al
  53              	
  54 0987 88841E08 	  mov %al, ring_buff.item(%esi, %ebx)
  54      000000
  55 098e 898E0400 	  mov %ecx, ring_buff.wp(%esi)
  55      0000
  56 0994 B8010000 	  mov $0x1, %eax
  56      00
  57              	.ringwr_10E:
  58              	
  59 0999 5E       	  pop %esi
  60 099a 59       	  pop %ecx
  61 099b 5B       	  pop %ebx
  62              	
  63 099c 89EC     	  mov %ebp, %esp
  64 099e 5D       	  pop %ebp
  65              	
  66 099f C3       	  ret
  67              	
  68              	draw_key:
  69 09a0 55       	  push %ebp
  70 09a1 89E5     	  mov %esp, %ebp
  71              	
  72 09a3 60       	  pusha
  73              	
  74 09a4 8B5508   	  mov 0x8(%ebp), %edx
  75 09a7 8B7D0C   	  mov 0xc(%ebp), %edi
  76 09aa 8B7510   	  mov 0x10(%ebp), %esi
  77              	
  78 09ad 8B9E0000 	  mov ring_buff.rp(%esi), %ebx
  78      0000
  79 09b3 8DB60800 	  lea ring_buff.item(%esi), %esi
  79      0000
  80 09b9 B9100000 	  mov $RING_ITEM_SIZE, %ecx
  80      00
  81              	
  82              	.draw_key10L:
  83              	  
  84 09be 4B       	  dec %ebx
  85 09bf 83E30F   	  and $RING_INDEX_MASK, %ebx
  86 09c2 8A041E   	  mov (%esi, %ebx), %al
  87              	
  88              	
  89              	
  90 09c5 6A04     	  push $0b0100
  91 09c7 6A10     	  push $0x10
  92 09c9 6A02     	  push $0x2
  93 09cb 68000000 	  push $.tmp
  93      00
  94 09d0 50       	  push %eax
  95 09d1 E8B4FBFF 	  call itoa
  95      FF
GAS LISTING kernel.s 			page 31


  96 09d6 6683C414 	  add $0x14, %sp
  97              	
  98 09da 68000000 	  push $.tmp
  98      00
  99 09df 6A02     	  push $0x02
 100 09e1 57       	  push %edi
 101 09e2 52       	  push %edx
 102 09e3 E804F9FF 	  call draw_str
 102      FF
 103 09e8 6683C410 	  add $0x10, %sp
 104              	
 105 09ec 83C203   	  add $0x3, %edx
 106 09ef E2CD     	  loop .draw_key10L
 107              	
 108              	.draw_key_10E:
 109              	
 110 09f1 61       	  popa
 111              	
 112 09f2 89EC     	  mov %ebp, %esp
 113 09f4 5D       	  pop %ebp
 114              	
 115 09f5 C3       	  ret
 116              	
 117 09f6 5F5F2000 	.tmp: .string "__ "
 118              	
 119              	.section .data
 120              	
 121              	ring_buff: .struct 0
 122              	ring_buff.rp: .struct ring_buff.rp + 4
 123              	ring_buff.wp: .struct ring_buff.wp + 4
 124              	ring_buff.item: .struct ring_buff.item + RING_ITEM_SIZE
 125              	ring_buff.end:
 126              	
 127              	#.set ring_buff.size, 0x4
 128              	.set ring_buff.size, ring_buff.end - ring_buff.rp
 129              	
 130              	.section .text
 113              	.include "./modules/int_timer.s"
   1              	int_timer:
   2 09fa 60       	  pusha
   3 09fb 1E       	  push %ds
   4 09fc 06       	  push %es
   5              	  
   6 09fd 66B81000 	  mov $0x0010, %ax
   7 0a01 8ED8     	  mov %ax, %ds
   8 0a03 8EC0     	  mov %ax, %es
   9              	
  10 0a05 FF050000 	  incl (TIMER_COUNT)
  10      0000
  11              	
  12 0a0b B020E620 	  outp $0x20, $0x20
  13              	
  14 0a0f 07       	  pop %es
  15 0a10 1F       	  pop %ds
  16 0a11 61       	  popa
  17              	
  18 0a12 CF       	  iret
GAS LISTING kernel.s 			page 32


  19              	
  20 0a13 90       	.align 0x4
  21 0a14 00000000 	TIMER_COUNT: .long 0x0
 114              	.include "../modules/protect/timer.s"
   1              	
   2              	int_en_timer0:
   3              	
   4              	  # 8254 Timer
   5              	  # 0x2E9C(11932) = 10[ms] @ CLK = 1,193,182[Hz]
   6              	  # set Timer interrupt every 10[ms](0x2E9C count)
   7 0a18 50       	  push %eax
   8 0a19 B034E643 	  outp $0x43, $0b00110100 # take turns low byte / high byte, mode 2, binary
   9 0a1d B09CE640 	  outp $0x40, $0x9C # low byte
  10 0a21 B02EE640 	  outp $0x40, $0x2E # high byte
  11              	
  12 0a25 58       	  pop %eax
  13 0a26 C3       	  ret
 115              	.include "../modules/protect/draw_rotation_bar.s"
   1              	draw_rotation_bar:
   2 0a27 50       	  push %eax
   3              	
   4 0a28 A1000000 	  mov (TIMER_COUNT), %eax
   4      00
   5 0a2d C1E804   	  shr $0x4, %eax
   6 0a30 3B050000 	  cmp (.index), %eax
   6      0000
   7 0a36 741E     	  je 10f
   8              	
   9 0a38 A3000000 	  mov %eax, (.index)
   9      00
  10 0a3d 83E003   	  and $0x03, %eax
  11 0a40 8A800000 	  mov .table(%eax), %al
  11      0000
  12              	
  13 0a46 50       	  push %eax
  14 0a47 6A0F     	  push $0x000F
  15 0a49 6A1D     	  push $0x1d
  16 0a4b 6A00     	  push $0x0
  17 0a4d E891F7FF 	  call draw_char
  17      FF
  18 0a52 6683C410 	  add $0x10, %sp
  19              	
  20              	10:
  21              	  
  22 0a56 58       	  pop %eax
  23 0a57 C3       	  ret
  24              	
  25              	.align 0x4
  26 0a58 00000000 	.index: .long 0x0
  27 0a5c 7C2F2DC2 	.table: .ascii "|/-¥"
  27      A5
 116              	
 117 0a61 00000000 	.fill KERNEL_SIZE - (. - kernel), 0x1, 0x0
 117      00000000 
 117      00000000 
 117      00000000 
 117      00000000 
GAS LISTING kernel.s 			page 33


GAS LISTING kernel.s 			page 34


DEFINED SYMBOLS
          ./define.s:1      *ABS*:0000000000007c00 BOOT_LOAD
          ./define.s:2      *ABS*:0000000000002000 BOOT_SIZE
          ./define.s:3      *ABS*:0000000000000200 SECT_SIZE
          ./define.s:4      *ABS*:0000000000000010 BOOT_SECT
          ./define.s:5      *ABS*:0000000000009c00 BOOT_END
          ./define.s:6      *ABS*:0000000000000010 KERNEL_SECT
          ./define.s:7      *ABS*:0000000000002000 KERNEL_SIZE
          ./define.s:8      *ABS*:00000000000a0000 VRAM
          ./define.s:9      *ABS*:0000000000101000 KERNEL_LOAD
          ./define.s:10     *ABS*:0000000000100000 VECT_BASE
          ./define.s:12     *ABS*:0000000000000010 RING_ITEM_SIZE
          ./define.s:13     *ABS*:000000000000000f RING_INDEX_MASK
            kernel.s:8      .text:0000000000000000 kernel
            kernel.s:92     .text:0000000000000124 FONT_ADR
../modules/protect/interrupt.s:5      .text:000000000000075e init_int
../modules/protect/pic.s:1      .text:00000000000006eb init_pic
../modules/protect/interrupt.s:129    .text:00000000000008c6 int_zero_div
./modules/int_timer.s:1      .text:00000000000009fa int_timer
../modules/protect/int_keyboard.s:1      .text:00000000000008e5 int_keyboard
../modules/protect/int_rtc.s:23     .text:000000000000072a int_rtc
../modules/protect/int_rtc.s:5      .text:0000000000000716 rtc_int_en
../modules/protect/timer.s:2      .text:0000000000000a18 int_en_timer0
../modules/protect/draw_font.s:9      .text:00000000000002a7 draw_font
../modules/protect/draw_color_bar.s:9      .text:0000000000000335 draw_color_bar
../modules/protect/draw_str.s:10     .text:00000000000002ec draw_str
            kernel.s:93     .text:0000000000000128 RTC_TIME
../modules/protect/draw_time.s:12     .text:0000000000000655 draw_time
../modules/protect/draw_rotation_bar.s:1      .text:0000000000000a27 draw_rotation_bar
            kernel.s:94     .text:000000000000012c .int_key
../modules/protect/int_keyboard.s:26     .text:000000000000090c _KEY_BUFF
../modules/protect/ring_buff.s:1      .text:0000000000000924 ring_rd
../modules/protect/ring_buff.s:68     .text:00000000000009a0 draw_key
../modules/protect/vga.s:7      .text:0000000000000130 vga_set_read_plane
../modules/protect/vga.s:36     .text:0000000000000149 vga_set_write_plane
../modules/protect/vga.s:66     .text:0000000000000162 vram_font_copy
../modules/protect/vga.s:151    .text:00000000000001b5 vram_bit_copy
../modules/protect/draw_char.s:13     .text:00000000000001e3 draw_char
../modules/protect/draw_pixel.s:10     .text:00000000000003af draw_pixel
../modules/protect/draw_line.s:11     .text:0000000000000472 draw_line
../modules/protect/draw_rect.s:12     .text:0000000000000524 draw_rect
../modules/protect/itoa.s:11     .text:000000000000058a itoa
../modules/protect/itoa.s:99     .text:0000000000000603 ascii_table
../modules/protect/rtc.s:9      .text:0000000000000614 rtc_get_time
../modules/protect/draw_time.s:74     .text:00000000000006da .last
../modules/protect/draw_time.s:77     .text:00000000000006e8 .sec
../modules/protect/draw_time.s:76     .text:00000000000006e5 .min
../modules/protect/draw_time.s:75     .text:00000000000006e2 .hour
../modules/protect/draw_time.s:73     .text:00000000000006d2 .temp
../modules/protect/interrupt.s:2      .text:0000000000000758 IDTR
../modules/protect/interrupt.s:120    .text:00000000000008a8 int_default
../modules/protect/interrupt.s:18     .text:0000000000000779 .10L
../modules/protect/interrupt.s:34     .text:000000000000078f int_stop
../modules/protect/interrupt.s:112    .text:000000000000086b .p1
../modules/protect/interrupt.s:114    .text:000000000000087c .p2
../modules/protect/interrupt.s:116    .text:000000000000088d .p3
../modules/protect/interrupt.s:118    .text:000000000000089e .p4
GAS LISTING kernel.s 			page 35


../modules/protect/interrupt.s:111    .text:0000000000000864 .s1
../modules/protect/interrupt.s:113    .text:0000000000000875 .s2
../modules/protect/interrupt.s:115    .text:0000000000000886 .s3
../modules/protect/interrupt.s:117    .text:0000000000000897 .s4
../modules/protect/interrupt.s:127    .text:00000000000008b5 .int_default_s0
../modules/protect/interrupt.s:137    .text:00000000000008d3 .int_zero_div
../modules/protect/ring_buff.s:35     .text:0000000000000962 ring_wr
                            *ABS*:0000000000000018 ring_buff.size
                            *ABS*:0000000000000000 ring_buff.rp
                            *ABS*:0000000000000004 ring_buff.wp
../modules/protect/ring_buff.s:24     .text:000000000000095b .10E
                            *ABS*:0000000000000008 ring_buff.item
../modules/protect/ring_buff.s:57     .text:0000000000000999 .ringwr_10E
../modules/protect/ring_buff.s:82     .text:00000000000009be .draw_key10L
../modules/protect/ring_buff.s:117    .text:00000000000009f6 .tmp
../modules/protect/ring_buff.s:108    .text:00000000000009f1 .draw_key_10E
../modules/protect/ring_buff.s:121    .data:0000000000000000 ring_buff
                            *ABS*:0000000000000018 ring_buff.end
./modules/int_timer.s:21     .text:0000000000000a14 TIMER_COUNT
../modules/protect/draw_rotation_bar.s:26     .text:0000000000000a58 .index
../modules/protect/draw_rotation_bar.s:27     .text:0000000000000a5c .table

NO UNDEFINED SYMBOLS
