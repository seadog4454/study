GAS LISTING kernel.s 			page 1


   1              	.include "./define.s"
   1              	.set BOOT_LOAD, 0x7C00
   2              	.set BOOT_SIZE, 0x2000 #(1024 * 8)
   3              	.set SECT_SIZE, 512
   4              	.set BOOT_SECT, 0x10 #(.Lboot_BOOT_SIZE / .Lboot_SECT_SIZE)
   5              	.set BOOT_END, 0x9C00
   6              	.set KERNEL_SECT, 0x10 #(.Lboot_KERNEL_SIZE / .Lboot_SECT_SIZE)
   7              	.set KERNEL_SIZE, 8192
   8              	.set VRAM, 0x000A0000
   9              	.set KERNEL_LOAD, 0x00101000
  10              	.set VECT_BASE, 0x00100000
  11              	
  12              	.set RING_ITEM_SIZE, (1 << 4)
  13              	.set RING_INDEX_MASK, (RING_ITEM_SIZE - 1)
   2              	.include "./macro.s"
   1              	.macro set_vect interruptNum, funcAddr
   2              	  push %eax
   3              	  push %edi
   4              	  mov $VECT_BASE + (\interruptNum * 8), %edi
   5              	  mov \funcAddr, %eax
   6              	
   7              	  mov %ax, (%edi)
   8              	  shr $0x10, %eax
   9              	  mov %ax, 0x6(%edi)
  10              	
  11              	  pop %edi
  12              	  pop %eax
  13              	.endm
  14              	
  15              	.macro outp port, val
  16              	  mov \val, %al
  17              	  out %al, \port
  18              	.endm
   3              	
   4              	.code32
   5              	.global kernel
   6              	
   7              	
   8              	kernel:
   9              	  
  10              	  
  11 0000 BE007E00 	  mov $(BOOT_LOAD + SECT_SIZE), %esi
  11      00
  12 0005 0FB706   	  movzxw (%esi), %eax
  13 0008 0FB75E02 	  movzxw 0x2(%esi), %ebx # segment
  14 000c C1E004   	  shl $0x4, %eax # offset
  15 000f 01D8     	  add %ebx, %eax
  16 0011 A3000000 	  mov %eax, (FONT_ADR)
  16      00
  17              	  
  18 0016 E81F0700 	  call init_int
  18      00
  19 001b E8A70600 	  call init_pic
  19      00
  20              	
  21 0020 5057BF00 	  set_vect 0x00, $int_zero_div
  21      001000B8 
GAS LISTING kernel.s 			page 2


  21      00000000 
  21      668907C1 
  21      E8106689 
  22 0038 5057BF08 	  set_vect 0x21, $int_keyboard
  22      011000B8 
  22      00000000 
  22      668907C1 
  22      E8106689 
  23 0050 5057BF40 	  set_vect 0x28, $int_rtc
  23      011000B8 
  23      00000000 
  23      668907C1 
  23      E8106689 
  24              	
  25 0068 6A10     	  push $0x10
  26 006a E8830600 	  call rtc_int_en
  26      00
  27 006f 83C404   	  add $0x4, %esp
  28              	
  29              	  #outp $0x21, $0b11111011
  30 0072 B0F9E621 	  outp $0x21, $0b11111001
  31 0076 B0FEE6A1 	  outp $0xA1, $0b11111110
  32              	
  33 007a FB       	  sti
  34              	
  35              	  
  36 007b 6A0D     	  push $13
  37 007d 6A3F     	  push $63
  38 007f E8FF0100 	  call draw_font
  38      00
  39 0084 6683C408 	  add $0x8, %sp 
  40              	
  41              	
  42              	
  43 0088 6A04     	  push $0x4
  44 008a 6A3F     	  push $63
  45 008c E8800200 	  call draw_color_bar
  45      00
  46 0091 6683C408 	  add $0x8, %sp
  47              	
  48              	
  49 0095 68000000 	  push $.Lkernel_s0
  49      00
  50 009a 680F0100 	  push $0x010F
  50      00
  51 009f 6A0E     	  push $14
  52 00a1 6A19     	  push $0x19
  53 00a3 E8200200 	  call draw_str
  53      00
  54 00a8 6683C410 	  add $0x10, %sp
  55              	
  56              	.Lkernel_10L:
  57              	
  58              	
  59 00ac A1000000 	  mov (RTC_TIME), %eax
  59      00
  60              	
GAS LISTING kernel.s 			page 3


  61 00b1 50       	  push %eax
  62 00b2 68000700 	  push $0x0700
  62      00
  63 00b7 6A00     	  push $0x0
  64 00b9 6A48     	  push $72
  65 00bb E8710500 	  call draw_time
  65      00
  66 00c0 6683C410 	  add $0x10, %sp
  67              	
  68 00c4 68000000 	  push $.int_key
  68      00
  69 00c9 68000000 	  push $_KEY_BUFF
  69      00
  70 00ce E82D0800 	  call ring_rd
  70      00
  71 00d3 6683C408 	  add $0x8, %sp
  72 00d7 83F800   	  cmp $0x0, %eax
  73 00da 7412     	  je .Lkernel_10E
  74              	
  75 00dc 68000000 	  push $_KEY_BUFF
  75      00
  76 00e1 6A1D     	  push $29
  77 00e3 6A02     	  push $2
  78 00e5 E8920800 	  call draw_key
  78      00
  79 00ea 6683C40C 	  add $0xc, %sp
  80              	
  81              	.Lkernel_10E:
  82 00ee EBBC     	  jmp .Lkernel_10L 
  83              	
  84 00f0 48656C6C 	.Lkernel_s0: .string "Hello, kernel!"
  84      6F2C206B 
  84      65726E65 
  84      6C2100
  85              	
  86 00ff 90       	.align 4
  87 0100 00000000 	FONT_ADR: .long 0x0
  88 0104 00000000 	RTC_TIME: .long 0x0
  89 0108 00000000 	.int_key: .long 0x0
  90              	
  91              	.include "../modules/protect/vga.s"
   1              	/*
   2              	 *  vga_set_read_plane(plane)
   3              	 *  arguments:
   4              	 *    plane:  reading plane
   5              	 *  return: void
   6              	 */
   7              	vga_set_read_plane:
   8 010c 55       	  push %ebp
   9 010d 89E5     	  mov %esp, %ebp
  10              	
  11 010f 50       	  push %eax
  12 0110 52       	  push %edx
  13              	
  14 0111 8A6508   	  mov 0x8(%ebp), %ah
  15 0114 80E403   	  and $0x03, %ah
  16 0117 B004     	  mov $0x04, %al
GAS LISTING kernel.s 			page 4


  17 0119 66BACE03 	  mov $0x03CE, %dx
  18 011d 66EF     	  out %ax, %dx
  19              	
  20 011f 5A       	  pop %edx
  21 0120 58       	  pop %eax
  22              	
  23 0121 89EC     	  mov %ebp, %esp
  24 0123 5D       	  pop %ebp
  25              	
  26 0124 C3       	  ret
  27              	
  28              	
  29              	/*
  30              	 * vga_set_write_plane(plane)
  31              	 * arguments:
  32              	 *  plane:  writing plane
  33              	 * return: void
  34              	 */
  35              	
  36              	vga_set_write_plane:
  37 0125 55       	  push %ebp
  38 0126 89E5     	  mov %esp, %ebp
  39              	
  40 0128 50       	  push %eax
  41 0129 52       	  push %edx
  42              	
  43 012a 8A6508   	  mov 0x8(%ebp), %ah
  44 012d 80E40F   	  and $0xF, %ah
  45 0130 B002     	  mov $0x2, %al
  46 0132 66BAC403 	  mov $0x03C4, %dx
  47 0136 66EF     	  out %ax, %dx
  48              	  
  49 0138 5A       	  pop %edx
  50 0139 58       	  pop %eax
  51              	
  52 013a 89EC     	  mov %ebp, %esp
  53 013c 5D       	  pop %ebp
  54 013d C3       	  ret
  55              	
  56              	/*
  57              	 * vram_font_copy(font, vram, plane, color)
  58              	 * arguments:
  59              	 *  font: font addr
  60              	 *  vram: vram addr
  61              	 *  plane:  output plane
  62              	 *  color:  drawing color
  63              	 * reutnr: void
  64              	 */
  65              	
  66              	vram_font_copy:
  67 013e 55       	  push %ebp
  68 013f 89E5     	  mov %esp, %ebp
  69              	
  70 0141 50       	  push %eax
  71 0142 53       	  push %ebx
  72 0143 51       	  push %ecx
  73 0144 52       	  push %edx
GAS LISTING kernel.s 			page 5


  74 0145 56       	  push %esi
  75 0146 57       	  push %edi
  76              	
  77 0147 8B7508   	  mov 0x8(%ebp), %esi # font
  78 014a 8B7D0C   	  mov 0xc(%ebp), %edi # vram
  79 014d 0FB64510 	  movzxb 0x10(%ebp), %eax # plane
  80 0151 0FB75D14 	  movzxw 0x14(%ebp), %ebx # color
  81              	
  82 0155 84C7     	  test %al, %bh
  83 0157 0F94C6   	  setz %dh
  84 015a FECE     	  dec %dh
  85              	
  86 015c 84C3     	  test %al, %bl
  87 015e 0F94C2   	  setz %dl
  88 0161 FECA     	  dec %dl
  89              	
  90              	  # copy 16 dot's font
  91 0163 FC       	  cld
  92              	
  93 0164 B9100000 	  mov $0x10, %ecx
  93      00
  94              	.Lvram_font_copy_10L:
  95              	  
  96              	  # create font mask
  97 0169 AC       	  lodsb
  98 016a 88C4     	  mov %al, %ah
  99 016c F6D4     	  not %ah
 100              	  
 101              	  # front color(font color)
 102 016e 20D0     	  and %dl, %al
 103              	
 104              	  # background color
 105 0170 F7C31000 	  test $0x0010, %ebx
 105      0000
 106 0176 7404     	  jz .Lvram_font_copy_11F
 107 0178 2227     	  and (%edi), %ah
 108 017a EB02     	  jmp .Lvram_font_copy_11E
 109              	
 110              	.Lvram_font_copy_11F:
 111 017c 20F4     	  and %dh, %ah
 112              	
 113              	.Lvram_font_copy_11E:
 114              	
 115              	  # merge front and background color
 116 017e 08E0     	  or %ah, %al
 117              	
 118 0180 8807     	  mov %al, (%edi)
 119              	  
 120 0182 83C750   	  add $80, %edi
 121 0185 E2E2     	  loop .Lvram_font_copy_10L
 122              	
 123              	.Lvram_font_copy_10E:
 124              	
 125 0187 5F       	  pop %edi
 126 0188 5E       	  pop %esi
 127 0189 5A       	  pop %edx
 128 018a 59       	  pop %ecx
GAS LISTING kernel.s 			page 6


 129 018b 5B       	  pop %ebx
 130 018c 58       	  pop %eax
 131              	
 132 018d 89EC     	  mov %ebp, %esp
 133 018f 5D       	  pop %ebp
 134              	
 135 0190 C3       	  ret
 136              	
 137              	
 138              	
 139              	
 140              	
 141              	/*
 142              	 *  vram_bit_copy(bit, vram, plane, color)
 143              	 *  arguments:
 144              	 *    bit:  bit pattern
 145              	 *    vram: vram addr
 146              	 *    plane:
 147              	 *    color:
 148              	 *
 149              	 */
 150              	
 151              	vram_bit_copy:
 152 0191 55       	  push %ebp
 153 0192 89E5     	  mov %esp, %ebp
 154              	
 155 0194 50       	  push %eax
 156 0195 53       	  push %ebx
 157 0196 57       	  push %edi
 158              	
 159 0197 8B7D0C   	  mov 0xc(%ebp), %edi # vram addr
 160 019a 0FB64510 	  movzxb 0x10(%ebp), %eax # plane
 161 019e 0FB75D14 	  movzxw 0x14(%ebp), %ebx # color
 162              	
 163 01a2 84C3     	  test %al, %bl
 164 01a4 0F94C3   	  setz %bl
 165 01a7 FECB     	  dec %bl
 166              	
 167 01a9 8A4508   	  mov 0x8(%ebp), %al
 168 01ac 88C4     	  mov %al, %ah
 169 01ae F6D4     	  not %ah
 170              	
 171 01b0 2227     	  and (%edi), %ah
 172 01b2 20D8     	  and %bl, %al
 173 01b4 08E0     	  or %ah, %al
 174              	  
 175 01b6 8807     	  mov %al, (%edi)
 176              	
 177 01b8 5F       	  pop %edi
 178 01b9 5B       	  pop %ebx
 179 01ba 58       	  pop %eax
 180              	
 181 01bb 89EC     	  mov %ebp, %esp
 182 01bd 5D       	  pop %ebp
 183              	  
 184 01be C3       	  ret
  92              	.include "../modules/protect/draw_char.s"
GAS LISTING kernel.s 			page 7


   1              	/*
   2              	 *  draw_char(col, row, color, ch)
   3              	 *  arguments:
   4              	 *    col: 0 ~ 79
   5              	 *    row: 0 ~ 29
   6              	 *    color: drawing color
   7              	 *    ch : char
   8              	 *  return : null
   9              	 */
  10              	
  11              	.include "./define.s"
  12              	
  13              	draw_char:
  14 01bf 55       	  push %ebp
  15 01c0 89E5     	  mov %esp, %ebp
  16              	
  17 01c2 50       	  push %eax
  18 01c3 53       	  push %ebx
  19 01c4 51       	  push %ecx
  20 01c5 52       	  push %edx
  21 01c6 56       	  push %esi
  22 01c7 57       	  push %edi
  23              	
  24              	  # get font addr
  25 01c8 0FB67514 	  movzxb 0x14(%ebp), %esi # font addr
  26 01cc C1E604   	  shl $0x4, %esi
  27 01cf 03350000 	  add (FONT_ADR), %esi
  27      0000
  28              	
  29 01d5 8B7D0C   	  mov 0xc(%ebp), %edi # row
  30 01d8 C1E708   	  shl $0x8, %edi
  31 01db 8DBCBF00 	  lea VRAM(%edi, %edi, 0x4), %edi
  31      000A00
  32 01e2 037D08   	  add 0x8(%ebp), %edi # col
  33              	  
  34              	  # put char
  35 01e5 0FB75D10 	  movzxw 0x10(%ebp), %ebx # color
  36              	 
  37 01e9 6A03     	  push $0x03
  38 01eb E81CFFFF 	  call vga_set_read_plane
  38      FF
  39 01f0 6683C404 	  add $0x4, %sp
  40              	  
  41 01f4 6A08     	  push $0x08
  42 01f6 E82AFFFF 	  call vga_set_write_plane
  42      FF
  43 01fb 6683C404 	  add $0x4, %sp
  44              	
  45 01ff 53       	  push %ebx
  46 0200 6A08     	  push $0x08
  47 0202 57       	  push %edi
  48 0203 56       	  push %esi
  49 0204 E835FFFF 	  call vram_font_copy
  49      FF
  50 0209 6683C410 	  add $0x10, %sp
  51              	
  52              	  
GAS LISTING kernel.s 			page 8


  53 020d 6A02     	  push $0x02
  54 020f E8F8FEFF 	  call vga_set_read_plane
  54      FF
  55 0214 6683C404 	  add $0x4, %sp
  56              	  
  57 0218 6A04     	  push $0x04
  58 021a E806FFFF 	  call vga_set_write_plane
  58      FF
  59 021f 6683C404 	  add $0x4, %sp
  60              	
  61 0223 53       	  push %ebx
  62 0224 6A04     	  push $0x04
  63 0226 57       	  push %edi
  64 0227 56       	  push %esi
  65 0228 E811FFFF 	  call vram_font_copy
  65      FF
  66 022d 6683C410 	  add $0x10, %sp
  67              	
  68              	
  69 0231 6A01     	  push $0x01
  70 0233 E8D4FEFF 	  call vga_set_read_plane
  70      FF
  71 0238 6683C404 	  add $0x4, %sp
  72              	  
  73 023c 6A02     	  push $0x02
  74 023e E8E2FEFF 	  call vga_set_write_plane
  74      FF
  75 0243 6683C404 	  add $0x4, %sp
  76              	
  77 0247 53       	  push %ebx
  78 0248 6A02     	  push $0x02
  79 024a 57       	  push %edi
  80 024b 56       	  push %esi
  81 024c E8EDFEFF 	  call vram_font_copy
  81      FF
  82 0251 6683C410 	  add $0x10, %sp
  83              	
  84 0255 6A00     	  push $0x00
  85 0257 E8B0FEFF 	  call vga_set_read_plane
  85      FF
  86 025c 6683C404 	  add $0x4, %sp
  87              	  
  88 0260 6A01     	  push $0x01
  89 0262 E8BEFEFF 	  call vga_set_write_plane
  89      FF
  90 0267 6683C404 	  add $0x4, %sp
  91              	
  92 026b 53       	  push %ebx
  93 026c 6A01     	  push $0x01
  94 026e 57       	  push %edi
  95 026f 56       	  push %esi
  96 0270 E8C9FEFF 	  call vram_font_copy
  96      FF
  97 0275 6683C410 	  add $0x10, %sp
  98              	
  99 0279 5F       	  pop %edi
 100 027a 5E       	  pop %esi
GAS LISTING kernel.s 			page 9


 101 027b 5A       	  pop %edx
 102 027c 59       	  pop %ecx
 103 027d 5B       	  pop %ebx
 104 027e 58       	  pop %eax
 105              	
 106 027f 89EC     	  mov %ebp, %esp
 107 0281 5D       	  pop %ebp
 108              	
 109 0282 C3       	  ret
  93              	.include "../modules/protect/draw_font.s"
   1              	/*
   2              	 *  draw_font(col, row)
   3              	 *  arguments:
   4              	 *    col:
   5              	 *    row
   6              	 *  return: null
   7              	 */
   8              	
   9              	draw_font:
  10 0283 55       	  push %ebp
  11 0284 89E5     	  mov %esp, %ebp
  12              	
  13 0286 50       	  push %eax
  14 0287 53       	  push %ebx
  15 0288 51       	  push %ecx
  16 0289 52       	  push %edx
  17 028a 56       	  push %esi
  18 028b 57       	  push %edi
  19              	
  20 028c 8B7508   	  mov 0x8(%ebp), %esi # col
  21 028f 8B7D0C   	  mov 0xc(%ebp), %edi # row
  22              	
  23 0292 B9000000 	  mov $0x0, %ecx
  23      00
  24              	.Ldraw_font_10L:  
  25 0297 81F90001 	  cmp $0x100, %ecx
  25      0000
  26 029d 731F     	  jae .Ldraw_font_10E
  27              	
  28 029f 89C8     	  mov %ecx, %eax
  29 02a1 83E00F   	  and $0x0F, %eax
  30 02a4 01F0     	  add %esi, %eax
  31              	
  32 02a6 89CB     	  mov %ecx, %ebx
  33 02a8 C1EB04   	  shr $0x4, %ebx
  34 02ab 01FB     	  add %edi, %ebx
  35              	
  36 02ad 51       	  push %ecx
  37 02ae 6A07     	  push $0x07
  38 02b0 53       	  push %ebx
  39 02b1 50       	  push %eax
  40 02b2 E808FFFF 	  call draw_char
  40      FF
  41 02b7 6683C410 	  add $0x10, %sp
  42              	
  43 02bb 41       	  inc %ecx
  44 02bc EBD9     	  jmp .Ldraw_font_10L
GAS LISTING kernel.s 			page 10


  45              	.Ldraw_font_10E:
  46              	
  47 02be 5F       	  pop %edi
  48 02bf 5E       	  pop %esi
  49 02c0 5A       	  pop %edx
  50 02c1 59       	  pop %ecx
  51 02c2 5B       	  pop %ebx
  52 02c3 58       	  pop %eax
  53              	
  54 02c4 89EC     	  mov %ebp, %esp
  55 02c6 5D       	  pop %ebp
  56              	
  57 02c7 C3       	  ret
  94              	.include "../modules/protect/draw_str.s"
   1              	/*
   2              	 *  draw_str(col, row, color, p)
   3              	 *  arguments:
   4              	 *    col
   5              	 *    row:
   6              	 *    color: drawing color
   7              	 *    str's addr
   8              	 */
   9              	
  10              	draw_str:
  11 02c8 55       	  push %ebp
  12 02c9 89E5     	  mov %esp, %ebp
  13              	
  14 02cb 50       	  push %eax
  15 02cc 53       	  push %ebx
  16 02cd 51       	  push %ecx
  17 02ce 52       	  push %edx
  18 02cf 56       	  push %esi
  19              	
  20 02d0 8B4D08   	  mov 0x8(%ebp), %ecx
  21 02d3 8B550C   	  mov 0xc(%ebp), %edx
  22 02d6 0FB75D10 	  movzxw 0x10(%ebp), %ebx
  23 02da 8B7514   	  mov 0x14(%ebp), %esi
  24              	
  25 02dd FC       	  cld
  26              	.Ldraw_str_10L:
  27              	
  28 02de AC       	  lodsb
  29 02df 3C00     	  cmp $0x0, %al
  30 02e1 7425     	  je .Ldraw_str_10E
  31              	
  32 02e3 50       	  push %eax
  33 02e4 53       	  push %ebx
  34 02e5 52       	  push %edx
  35 02e6 51       	  push %ecx
  36 02e7 E8D3FEFF 	  call draw_char
  36      FF
  37 02ec 6683C410 	  add $0x10, %sp
  38              	
  39              	
  40              	
  41 02f0 41       	  inc %ecx
  42 02f1 83F950   	  cmp $80, %ecx
GAS LISTING kernel.s 			page 11


  43 02f4 7C10     	  jl .Ldraw_str_12E
  44 02f6 B9000000 	  mov $0, %ecx
  44      00
  45 02fb 42       	  inc %edx
  46 02fc 83FA1E   	  cmp $30, %edx
  47 02ff 7C05     	  jl .Ldraw_str_12E
  48 0301 BA000000 	  mov $0, %edx
  48      00
  49              	
  50              	.Ldraw_str_12E:
  51 0306 EBD6     	  jmp .Ldraw_str_10L
  52              	
  53              	.Ldraw_str_10E:
  54              	
  55 0308 5E       	  pop %esi
  56 0309 5A       	  pop %edx
  57 030a 59       	  pop %ecx
  58 030b 5B       	  pop %ebx
  59 030c 58       	  pop %eax
  60              	
  61 030d 89EC     	  mov %ebp, %esp
  62 030f 5D       	  pop %ebp
  63              	
  64 0310 C3       	  ret
  65              	
  95              	.include "../modules/protect/draw_color_bar.s"
   1              	/*
   2              	 *  draw_color_bar(row, col)
   3              	 *  arguments:
   4              	 *    row:
   5              	 *    col:
   6              	 *  reuturn: void
   7              	 */
   8              	
   9              	draw_color_bar:
  10 0311 55       	  push %ebp
  11 0312 89E5     	  mov %esp, %ebp
  12              	
  13 0314 50       	  push %eax
  14 0315 53       	  push %ebx
  15 0316 51       	  push %ecx
  16 0317 52       	  push %edx
  17 0318 56       	  push %esi
  18 0319 57       	  push %edi
  19              	
  20 031a 8B7508   	  mov 0x8(%ebp), %esi #row
  21 031d 8B7D0C   	  mov 0xc(%ebp), %edi #col
  22              	
  23 0320 B9000000 	  mov $0x0, %ecx
  23      00
  24              	.Ldraw_color_bar_10L:
  25 0325 83F910   	  cmp $0x10, %ecx
  26 0328 732E     	  jae .Ldraw_color_bar_10E
  27              	
  28 032a 89C8     	  mov %ecx, %eax
  29 032c 83E001   	  and $0x01, %eax
  30 032f C1E003   	  shl $0x3, %eax
GAS LISTING kernel.s 			page 12


  31 0332 01F0     	  add %esi, %eax
  32              	
  33 0334 89CB     	  mov %ecx, %ebx
  34 0336 D1EB     	  shr $0x1, %ebx
  35 0338 01FB     	  add %edi, %ebx
  36              	
  37 033a 89CA     	  mov %ecx, %edx
  38 033c D1E2     	  shl $0x1, %edx
  39 033e 8B920000 	  mov .Ldraw_color_bar_t0(%edx), %edx
  39      0000
  40              	
  41 0344 68000000 	  push $.Ldraw_color_bar_s0
  41      00
  42 0349 52       	  push %edx
  43 034a 53       	  push %ebx
  44 034b 50       	  push %eax
  45 034c E877FFFF 	  call draw_str
  45      FF
  46 0351 6683C410 	  add $0x10, %sp
  47              	
  48 0355 41       	  inc %ecx
  49 0356 EBCD     	  jmp .Ldraw_color_bar_10L
  50              	
  51              	.Ldraw_color_bar_10E:
  52              	  
  53 0358 5F       	  pop %edi
  54 0359 5E       	  pop %esi
  55 035a 5A       	  pop %edx
  56 035b 59       	  pop %ecx
  57 035c 5B       	  pop %ebx
  58 035d 58       	  pop %eax
  59              	
  60 035e 89EC     	  mov %ebp, %esp
  61 0360 5D       	  pop %ebp
  62              	
  63 0361 C3       	  ret
  64              	
  65 0362 20202020 	.Ldraw_color_bar_s0: .string "        "
  65      20202020 
  65      00
  66              	
  67 036b 00000008 	.Ldraw_color_bar_t0: .word 0x0000, 0x0800 
  68 036f 00010009 	.word 0x0100, 0x0900
  69 0373 0002000A 	.word 0x0200, 0x0A00
  70 0377 0003000B 	.word 0x0300, 0x0B00
  71 037b 0004000C 	.word 0x0400, 0x0C00
  72 037f 0005000D 	.word 0x0500, 0x0D00
  73 0383 0006000E 	.word 0x0600, 0x0E00
  74 0387 0007000F 	.word 0x0700, 0x0F00
  96              	.include "../modules/protect/draw_pixel.s"
   1              	/*
   2              	 *  draw_pixel(X, Y, color)
   3              	 *  X:
   4              	 *  Y:
   5              	 *  color:
   6              	 *  return: void
   7              	 */
GAS LISTING kernel.s 			page 13


   8              	
   9              	
  10              	draw_pixel:
  11              	
  12 038b 55       	  push %ebp
  13 038c 89E5     	  mov %esp, %ebp
  14              	
  15 038e 50       	  push %eax
  16 038f 53       	  push %ebx
  17 0390 51       	  push %Ecx
  18 0391 57       	  push %edi
  19              	
  20 0392 8B7D0C   	  mov 0xc(%ebp), %edi # Y
  21 0395 C1E704   	  shl $0x4, %edi
  22 0398 8DBCBF00 	  lea VRAM(%edi, %edi, 0x4), %edi
  22      000A00
  23              	  
  24 039f 8B5D08   	  mov 0x8(%ebp), %ebx
  25 03a2 89D9     	  mov %ebx, %ecx
  26 03a4 C1EB03   	  shr $0x3, %ebx
  27 03a7 01DF     	  add %ebx, %edi
  28              	
  29 03a9 83E107   	  and $0x7, %ecx
  30 03ac BB800000 	  mov $0x80, %ebx
  30      00
  31 03b1 D3EB     	  shr %cl, %ebx
  32              	
  33 03b3 8B4D10   	  mov 0x10(%ebp), %ecx
  34              	
  35 03b6 6A03     	  push $0x03
  36 03b8 E84FFDFF 	  call vga_set_read_plane
  36      FF
  37 03bd 6683C404 	  add $0x04, %sp
  38              	
  39 03c1 6A08     	  push $0x08
  40 03c3 E85DFDFF 	  call vga_set_write_plane
  40      FF
  41 03c8 6683C404 	  add $0x04, %sp
  42              	
  43 03cc 51       	  push %ecx
  44 03cd 6A08     	  push $0x08
  45 03cf 57       	  push %edi
  46 03d0 53       	  push %ebx
  47 03d1 E8BBFDFF 	  call vram_bit_copy
  47      FF
  48 03d6 6683C410 	  add $0x10, %sp
  49              	
  50              	
  51 03da 6A02     	  push $0x02
  52 03dc E82BFDFF 	  call vga_set_read_plane
  52      FF
  53 03e1 6683C404 	  add $0x04, %sp
  54              	
  55 03e5 6A04     	  push $0x04
  56 03e7 E839FDFF 	  call vga_set_write_plane
  56      FF
  57 03ec 6683C404 	  add $0x04, %sp
GAS LISTING kernel.s 			page 14


  58              	
  59 03f0 51       	  push %ecx
  60 03f1 6A04     	  push $0x04
  61 03f3 57       	  push %edi
  62 03f4 53       	  push %ebx
  63 03f5 E897FDFF 	  call vram_bit_copy
  63      FF
  64 03fa 6683C410 	  add $0x10, %sp
  65              	
  66              	
  67 03fe 6A01     	  push $0x01
  68 0400 E807FDFF 	  call vga_set_read_plane
  68      FF
  69 0405 6683C404 	  add $0x04, %sp
  70              	
  71 0409 6A02     	  push $0x02
  72 040b E815FDFF 	  call vga_set_write_plane
  72      FF
  73 0410 6683C404 	  add $0x04, %sp
  74              	
  75 0414 51       	  push %ecx
  76 0415 6A02     	  push $0x02
  77 0417 57       	  push %edi
  78 0418 53       	  push %ebx
  79 0419 E873FDFF 	  call vram_bit_copy
  79      FF
  80 041e 6683C410 	  add $0x10, %sp
  81              	
  82              	
  83              	
  84 0422 6A00     	  push $0x00
  85 0424 E8E3FCFF 	  call vga_set_read_plane
  85      FF
  86 0429 6683C404 	  add $0x04, %sp
  87              	
  88 042d 6A01     	  push $0x01
  89 042f E8F1FCFF 	  call vga_set_write_plane
  89      FF
  90 0434 6683C404 	  add $0x04, %sp
  91              	
  92 0438 51       	  push %ecx
  93 0439 6A01     	  push $0x01
  94 043b 57       	  push %edi
  95 043c 53       	  push %ebx
  96 043d E84FFDFF 	  call vram_bit_copy
  96      FF
  97 0442 6683C410 	  add $0x10, %sp
  98              	
  99              	
 100 0446 5F       	  pop %edi
 101 0447 59       	  pop %ecx
 102 0448 5B       	  pop %ebx
 103 0449 58       	  pop %eax
 104              	
 105 044a 89EC     	  mov %ebp, %esp
 106 044c 5D       	  pop %ebp
 107              	
GAS LISTING kernel.s 			page 15


 108 044d C3       	  ret
  97              	.include "../modules/protect/draw_line.s"
   1              	/*
   2              	 *  draw_line(X0, Y0, X1, Y1, color)
   3              	 *  X0: start point of x
   4              	 *  Y0: start point of y
   5              	 *  X1: end point of x
   6              	 *  Y1: end point of y
   7              	 *  color:  drawing color
   8              	 *  return: void
   9              	 */
  10              	
  11              	draw_line:
  12 044e 55       	  push %ebp
  13 044f 89E5     	  mov %esp, %ebp
  14              	
  15 0451 6A00     	  pushl $0
  16 0453 6A00     	  pushl $0
  17 0455 6A00     	  pushl $0
  18 0457 6A00     	  pushl $0
  19 0459 6A00     	  pushl $0
  20 045b 6A00     	  pushl $0
  21 045d 6A00     	  pushl $0
  22              	
  23 045f 50       	  push %eax
  24 0460 53       	  push %ebx
  25 0461 51       	  push %ecx
  26 0462 52       	  push %edx
  27 0463 56       	  push %esi
  28 0464 57       	  push %edi
  29              	
  30 0465 8B4508   	  mov 0x8(%ebp), %eax # X0
  31 0468 8B5D10   	  mov 0x10(%ebp), %ebx # X1
  32 046b 29C3     	  sub %eax, %ebx # X1 - X0
  33 046d 7D09     	  jge .Ldraw_line_10F
  34              	
  35 046f F7DB     	  neg %ebx
  36 0471 BEFFFFFF 	  mov $-0x1, %esi
  36      FF
  37 0476 EB05     	  jmp .Ldraw_line_10E
  38              	
  39              	.Ldraw_line_10F:
  40              	
  41 0478 BE010000 	  mov $0x1, %esi
  41      00
  42              	
  43              	.Ldraw_line_10E:
  44              	  
  45 047d 8B4D0C   	  mov 0xc(%ebp), %ecx # Y0
  46 0480 8B5514   	  mov 0x14(%ebp), %edx # Y1
  47 0483 29CA     	  sub %ecx, %edx # Y1 - Y0
  48 0485 7D09     	  jge .Ldraw_line_20F
  49              	
  50 0487 F7DA     	  neg %edx
  51 0489 BFFFFFFF 	  mov $-0x1, %edi
  51      FF
  52 048e EB05     	  jmp .Ldraw_line_20E
GAS LISTING kernel.s 			page 16


  53              	
  54              	.Ldraw_line_20F:
  55              	  
  56 0490 BF010000 	  mov $0x1, %edi
  56      00
  57              	
  58              	
  59              	.Ldraw_line_20E:
  60              	
  61 0495 8945F8   	  mov %eax, -0x8(%ebp)
  62 0498 895DF4   	  mov %ebx, -0xc(%ebp)
  63 049b 8975F0   	  mov %esi, -0x10(%ebp)
  64              	
  65 049e 894DEC   	  mov %ecx, -0x14(%ebp)
  66 04a1 8955E8   	  mov %edx, -0x18(%ebp)
  67 04a4 897DE4   	  mov %edi, -0x1c(%ebp)
  68              	
  69 04a7 39D3     	  cmp %edx, %ebx
  70 04a9 7F08     	  jg .Ldraw_line_22F
  71              	
  72 04ab 8D75EC   	  lea -0x14(%ebp), %esi
  73 04ae 8D7DF8   	  lea -0x8(%ebp), %edi
  74              	
  75 04b1 EB06     	  jmp .Ldraw_line_22E
  76              	
  77              	.Ldraw_line_22F:
  78              	
  79 04b3 8D75F8   	  lea -0x8(%ebp), %esi
  80 04b6 8D7DEC   	  lea -0x14(%ebp), %edi
  81              	
  82              	
  83              	.Ldraw_line_22E:
  84 04b9 8B4EFC   	  mov -0x4(%esi), %ecx
  85 04bc 83F900   	  cmp $0x0, %ecx
  86 04bf 7505     	  jnz .Ldraw_line_30E
  87 04c1 B9010000 	  mov $0x1, %ecx
  87      00
  88              	
  89              	
  90              	.Ldraw_line_30E:
  91              	  
  92              	
  93              	.Ldraw_line_50L:
  94              	  
  95 04c6 FF7518   	  pushl 0x18(%ebp)
  96 04c9 FF75EC   	  pushl -0x14(%ebp)
  97 04cc FF75F8   	  pushl -0x8(%ebp)
  98 04cf E8B7FEFF 	  call draw_pixel
  98      FF
  99 04d4 6683C40C 	  add $0xc, %sp
 100              	
 101 04d8 8B46F8   	  mov -0x8(%esi), %eax
 102 04db 0106     	  add %eax, (%esi)
 103              	
 104 04dd 8B45FC   	  mov -0x4(%ebp), %eax
 105 04e0 0347FC   	  add -0x4(%edi), %eax
 106 04e3 8B5EFC   	  mov -0x4(%esi), %ebx
GAS LISTING kernel.s 			page 17


 107              	
 108 04e6 39D8     	  cmp %ebx, %eax
 109 04e8 7C07     	  jl .Ldraw_line_52E
 110 04ea 29D8     	  sub %ebx, %eax
 111              	
 112 04ec 8B5FF8   	  mov -0x8(%edi), %ebx
 113 04ef 011F     	  add %ebx, (%edi)
 114              	
 115              	.Ldraw_line_52E:
 116 04f1 8945FC   	  mov %eax, -0x4(%ebp)
 117 04f4 E2D0     	  loop .Ldraw_line_50L
 118              	
 119              	
 120              	.Ldraw_line_50E:
 121              	  
 122 04f6 5F       	  pop %edi
 123 04f7 5E       	  pop %esi
 124 04f8 5A       	  pop %edx
 125 04f9 59       	  pop %ecx
 126 04fa 5B       	  pop %ebx
 127 04fb 58       	  pop %eax
 128              	
 129 04fc 89EC     	  mov %ebp, %esp
 130 04fe 5D       	  pop %ebp
 131              	
 132 04ff C3       	  ret
 133              	
 134              	  
 135              	
 136              	  
  98              	.include "../modules/protect/draw_rect.s"
   1              	/*
   2              	 *  draw_rect(X0, Y0, X1, Y1, color)
   3              	 *  arguments:
   4              	 *    X0: starting x
   5              	 *    Y0: starting y
   6              	 *    X1: end of x
   7              	 *    Y1: end of y
   8              	 *    color: drawing color
   9              	 *  return: void
  10              	 */
  11              	
  12              	 draw_rect:
  13 0500 55       	  push %ebp
  14 0501 89E5     	  mov %esp, %ebp
  15              	
  16 0503 50       	  push %eax
  17 0504 53       	  push %ebx
  18 0505 51       	  push %ecx
  19 0506 52       	  push %edx
  20 0507 56       	  push %esi
  21              	
  22 0508 8B4508   	  mov 0x8(%ebp), %eax # X0
  23 050b 8B5D0C   	  mov 0xc(%ebp), %ebx # Y0
  24 050e 8B4D10   	  mov 0x10(%ebp), %ecx # X1
  25 0511 8B5514   	  mov 0x14(%ebp), %edx # Y1
  26 0514 8B7518   	  mov 0x18(%ebp), %esi # color
GAS LISTING kernel.s 			page 18


  27              	
  28 0517 39C8     	  cmp %ecx, %eax
  29 0519 7C01     	  jl .Ldraw_rect_10E
  30 051b 91       	  xchg %ecx, %eax
  31              	
  32              	.Ldraw_rect_10E:
  33              	  
  34 051c 39D3     	  cmp %edx, %ebx
  35 051e 7C02     	  jl .Ldraw_rect_20E
  36 0520 87D3     	  xchg %edx, %ebx
  37              	
  38              	.Ldraw_rect_20E:
  39              	
  40 0522 56       	  push %esi
  41 0523 53       	  push %ebx
  42 0524 51       	  push %ecx
  43 0525 53       	  push %ebx
  44 0526 50       	  push %eax
  45 0527 E822FFFF 	  call draw_line
  45      FF
  46 052c 6683C414 	  add $0x14, %sp
  47              	
  48 0530 56       	  push %esi
  49 0531 52       	  push %edx
  50 0532 50       	  push %eax
  51 0533 53       	  push %ebx
  52 0534 50       	  push %eax
  53 0535 E814FFFF 	  call draw_line
  53      FF
  54 053a 6683C414 	  add $0x14, %sp
  55              	
  56 053e 4A       	  dec %edx
  57 053f 56       	  push %esi
  58 0540 52       	  push %edx
  59 0541 51       	  push %ecx
  60 0542 52       	  push %edx
  61 0543 50       	  push %eax
  62 0544 E805FFFF 	  call draw_line
  62      FF
  63 0549 6683C414 	  add $0x14, %sp
  64 054d 42       	  inc %edx
  65              	
  66 054e 49       	  dec %ecx
  67 054f 56       	  push %esi
  68 0550 52       	  push %edx
  69 0551 51       	  push %ecx
  70 0552 53       	  push %ebx
  71 0553 51       	  push %ecx
  72 0554 E8F5FEFF 	  call draw_line
  72      FF
  73 0559 6683C414 	  add $0x14, %sp
  74              	
  75 055d 5E       	  pop %esi
  76 055e 5A       	  pop %edx
  77 055f 59       	  pop %ecx
  78 0560 5B       	  pop %ebx
  79 0561 58       	  pop %eax
GAS LISTING kernel.s 			page 19


  80              	
  81 0562 89EC     	  mov %ebp, %esp
  82 0564 5D       	  pop %ebp
  83              	
  84 0565 C3       	  ret
  99              	.include "../modules/protect/itoa.s"
   1              	# void itoa(num, buff, size, radix, flag)
   2              	# num:source addr
   3              	# buff:dist addr
   4              	# radix:set 2, 8, 10, or 16 
   5              	# flag:When set 
   6              	#                 1st bit: 0 padding on space
   7              	#                 2nd bit: add +/- sign
   8              	#                 3rd bit: treat as signed variable 
   9              	
  10              	
  11              	itoa:
  12 0566 55       	  push %ebp
  13 0567 89E5     	  mov %esp, %ebp
  14              	
  15              	# store register
  16 0569 50       	  push %eax
  17 056a 53       	  push %ebx
  18 056b 51       	  push %ecx
  19 056c 52       	  push %edx
  20 056d 56       	  push %esi
  21 056e 57       	  push %edi
  22              	
  23              	# get arguments
  24 056f 8B4508   	  mov 0x8(%ebp), %eax # num
  25 0572 8B750C   	  mov 0xc(%ebp), %esi # buff
  26 0575 8B4D10   	  mov 0x10(%ebp), %ecx # size
  27 0578 8B5D18   	  mov 0x18(%ebp), %ebx # flag
  28              	# The remaining arguments(radix: 0xa(%bp) ) will be assigend later.
  29 057b 89F7     	  mov %esi, %edi
  30 057d 01CF     	  add %ecx, %edi
  31 057f 4F       	  dec %edi
  32              	
  33              	
  34              	
  35              	# detect signed variable
  36 0580 F7C30100 	  test $0b0001, %ebx
  36      0000
  37 0586 7408     	  jz .Litoa1
  38 0588 83F800   	  cmp $0, %eax
  39 058b 7D03     	  jge .Litoa2
  40 058d 83CB02   	  or $0b0010, %ebx
  41              	.Litoa1: 
  42              	.Litoa2:
  43              	
  44              	# detect add +/- sign
  45 0590 F7C30200 	  test $0b0010, %ebx
  45      0000
  46 0596 7410     	  jz .Litoa3
  47 0598 83F800   	  cmp $0, %eax
  48 059b 7D07     	  jge .Litoa4
  49 059d F7D8     	  neg %eax
GAS LISTING kernel.s 			page 20


  50 059f C6062D   	  movb $0x2d, (%esi) # 0x2d == '-'
  51 05a2 EB03     	  jmp .Litoa5
  52              	.Litoa4:
  53 05a4 C6062B   	  movb $0x2b, (%esi) # 0x2b == '+'
  54              	.Litoa5:
  55 05a7 49       	  dec %ecx
  56              	.Litoa3:
  57              	
  58              	# convert to ascii
  59 05a8 8B5D14   	  mov 0x14(%ebp), %ebx
  60              	.LitoaLOOP1:
  61 05ab BA000000 	  mov $0, %edx
  61      00
  62 05b0 F7F3     	  div %ebx
  63 05b2 89D6     	  mov %edx, %esi
  64 05b4 8A960000 	  movb ascii_table(%esi), %dl
  64      0000
  65 05ba 8817     	  mov %dl, (%edi)
  66 05bc 4F       	  dec %edi
  67 05bd 83F800   	  cmp $0, %eax
  68 05c0 E0E9     	  loopnz .LitoaLOOP1
  69              	.LotpaLOOPEND1:
  70              	
  71              	
  72              	# 0 padding in the space
  73 05c2 83F900   	  cmp $0, %ecx
  74 05c5 740E     	  je .Litoa6
  75 05c7 B020     	  mov $0x20, %al
  76 05c9 66837D18 	  cmpw $0b0100, 0x18(%ebp)
  76      04
  77 05ce 7502     	  jne .Litoa7
  78 05d0 B030     	  mov $0x30, %al
  79              	.Litoa7:
  80 05d2 FD       	  std
  81 05d3 F3AA     	  rep stosb
  82              	.Litoa6:
  83              	
  84              	# return register
  85 05d5 5F       	  pop %edi
  86 05d6 5E       	  pop %esi
  87 05d7 5A       	  pop %edx
  88 05d8 59       	  pop %ecx
  89 05d9 5B       	  pop %ebx
  90 05da 58       	  pop %eax
  91              	
  92              	# destroy stack frame
  93 05db 89EC     	  mov %ebp, %esp
  94 05dd 5D       	  pop %ebp
  95 05de C3       	  ret
  96              	
  97              	
  98              	
  99 05df 30313233 	ascii_table: .string "0123456789ABCDEF"
  99      34353637 
  99      38394142 
  99      43444546 
  99      00
GAS LISTING kernel.s 			page 21


 100              	.include "../modules/protect/rtc.s"
   1              	/*
   2              	 *  rtc_get_time(dst)
   3              	 *  arguments:
   4              	 *    dst:  stored address
   5              	 *  return:
   6              	 *    0:  sucsess
   7              	 *    other:  false
   8              	 */
   9              	rtc_get_time:
  10 05f0 55       	  push %ebp
  11 05f1 89E5     	  mov %esp, %ebp
  12              	
  13 05f3 53       	  push %ebx
  14              	
  15 05f4 B00A     	  mov $0x0A, %al
  16 05f6 E670     	  out %al, $0x70
  17 05f8 E471     	  in $0x71, %al
  18 05fa A880     	  test $0x80, %al
  19 05fc 7407     	  je .Lrtc_10F
  20 05fe B8010000 	  mov $0x1, %eax
  20      00
  21 0603 EB27     	  jmp .Lrtc_10E
  22              	.Lrtc_10F:
  23              	
  24 0605 B004     	  mov $0x4, %al # hour data
  25 0607 E670     	  out %al, $0x70
  26 0609 E471     	  in $0x71, %al
  27              	  
  28 060b C1E008   	  shl $0x8, %eax # hour 00
  29              	
  30 060e B002     	  mov $0x2, %al # minute
  31 0610 E670     	  out %al, $0x70
  32 0612 E471     	  in $0x71, %al 
  33              	  
  34 0614 C1E008   	  shl $0x8, %eax # hour minute 00
  35              	
  36 0617 B000     	  mov $0x0, %al # second
  37 0619 E670     	  out %al, $0x70
  38 061b E471     	  in $0x71, %al # hour minute second 00
  39              	
  40 061d 25FFFFFF 	  and $0x00FFFFFF, %eax # FF(hour) FF(minute) FF(second)
  40      00
  41              	
  42 0622 8B5D08   	  mov 0x8(%ebp), %ebx
  43 0625 8903     	  mov %eax, (%ebx)
  44              	
  45 0627 B8000000 	  mov $0x0, %eax
  45      00
  46              	
  47              	.Lrtc_10E:
  48              	
  49 062c 5B       	  pop %ebx
  50              	
  51 062d 89EC     	  mov %ebp, %esp
  52 062f 5D       	  pop %ebp
  53              	
GAS LISTING kernel.s 			page 22


  54 0630 C3       	  ret
 101              	.include "../modules/protect/draw_time.s"
   1              	/*
   2              	 *  draw_time(col, row, color, time)
   3              	 *  arguments:
   4              	 *    col:
   5              	 *    row:
   6              	 *    color:
   7              	 *    time:
   8              	 *  return: void
   9              	 */
  10              	
  11              	
  12              	 draw_time:
  13              	
  14 0631 55       	  push %ebp
  15 0632 89E5     	  mov %esp, %ebp
  16              	
  17 0634 50       	  push %eax
  18 0635 53       	  push %ebx
  19              	
  20 0636 8B4514   	  mov 0x14(%ebp), %eax
  21 0639 3B050000 	  cmp (.last), %eax
  21      0000
  22 063f 7466     	  je .Ldraw_time_10E
  23              	
  24 0641 A3000000 	  mov %eax, (.last)
  24      00
  25              	  
  26              	
  27 0646 BB000000 	  mov $0x0, %ebx
  27      00
  28 064b 88C3     	  mov %al, %bl
  29 064d 6A04     	  push $0b100
  30 064f 6A10     	  push $0x10
  31 0651 6A02     	  push $0x2
  32 0653 68000000 	  push $.sec
  32      00
  33 0658 53       	  push %ebx
  34 0659 E808FFFF 	  call itoa
  34      FF
  35 065e 6683C414 	  add $0x14, %sp
  36              	  
  37 0662 88E3     	  mov %ah, %bl
  38 0664 6A04     	  push $0b100
  39 0666 6A10     	  push $0x10
  40 0668 6A02     	  push $0x2
  41 066a 68000000 	  push $.min
  41      00
  42 066f 53       	  push %ebx
  43 0670 E8F1FEFF 	  call itoa
  43      FF
  44 0675 6683C414 	  add $0x14, %sp
  45              	
  46 0679 C1E810   	  shr $0x10, %eax
  47 067c 6A04     	  push $0b100
  48 067e 6A10     	  push $0x10
GAS LISTING kernel.s 			page 23


  49 0680 6A02     	  push $0x2
  50 0682 68000000 	  push $.hour
  50      00
  51 0687 50       	  push %eax
  52 0688 E8D9FEFF 	  call itoa
  52      FF
  53 068d 6683C414 	  add $0x14, %sp
  54              	
  55 0691 68000000 	  push $.hour
  55      00
  56 0696 FF7510   	  pushl 0x10(%ebp)
  57 0699 FF750C   	  pushl 0xc(%ebp)
  58 069c FF7508   	  pushl 0x8(%ebp)
  59 069f E824FCFF 	  call draw_str
  59      FF
  60 06a4 83C410   	  add $0x10, %esp
  61              	
  62              	.Ldraw_time_10E:
  63              	
  64 06a7 5B       	  pop %ebx
  65 06a8 58       	  pop %eax
  66              	
  67 06a9 89EC     	  mov %ebp, %esp
  68 06ab 5D       	  pop %ebp
  69              	
  70 06ac C3       	  ret
  71              	
  72 06ad 90       	.align 2
  73 06ae 00000000 	.temp:  .quad 0x0
  73      00000000 
  74 06b6 00000000 	.last:  .quad 0x0
  74      00000000 
  75 06be 5A5A3A   	.hour:  .ascii "ZZ:"
  76 06c1 5A5A3A   	.min:   .ascii "ZZ:"
  77 06c4 5A5A00   	.sec:   .string "ZZ"
 102              	#.include "./modules/interrupt.s"
 103              	.include "../modules/protect/pic.s"
   1              	init_pic:
   2 06c7 50       	  push %eax
   3              	  
   4              	# setting master pic
   5              	
   6 06c8 B011E620 	  outp $0x20, $0x11 
   7 06cc B020E621 	  outp $0x21, $0x20
   8 06d0 B004E621 	  outp $0x21, $0x04
   9 06d4 B005E621 	  outp $0x21, $0x05
  10 06d8 B0FFE621 	  outp $0x21, $0xFF
  11              	
  12              	# setting slave
  13              	
  14 06dc B011E6A0 	  outp $0xA0, $0x11
  15 06e0 B028E6A1 	  outp $0xA1, $0x28
  16 06e4 B002E6A1 	  outp $0xA1, $0x02
  17 06e8 B001E6A1 	  outp $0xA1, $0x01
  18 06ec B0FFE6A1 	  outp $0xA1, $0xFF
  19              	
  20 06f0 58       	  pop %eax
GAS LISTING kernel.s 			page 24


  21              	
  22 06f1 C3       	  ret 
  23              	
 104              	.include "../modules/protect/int_rtc.s"
   1              	/*
   2              	 *  rtc_int(bit)
   3              	 */
   4              	
   5              	rtc_int_en:
   6 06f2 55       	  push %ebp
   7 06f3 89E5     	  mov %esp, %ebp
   8              	
   9 06f5 50       	  push %eax
  10              	
  11 06f6 B00BE670 	  outp $0x70, $0x0B
  12              	
  13 06fa E471     	  in $0x71, %al
  14 06fc 0A4508   	  or 0x8(%ebp), %al
  15 06ff E671     	  out %al, $0x71
  16              	
  17 0701 58       	  pop %eax
  18              	
  19 0702 89EC     	  mov %ebp, %esp
  20 0704 5D       	  pop %ebp
  21 0705 C3       	  ret
  22              	
  23              	int_rtc:
  24 0706 60       	  pusha
  25 0707 1E       	  push %ds
  26 0708 06       	  push %es
  27              	
  28 0709 66B81000 	  mov $0x0010, %ax
  29 070d 8ED8     	  mov %ax, %ds
  30 070f 8EC0     	  mov %ax, %es
  31              	
  32 0711 68000000 	  push $RTC_TIME
  32      00
  33 0716 E8D5FEFF 	  call rtc_get_time
  33      FF
  34 071b 6683C404 	  add $0x4, %sp
  35              	
  36 071f B00CE670 	  outp $0x70, $0x0C
  37 0723 E471     	  in $0x71, %al
  38              	
  39              	  # EOI command
  40 0725 B020E6A0 	  outp $0xA0, $0x20
  41 0729 B020E620 	  outp $0x20, $0x20
  42              	
  43 072d 07       	  pop %es
  44 072e 1F       	  pop %ds
  45 072f 61       	  popa
  46              	
  47 0730 CF       	  iret
 105              	.include "../modules/protect/interrupt.s"
   1 0731 0F1F00   	.align 0x4
   2 0734 FF07     	IDTR: .word 8 * 256 - 1
   3 0736 00001000 	.long VECT_BASE
GAS LISTING kernel.s 			page 25


   4              	
   5              	init_int:
   6 073a 50       	  push %eax
   7 073b 53       	  push %ebx
   8 073c 51       	  push %ecx
   9 073d 57       	  push %edi
  10              	
  11 073e 8D050000 	  lea (int_default), %eax
  11      0000
  12 0744 BB008E08 	  mov $0x00088E00, %ebx
  12      00
  13 0749 6693     	  xchg %bx, %ax
  14              	
  15 074b B9000100 	  mov $256, %ecx
  15      00
  16 0750 BF000010 	  mov $VECT_BASE, %edi
  16      00
  17              	
  18              	.10L:
  19              	  
  20 0755 891F     	  mov %ebx, (%edi)
  21 0757 894704   	  mov %eax, 0x4(%edi)
  22 075a 83C708   	  add $0x8, %edi
  23 075d E2F6     	  loop .10L
  24              	
  25 075f 0F011D00 	  lidt (IDTR)
  25      000000
  26              	
  27 0766 5F       	  pop %edi
  28 0767 59       	  pop %ecx
  29 0768 5B       	  pop %ebx
  30 0769 58       	  pop %eax
  31              	
  32 076a C3       	  ret
  33              	
  34              	int_stop:
  35 076b FB       	  sti
  36              	
  37 076c 50       	  push %eax
  38 076d 680F0600 	  push $0x060F
  38      00
  39 0772 6A0F     	  push $0xF
  40 0774 6A19     	  push $0x19
  41 0776 E84DFBFF 	  call draw_str
  41      FF
  42 077b 6683C410 	  add $0x10, %sp
  43              	
  44 077f 8B0424   	  mov (%esp), %eax
  45 0782 6A04     	  push $0b0100
  46 0784 6A10     	  push $0x10
  47 0786 6A08     	  push $0x8
  48 0788 68000000 	  push $.p1
  48      00
  49 078d 50       	  push %eax
  50 078e E8D3FDFF 	  call itoa
  50      FF
  51 0793 6683C414 	  add $0x14, %sp
GAS LISTING kernel.s 			page 26


  52              	
  53 0797 8B442404 	  mov 0x4(%esp), %eax
  54 079b 6A04     	  push $0b0100
  55 079d 6A10     	  push $0x10
  56 079f 6A08     	  push $0x8
  57 07a1 68000000 	  push $.p2
  57      00
  58 07a6 50       	  push %eax
  59 07a7 E8BAFDFF 	  call itoa
  59      FF
  60 07ac 6683C414 	  add $0x14, %sp
  61              	
  62              	
  63 07b0 8B442408 	  mov 0x8(%esp), %eax
  64 07b4 6A04     	  push $0b0100
  65 07b6 6A10     	  push $0x10
  66 07b8 6A08     	  push $0x8
  67 07ba 68000000 	  push $.p3
  67      00
  68 07bf 50       	  push %eax
  69 07c0 E8A1FDFF 	  call itoa
  69      FF
  70 07c5 6683C414 	  add $0x14, %sp
  71              	
  72 07c9 8B44240C 	  mov 0xc(%esp), %eax
  73 07cd 6A04     	  push $0b0100
  74 07cf 6A10     	  push $0x10
  75 07d1 6A08     	  push $0x8
  76 07d3 68000000 	  push $.p4
  76      00
  77 07d8 50       	  push %eax
  78 07d9 E888FDFF 	  call itoa
  78      FF
  79 07de 6683C414 	  add $0x14, %sp
  80              	
  81 07e2 68000000 	  push $.s1
  81      00
  82 07e7 68040F00 	  push $0x0F04
  82      00
  83 07ec 6A10     	  push $0x10
  84 07ee 6A19     	  push $0x19
  85 07f0 E8D3FAFF 	  call draw_str
  85      FF
  86 07f5 6683C410 	  add $0x10, %sp
  87              	  
  88 07f9 68000000 	  push $.s2
  88      00
  89 07fe 68040F00 	  push $0x0F04
  89      00
  90 0803 6A11     	  push $0x11
  91 0805 6A19     	  push $0x19
  92 0807 E8BCFAFF 	  call draw_str
  92      FF
  93 080c 6683C410 	  add $0x10, %sp
  94              	
  95 0810 68000000 	  push $.s3
  95      00
GAS LISTING kernel.s 			page 27


  96 0815 68040F00 	  push $0x0F04
  96      00
  97 081a 6A12     	  push $0x12
  98 081c 6A19     	  push $0x19
  99 081e E8A5FAFF 	  call draw_str
  99      FF
 100 0823 6683C410 	  add $0x10, %sp
 101              	
 102 0827 68000000 	  push $.s4
 102      00
 103 082c 68040F00 	  push $0x0F04
 103      00
 104 0831 6A13     	  push $0x13
 105 0833 6A19     	  push $0x19
 106 0835 E88EFAFF 	  call draw_str
 106      FF
 107 083a 6683C410 	  add $0x10, %sp
 108              	
 109 083e EBFE     	  jmp .
 110              	
 111 0840 4553502B 	.s1: .ascii "ESP+ 0:"
 111      20303A
 112 0847 5F5F5F5F 	.p1: .string "________ "
 112      5F5F5F5F 
 112      2000
 113 0851 2020202B 	.s2: .ascii "   + 4:"
 113      20343A
 114 0858 5F5F5F5F 	.p2: .string "________ "
 114      5F5F5F5F 
 114      2000
 115 0862 2020202B 	.s3: .ascii "   + 8:"
 115      20383A
 116 0869 5F5F5F5F 	.p3: .string "________ "
 116      5F5F5F5F 
 116      2000
 117 0873 2020202B 	.s4: .ascii "   +12:"
 117      31323A
 118 087a 5F5F5F5F 	.p4: .string "________ "
 118      5F5F5F5F 
 118      2000
 119              	
 120              	int_default:
 121 0884 9C       	  pushf
 122 0885 0E       	  push %cs
 123 0886 68000000 	  push $int_stop
 123      00
 124 088b B8000000 	  mov $.int_default_s0, %eax
 124      00
 125 0890 CF       	  iret
 126              	
 127 0891 203C2020 	.int_default_s0: .string " <    STOP    > "
 127      20205354 
 127      4F502020 
 127      20203E20 
 127      00
 128              	
 129              	int_zero_div:
GAS LISTING kernel.s 			page 28


 130 08a2 9C       	  pushf
 131 08a3 0E       	  push %cs
 132 08a4 68000000 	  push $int_stop
 132      00
 133              	
 134 08a9 B8000000 	  mov $.int_zero_div, %eax
 134      00
 135 08ae CF       	  iret
 136              	
 137 08af 203C2020 	.int_zero_div: .string " <   ZERO DIV  > "
 137      205A4552 
 137      4F204449 
 137      5620203E 
 137      2000
 106              	.include "../modules/protect/int_keyboard.s"
   1              	int_keyboard:
   2 08c1 60       	  pusha
   3 08c2 1E       	  push %ds
   4 08c3 06       	  push %es
   5              	
   6 08c4 66B81000 	  mov $0x0010, %ax
   7 08c8 8ED8     	  mov %ax, %ds
   8 08ca 8EC0     	  mov %ax, %es
   9              	
  10 08cc E460     	  in $0x60, %al
  11              	
  12 08ce 50       	  push %eax
  13 08cf 68000000 	  push $_KEY_BUFF
  13      00
  14 08d4 E8650000 	  call ring_wr
  14      00
  15 08d9 6683C408 	  add $0x8, %sp
  16              	
  17 08dd B020E620 	  outp $0x20, $0x20
  18              	
  19 08e1 07       	  pop %es
  20 08e2 1F       	  pop %ds
  21 08e3 61       	  popa
  22              	
  23 08e4 CF       	  iret
  24              	
  25 08e5 0F1F00   	.align 4
  26 08e8 00000000 	_KEY_BUFF: .fill ring_buff.size, 0x1, 0x0
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
 107              	.include "../modules/protect/ring_buff.s"
   1              	ring_rd:
   2 0900 55       	  push %ebp
   3 0901 89E5     	  mov %esp, %ebp
   4              	
   5 0903 53       	  push %ebx
   6 0904 56       	  push %esi
   7 0905 57       	  push %edi
   8              	
   9 0906 8B7508   	  mov 0x8(%ebp), %esi
GAS LISTING kernel.s 			page 29


  10 0909 8B7D0C   	  mov 0xc(%ebp), %edi
  11              	
  12 090c B8000000 	  mov $0x0, %eax
  12      00
  13 0911 8B9E0000 	  mov ring_buff.rp(%esi), %ebx
  13      0000
  14 0917 3B9E0400 	  cmp ring_buff.wp(%esi), %ebx
  14      0000
  15 091d 7418     	  je .10E
  16              	
  17 091f 8A843308 	  mov ring_buff.item(%ebx, %esi), %al
  17      000000
  18 0926 8807     	  mov %al, (%edi)
  19              	
  20 0928 43       	  inc %ebx
  21 0929 83E30F   	  and $RING_INDEX_MASK, %ebx
  22 092c 899E0000 	  mov %ebx, ring_buff.rp(%esi)
  22      0000
  23 0932 B8010000 	  mov $0x1, %eax
  23      00
  24              	.10E:
  25              	
  26 0937 5F       	  pop %edi
  27 0938 5E       	  pop %esi
  28 0939 5B       	  pop %ebx
  29              	
  30 093a 89EC     	  mov %ebp, %esp
  31 093c 5D       	  pop %ebp
  32              	
  33 093d C3       	  ret
  34              	
  35              	ring_wr:
  36 093e 55       	  push %ebp
  37 093f 89E5     	  mov %esp, %ebp
  38              	
  39 0941 53       	  push %ebx
  40 0942 51       	  push %ecx
  41 0943 56       	  push %esi
  42              	
  43 0944 8B7508   	  mov 0x8(%ebp), %esi
  44 0947 B8000000 	  mov $0x0, %eax
  44      00
  45 094c 8B9E0400 	  mov ring_buff.wp(%esi), %ebx
  45      0000
  46 0952 89D9     	  mov %ebx, %ecx
  47 0954 41       	  inc %ecx
  48 0955 83E10F   	  and $RING_INDEX_MASK, %ecx
  49              	
  50 0958 3B8E0000 	  cmp ring_buff.rp(%esi), %ecx
  50      0000
  51 095e 7415     	  je .ringwr_10E
  52 0960 8A450C   	  mov 0xc(%ebp), %al
  53              	
  54 0963 88841E08 	  mov %al, ring_buff.item(%esi, %ebx)
  54      000000
  55 096a 898E0400 	  mov %ecx, ring_buff.wp(%esi)
  55      0000
GAS LISTING kernel.s 			page 30


  56 0970 B8010000 	  mov $0x1, %eax
  56      00
  57              	.ringwr_10E:
  58              	
  59 0975 5E       	  pop %esi
  60 0976 59       	  pop %ecx
  61 0977 5B       	  pop %ebx
  62              	
  63 0978 89EC     	  mov %ebp, %esp
  64 097a 5D       	  pop %ebp
  65              	
  66 097b C3       	  ret
  67              	
  68              	draw_key:
  69 097c 55       	  push %ebp
  70 097d 89E5     	  mov %esp, %ebp
  71              	
  72 097f 60       	  pusha
  73              	
  74 0980 8B5508   	  mov 0x8(%ebp), %edx
  75 0983 8B7D0C   	  mov 0xc(%ebp), %edi
  76 0986 8B7510   	  mov 0x10(%ebp), %esi
  77              	
  78 0989 8B9E0000 	  mov ring_buff.rp(%esi), %ebx
  78      0000
  79 098f 8DB60800 	  lea ring_buff.item(%esi), %esi
  79      0000
  80 0995 B9100000 	  mov $RING_ITEM_SIZE, %ecx
  80      00
  81              	
  82              	.draw_key10L:
  83              	  
  84 099a 4B       	  dec %ebx
  85 099b 83E30F   	  and $RING_INDEX_MASK, %ebx
  86 099e 8A041E   	  mov (%esi, %ebx), %al
  87              	
  88              	
  89              	
  90 09a1 6A04     	  push $0b0100
  91 09a3 6A10     	  push $0x10
  92 09a5 6A02     	  push $0x2
  93 09a7 68000000 	  push $.tmp
  93      00
  94 09ac 50       	  push %eax
  95 09ad E8B4FBFF 	  call itoa
  95      FF
  96 09b2 6683C414 	  add $0x14, %sp
  97              	
  98 09b6 68000000 	  push $.tmp
  98      00
  99 09bb 6A02     	  push $0x02
 100 09bd 57       	  push %edi
 101 09be 52       	  push %edx
 102 09bf E804F9FF 	  call draw_str
 102      FF
 103 09c4 6683C410 	  add $0x10, %sp
 104              	
GAS LISTING kernel.s 			page 31


 105 09c8 83C203   	  add $0x3, %edx
 106 09cb E2CD     	  loop .draw_key10L
 107              	
 108              	.draw_key_10E:
 109              	
 110 09cd 61       	  popa
 111              	
 112 09ce 89EC     	  mov %ebp, %esp
 113 09d0 5D       	  pop %ebp
 114              	
 115 09d1 C3       	  ret
 116              	
 117 09d2 5F5F2000 	.tmp: .string "__ "
 118              	
 119              	.section .data
 120              	
 121              	ring_buff: .struct 0
 122              	ring_buff.rp: .struct ring_buff.rp + 4
 123              	ring_buff.wp: .struct ring_buff.wp + 4
 124              	ring_buff.item: .struct ring_buff.item + RING_ITEM_SIZE
 125              	ring_buff.end:
 126              	
 127              	#.set ring_buff.size, 0x4
 128              	.set ring_buff.size, ring_buff.end - ring_buff.rp
 129              	
 130              	.section .text
 108              	
 109 09d6 00000000 	.fill KERNEL_SIZE - (. - kernel), 0x1, 0x0
 109      00000000 
 109      00000000 
 109      00000000 
 109      00000000 
GAS LISTING kernel.s 			page 32


DEFINED SYMBOLS
          ./define.s:1      *ABS*:0000000000007c00 BOOT_LOAD
          ./define.s:2      *ABS*:0000000000002000 BOOT_SIZE
          ./define.s:3      *ABS*:0000000000000200 SECT_SIZE
          ./define.s:4      *ABS*:0000000000000010 BOOT_SECT
          ./define.s:5      *ABS*:0000000000009c00 BOOT_END
          ./define.s:6      *ABS*:0000000000000010 KERNEL_SECT
          ./define.s:7      *ABS*:0000000000002000 KERNEL_SIZE
          ./define.s:8      *ABS*:00000000000a0000 VRAM
          ./define.s:9      *ABS*:0000000000101000 KERNEL_LOAD
          ./define.s:10     *ABS*:0000000000100000 VECT_BASE
          ./define.s:12     *ABS*:0000000000000010 RING_ITEM_SIZE
          ./define.s:13     *ABS*:000000000000000f RING_INDEX_MASK
            kernel.s:8      .text:0000000000000000 kernel
            kernel.s:87     .text:0000000000000100 FONT_ADR
../modules/protect/interrupt.s:5      .text:000000000000073a init_int
../modules/protect/pic.s:1      .text:00000000000006c7 init_pic
../modules/protect/interrupt.s:129    .text:00000000000008a2 int_zero_div
../modules/protect/int_keyboard.s:1      .text:00000000000008c1 int_keyboard
../modules/protect/int_rtc.s:23     .text:0000000000000706 int_rtc
../modules/protect/int_rtc.s:5      .text:00000000000006f2 rtc_int_en
../modules/protect/draw_font.s:9      .text:0000000000000283 draw_font
../modules/protect/draw_color_bar.s:9      .text:0000000000000311 draw_color_bar
../modules/protect/draw_str.s:10     .text:00000000000002c8 draw_str
            kernel.s:88     .text:0000000000000104 RTC_TIME
../modules/protect/draw_time.s:12     .text:0000000000000631 draw_time
            kernel.s:89     .text:0000000000000108 .int_key
../modules/protect/int_keyboard.s:26     .text:00000000000008e8 _KEY_BUFF
../modules/protect/ring_buff.s:1      .text:0000000000000900 ring_rd
../modules/protect/ring_buff.s:68     .text:000000000000097c draw_key
../modules/protect/vga.s:7      .text:000000000000010c vga_set_read_plane
../modules/protect/vga.s:36     .text:0000000000000125 vga_set_write_plane
../modules/protect/vga.s:66     .text:000000000000013e vram_font_copy
../modules/protect/vga.s:151    .text:0000000000000191 vram_bit_copy
../modules/protect/draw_char.s:13     .text:00000000000001bf draw_char
../modules/protect/draw_pixel.s:10     .text:000000000000038b draw_pixel
../modules/protect/draw_line.s:11     .text:000000000000044e draw_line
../modules/protect/draw_rect.s:12     .text:0000000000000500 draw_rect
../modules/protect/itoa.s:11     .text:0000000000000566 itoa
../modules/protect/itoa.s:99     .text:00000000000005df ascii_table
../modules/protect/rtc.s:9      .text:00000000000005f0 rtc_get_time
../modules/protect/draw_time.s:74     .text:00000000000006b6 .last
../modules/protect/draw_time.s:77     .text:00000000000006c4 .sec
../modules/protect/draw_time.s:76     .text:00000000000006c1 .min
../modules/protect/draw_time.s:75     .text:00000000000006be .hour
../modules/protect/draw_time.s:73     .text:00000000000006ae .temp
../modules/protect/interrupt.s:2      .text:0000000000000734 IDTR
../modules/protect/interrupt.s:120    .text:0000000000000884 int_default
../modules/protect/interrupt.s:18     .text:0000000000000755 .10L
../modules/protect/interrupt.s:34     .text:000000000000076b int_stop
../modules/protect/interrupt.s:112    .text:0000000000000847 .p1
../modules/protect/interrupt.s:114    .text:0000000000000858 .p2
../modules/protect/interrupt.s:116    .text:0000000000000869 .p3
../modules/protect/interrupt.s:118    .text:000000000000087a .p4
../modules/protect/interrupt.s:111    .text:0000000000000840 .s1
../modules/protect/interrupt.s:113    .text:0000000000000851 .s2
../modules/protect/interrupt.s:115    .text:0000000000000862 .s3
GAS LISTING kernel.s 			page 33


../modules/protect/interrupt.s:117    .text:0000000000000873 .s4
../modules/protect/interrupt.s:127    .text:0000000000000891 .int_default_s0
../modules/protect/interrupt.s:137    .text:00000000000008af .int_zero_div
../modules/protect/ring_buff.s:35     .text:000000000000093e ring_wr
                            *ABS*:0000000000000018 ring_buff.size
                            *ABS*:0000000000000000 ring_buff.rp
                            *ABS*:0000000000000004 ring_buff.wp
../modules/protect/ring_buff.s:24     .text:0000000000000937 .10E
                            *ABS*:0000000000000008 ring_buff.item
../modules/protect/ring_buff.s:57     .text:0000000000000975 .ringwr_10E
../modules/protect/ring_buff.s:82     .text:000000000000099a .draw_key10L
../modules/protect/ring_buff.s:117    .text:00000000000009d2 .tmp
../modules/protect/ring_buff.s:108    .text:00000000000009cd .draw_key_10E
../modules/protect/ring_buff.s:121    .data:0000000000000000 ring_buff
                            *ABS*:0000000000000018 ring_buff.end

NO UNDEFINED SYMBOLS
