GAS LISTING kernel.s 			page 1


   1              	.include "./define.s"
   1              	.set BOOT_LOAD, 0x7C00
   2              	.set BOOT_SIZE, 0x2000 #(1024 * 8)
   3              	.set SECT_SIZE, 512
   4              	.set BOOT_SECT, 0x10 #(.Lboot_BOOT_SIZE / .Lboot_SECT_SIZE)
   5              	.set BOOT_END, 0x9C00
   6              	.set KERNEL_SECT, 0x10 #(.Lboot_KERNEL_SIZE / .Lboot_SECT_SIZE)
   7              	.set KERNEL_SIZE, 8192
   8              	.set VRAM, 0x000A0000
   9              	.set KERNEL_LOAD, 0x00101000
  10              	.set VECT_BASE, 0x00100000
  11              	
  12              	.set RING_ITEM_SIZE, (1 << 4)
  13              	.set RING_INDEX_MASK, (RING_ITEM_SIZE - 1)
  14              	
  15              	.set STACK_BASE, 0x00103000
  16              	.set STACK_SIZE, 1024
  17              	.set SP_TASK_0, STACK_BASE + (STACK_SIZE * 1)
  18              	.set SP_TASK_1, STACK_BASE + (STACK_SIZE * 2)
   2              	.include "./macro.s"
   1              	.macro set_vect interruptNum, funcAddr
   2              	  push %eax
   3              	  push %edi
   4              	  mov $VECT_BASE + (\interruptNum * 8), %edi
   5              	  mov \funcAddr, %eax
   6              	
   7              	  mov %ax, (%edi)
   8              	  shr $0x10, %eax
   9              	  mov %ax, 0x6(%edi)
  10              	
  11              	  pop %edi
  12              	  pop %eax
  13              	.endm
  14              	
  15              	.macro outp port, val
  16              	  mov \val, %al
  17              	  out %al, \port
  18              	.endm
  19              	
  20              	.macro set_desc1 descriptoraddr, baseaddr
  21              	  push %eax
  22              	  push %edi
  23              	
  24              	  mov \descriptoraddr, %edi
  25              	  mov \baseaddr, %eax
  26              	
  27              	  mov %ax, 0x2(%edi)
  28              	  shr $0x10, %eax
  29              	  mov %al, 0x4(%edi)
  30              	  mov %ah, 0x7(%edi)
  31              	
  32              	  pop %edi
  33              	  pop %eax
  34              	.endm
  35              	
  36              	
  37              	.macro set_desc2 descriptoraddr, baseaddr, limit
GAS LISTING kernel.s 			page 2


  38              	  push %eax
  39              	  push %edi
  40              	
  41              	  mov \descriptoraddr, %edi
  42              	  mov \baseaddr, %eax
  43              	  movw \limit, (%edi)
  44              	
  45              	  mov %ax, 0x2(%edi)
  46              	  shr $0x10, %eax
  47              	  mov %al, 0x4(%edi)
  48              	  mov %ah, 0x7(%edi)
  49              	
  50              	  pop %edi
  51              	  pop %eax
  52              	.endm
   3              	
   4              	.code32
   5              	.global kernel
   6              	
   7              	
   8              	kernel:
   9              	  
  10              	  
  11 0000 BE007E00 	  mov $(BOOT_LOAD + SECT_SIZE), %esi
  11      00
  12 0005 0FB706   	  movzxw (%esi), %eax
  13 0008 0FB75E02 	  movzxw 0x2(%esi), %ebx # segment
  14 000c C1E004   	  shl $0x4, %eax # offset
  15 000f 01D8     	  add %ebx, %eax
  16 0011 A3000000 	  mov %eax, (FONT_ADR)
  16      00
  17              	
  18              	
  19 0016 5057BF00 	  set_desc1 $GDT.tss_0, $TSS_0
  19      000000B8 
  19      00000000 
  19      66894702 
  19      C1E81088 
  20 0031 5057BF00 	  set_desc1 $GDT.tss_1, $TSS_1
  20      000000B8 
  20      00000000 
  20      66894702 
  20      C1E81088 
  21 004c 5057BF00 	  set_desc2 $GDT.ldt, $LDT, $LDT_LIMIT
  21      000000B8 
  21      00000000 
  21      66C70727 
  21      00668947 
  22              	
  23 006c 0F011500 	  lgdt (GDTR)
  23      000000
  24              	
  25 0073 BC003410 	  mov $SP_TASK_0, %esp
  25      00
  26              	
  27 0078 66B82000 	  mov $SS_TASK_0, %ax
  28 007c 0F00D8   	  ltr %ax
GAS LISTING kernel.s 			page 3


  29              	
  30 007f E8B20800 	  call init_int
  30      00
  31 0084 E83A0800 	  call init_pic
  31      00
  32              	
  33 0089 5057BF00 	  set_vect 0x00, $int_zero_div
  33      001000B8 
  33      00000000 
  33      668907C1 
  33      E8106689 
  34 00a1 5057BF00 	  set_vect 0x20, $int_timer
  34      011000B8 
  34      00000000 
  34      668907C1 
  34      E8106689 
  35 00b9 5057BF08 	  set_vect 0x21, $int_keyboard
  35      011000B8 
  35      00000000 
  35      668907C1 
  35      E8106689 
  36 00d1 5057BF40 	  set_vect 0x28, $int_rtc
  36      011000B8 
  36      00000000 
  36      668907C1 
  36      E8106689 
  37              	
  38 00e9 6A10     	  push $0x10
  39 00eb E8FE0700 	  call rtc_int_en
  39      00
  40 00f0 83C404   	  add $0x4, %esp
  41 00f3 E8DA0A00 	  call int_en_timer0
  41      00
  42              	
  43 00f8 B0F8E621 	  outp $0x21, $0b11111000# enable slavePIC/KBC/timer
  44              	  #outp $0x21, $0b11111011
  45              	  #outp $0x21, $0b11111001
  46 00fc B0FEE6A1 	  outp $0xA1, $0b11111110 # enable RTC
  47              	
  48 0100 FB       	  sti
  49              	
  50              	  
  51 0101 6A0D     	  push $13
  52 0103 6A3F     	  push $63
  53 0105 E8750300 	  call draw_font
  53      00
  54 010a 6683C408 	  add $0x8, %sp 
  55              	
  56              	
  57              	
  58 010e 6A04     	  push $0x4
  59 0110 6A3F     	  push $63
  60 0112 E8F60300 	  call draw_color_bar
  60      00
  61 0117 6683C408 	  add $0x8, %sp
  62              	
  63              	
GAS LISTING kernel.s 			page 4


  64 011b 68000000 	  push $.Lkernel_s0
  64      00
  65 0120 680F0100 	  push $0x010F
  65      00
  66 0125 6A0E     	  push $14
  67 0127 6A19     	  push $0x19
  68 0129 E8960300 	  call draw_str
  68      00
  69 012e 6683C410 	  add $0x10, %sp
  70              	
  71              	  #call SS_TASK_1, $0x0
  72 0132 9A000000 	  call $0x28, $0x0
  72      002800
  73              	
  74              	.Lkernel_10L:
  75              	
  76              	
  77 0139 A1000000 	  mov (RTC_TIME), %eax
  77      00
  78              	
  79 013e 50       	  push %eax
  80 013f 68000700 	  push $0x0700
  80      00
  81 0144 6A00     	  push $0x0
  82 0146 6A48     	  push $72
  83 0148 E8E00600 	  call draw_time
  83      00
  84 014d 6683C410 	  add $0x10, %sp
  85              	
  86 0151 E88B0A00 	  call draw_rotation_bar
  86      00
  87              	
  88 0156 68000000 	  push $.int_key
  88      00
  89 015b 68000000 	  push $_KEY_BUFF
  89      00
  90 0160 E8970900 	  call ring_rd
  90      00
  91 0165 6683C408 	  add $0x8, %sp
  92 0169 83F800   	  cmp $0x0, %eax
  93 016c 7412     	  je .Lkernel_10E
  94              	
  95 016e 68000000 	  push $_KEY_BUFF
  95      00
  96 0173 6A1D     	  push $29
  97 0175 6A02     	  push $2
  98 0177 E8FC0900 	  call draw_key
  98      00
  99 017c 6683C40C 	  add $0xc, %sp
 100              	
 101              	.Lkernel_10E:
 102 0180 EBB7     	  jmp .Lkernel_10L 
 103              	
 104 0182 48656C6C 	.Lkernel_s0: .string "Hello, kernel!"
 104      6F2C206B 
 104      65726E65 
 104      6C2100
GAS LISTING kernel.s 			page 5


 105              	
 106 0191 0F1F00   	.align 4
 107 0194 00000000 	FONT_ADR: .long 0x0
 108 0198 00000000 	RTC_TIME: .long 0x0
 109 019c 00000000 	.int_key: .long 0x0
 110              	
 111              	
 112              	.include "descriptor.s"
   1              	
   2              	# initialize task 0
   3              	TSS_0:
   4 01a0 00000000 	TSS_0.link: .long 0x0
   5 01a4 00321000 	TSS_0.esp0: .long SP_TASK_0 - 512
   6 01a8 10000000 	TSS_0.ss0: .long DS_KERNEL
   7 01ac 00000000 	TSS_0.esp1: .long 0x0
   8 01b0 00000000 	TSS_0.ss1: .long 0x0
   9 01b4 00000000 	TSS_0.esp2: .long 0x0
  10 01b8 00000000 	TSS_0.ss2: .long 0x0
  11 01bc 00000000 	TSS_0.cr3: .long 0x0
  12 01c0 00000000 	TSS_0.eip: .long 0x0
  13 01c4 00000000 	TSS_0.eflags: .long 0x0
  14 01c8 00000000 	TSS_0.eax: .long 0x0
  15 01cc 00000000 	TSS_0.ecx: .long 0x0
  16 01d0 00000000 	TSS_0.edx: .long 0x0
  17 01d4 00000000 	TSS_0.ebx: .long 0x0
  18 01d8 00000000 	TSS_0.esp: .long 0x0
  19 01dc 00000000 	TSS_0.ebp: .long 0x0
  20 01e0 00000000 	TSS_0.esi: .long 0x0
  21 01e4 00000000 	TSS_0.edi: .long 0x0
  22 01e8 00000000 	TSS_0.es: .long 0x0
  23 01ec 00000000 	TSS_0.cs: .long 0x0
  24 01f0 00000000 	TSS_0.ss: .long 0x0
  25 01f4 00000000 	TSS_0.ds: .long 0x0
  26 01f8 00000000 	TSS_0.fs: .long 0x0
  27 01fc 00000000 	TSS_0.gs: .long 0x0
  28 0200 00000000 	TSS_0.ldt: .long 0x0
  29 0204 00000000 	TSS_0.io: .long 0x0
  30              	
  31              	
  32              	
  33              	TSS_1:
  34 0208 00000000 	TSS_1.link: .long 0x0
  35 020c 00361000 	TSS_1.esp0: .long SP_TASK_1 - 512
  36 0210 10000000 	TSS_1.ss0: .long DS_KERNEL
  37 0214 00000000 	TSS_1.esp1: .long 0x0
  38 0218 00000000 	TSS_1.ss1: .long 0x0
  39 021c 00000000 	TSS_1.esp2: .long 0x0
  40 0220 00000000 	TSS_1.ss2: .long 0x0
  41 0224 00000000 	TSS_1.cr3: .long 0x0
  42 0228 00000000 	TSS_1.eip: .long task_1
  43 022c 02020000 	TSS_1.eflags: .long 0x0202
  44 0230 00000000 	TSS_1.eax: .long 0x0
  45 0234 00000000 	TSS_1.ecx: .long 0x0
  46 0238 00000000 	TSS_1.edx: .long 0x0
  47 023c 00000000 	TSS_1.ebx: .long 0x0
  48 0240 00381000 	TSS_1.esp: .long SP_TASK_1
  49 0244 00000000 	TSS_1.ebp: .long 0x0
GAS LISTING kernel.s 			page 6


  50 0248 00000000 	TSS_1.esi: .long 0x0
  51 024c 00000000 	TSS_1.edi: .long 0x0
  52 0250 24000000 	TSS_1.es: .long DS_TASK_1
  53 0254 1C000000 	TSS_1.cs: .long CS_TASK_1
  54 0258 24000000 	TSS_1.ss: .long DS_TASK_1
  55 025c 24000000 	TSS_1.ds: .long DS_TASK_1
  56 0260 24000000 	TSS_1.fs: .long DS_TASK_1
  57 0264 24000000 	TSS_1.gs: .long DS_TASK_1
  58 0268 18000000 	TSS_1.ldt: .long SS_LDT
  59 026c 00000000 	TSS_1.io: .long 0x0
  60              	
  61              	
  62              	
  63 0270 00000000 	GDT: .quad 0x0000000000000000
  63      00000000 
  64 0278 FFFF0000 	GDT.cs_kernel: .quad 0x00CF9A000000FFFF # CODE 4G
  64      009ACF00 
  65 0280 FFFF0000 	GDT.ds_kernel: .quad 0x00CF92000000FFFF # DATA 4G
  65      0092CF00 
  66 0288 00000000 	GDT.ldt: .quad 0x0000820000000000
  66      00820000 
  67 0290 67000000 	GDT.tss_0: .quad 0x0000890000000067
  67      00890000 
  68 0298 67000000 	GDT.tss_1: .quad 0x0000890000000067
  68      00890000 
  69              	GDT.GDT_end:
  70              	
  71              	.set CS_KERNEL, GDT.cs_kernel - GDT
  72              	.set DS_KERNEL, GDT.ds_kernel - GDT
  73              	.set SS_LDT, GDT.ldt - GDT
  74              	.set SS_TASK_0, GDT.tss_0 - GDT
  75              	.set SS_TASK_1, GDT.tss_1 - GDT
  76              	
  77 02a0 2F00     	GDTR: .word GDT.GDT_end - GDT - 1
  78 02a2 00000000 	.long GDT
  79              	
  80              	
  81              	
  82 02a6 00000000 	LDT: .quad 0x0000000000000000
  82      00000000 
  83 02ae FFFF0000 	LDT.cs_task_0: .quad 0x00CF9A000000FFFF # CODE 4G
  83      009ACF00 
  84 02b6 FFFF0000 	LDT.ds_task_0: .quad 0x00CF92000000FFFF # DATA 4G
  84      0092CF00 
  85 02be FFFF0000 	LDT.cs_task_1: .quad 0x00CF9A000000FFFF # CODE 4G
  85      009ACF00 
  86 02c6 FFFF0000 	LDT.ds_task_1: .quad 0x00CF92000000FFFF # DATA 4G
  86      0092CF00 
  87              	LDT.LDT_end:
  88              	
  89              	.set CS_TASK_0, (LDT.cs_task_0 - LDT) | 4
  90              	.set DS_TASK_0, (LDT.ds_task_0 - LDT) | 4
  91              	.set CS_TASK_1, (LDT.cs_task_1 - LDT) | 4
  92              	.set DS_TASK_1, (LDT.ds_task_1 - LDT) | 4
  93              	
  94              	.set LDT_LIMIT, LDT.LDT_end - LDT - 1
  95              	
GAS LISTING kernel.s 			page 7


 113              	.include "modules/int_timer.s"
   1              	int_timer:
   2 02ce 60       	  pusha
   3 02cf 1E       	  push %ds
   4 02d0 06       	  push %es
   5              	  
   6 02d1 66B81000 	  mov $0x0010, %ax
   7 02d5 8ED8     	  mov %ax, %ds
   8 02d7 8EC0     	  mov %ax, %es
   9              	
  10 02d9 FF050000 	  incl (TIMER_COUNT)
  10      0000
  11              	
  12 02df B020E620 	  outp $0x20, $0x20
  13              	
  14 02e3 07       	  pop %es
  15 02e4 1F       	  pop %ds
  16 02e5 61       	  popa
  17              	
  18 02e6 CF       	  iret
  19              	
  20 02e7 90       	.align 0x4
  21 02e8 00000000 	TIMER_COUNT: .long 0x0
 114              	.include "tasks/task_1.s"
   1              	task_1:
   2 02ec 68000000 	  push $.s0
   2      00
   3 02f1 6A07     	  push $0x07
   4 02f3 6A00     	  push $0x0
   5 02f5 6A3F     	  push $63
   6 02f7 E8C80100 	  call draw_str
   6      00
   7 02fc 6683C410 	  add $0x10, %sp
   8              	
   9 0300 CF       	  iret
  10              	
  11 0301 5461736B 	.s0: .string "Task-1"
  11      2D3100
 115              	.include "../modules/protect/vga.s"
   1              	/*
   2              	 *  vga_set_read_plane(plane)
   3              	 *  arguments:
   4              	 *    plane:  reading plane
   5              	 *  return: void
   6              	 */
   7              	vga_set_read_plane:
   8 0308 55       	  push %ebp
   9 0309 89E5     	  mov %esp, %ebp
  10              	
  11 030b 50       	  push %eax
  12 030c 52       	  push %edx
  13              	
  14 030d 8A6508   	  mov 0x8(%ebp), %ah
  15 0310 80E403   	  and $0x03, %ah
  16 0313 B004     	  mov $0x04, %al
  17 0315 66BACE03 	  mov $0x03CE, %dx
  18 0319 66EF     	  out %ax, %dx
GAS LISTING kernel.s 			page 8


  19              	
  20 031b 5A       	  pop %edx
  21 031c 58       	  pop %eax
  22              	
  23 031d 89EC     	  mov %ebp, %esp
  24 031f 5D       	  pop %ebp
  25              	
  26 0320 C3       	  ret
  27              	
  28              	
  29              	/*
  30              	 * vga_set_write_plane(plane)
  31              	 * arguments:
  32              	 *  plane:  writing plane
  33              	 * return: void
  34              	 */
  35              	
  36              	vga_set_write_plane:
  37 0321 55       	  push %ebp
  38 0322 89E5     	  mov %esp, %ebp
  39              	
  40 0324 50       	  push %eax
  41 0325 52       	  push %edx
  42              	
  43 0326 8A6508   	  mov 0x8(%ebp), %ah
  44 0329 80E40F   	  and $0xF, %ah
  45 032c B002     	  mov $0x2, %al
  46 032e 66BAC403 	  mov $0x03C4, %dx
  47 0332 66EF     	  out %ax, %dx
  48              	  
  49 0334 5A       	  pop %edx
  50 0335 58       	  pop %eax
  51              	
  52 0336 89EC     	  mov %ebp, %esp
  53 0338 5D       	  pop %ebp
  54 0339 C3       	  ret
  55              	
  56              	/*
  57              	 * vram_font_copy(font, vram, plane, color)
  58              	 * arguments:
  59              	 *  font: font addr
  60              	 *  vram: vram addr
  61              	 *  plane:  output plane
  62              	 *  color:  drawing color
  63              	 * reutnr: void
  64              	 */
  65              	
  66              	vram_font_copy:
  67 033a 55       	  push %ebp
  68 033b 89E5     	  mov %esp, %ebp
  69              	
  70 033d 50       	  push %eax
  71 033e 53       	  push %ebx
  72 033f 51       	  push %ecx
  73 0340 52       	  push %edx
  74 0341 56       	  push %esi
  75 0342 57       	  push %edi
GAS LISTING kernel.s 			page 9


  76              	
  77 0343 8B7508   	  mov 0x8(%ebp), %esi # font
  78 0346 8B7D0C   	  mov 0xc(%ebp), %edi # vram
  79 0349 0FB64510 	  movzxb 0x10(%ebp), %eax # plane
  80 034d 0FB75D14 	  movzxw 0x14(%ebp), %ebx # color
  81              	
  82 0351 84C7     	  test %al, %bh
  83 0353 0F94C6   	  setz %dh
  84 0356 FECE     	  dec %dh
  85              	
  86 0358 84C3     	  test %al, %bl
  87 035a 0F94C2   	  setz %dl
  88 035d FECA     	  dec %dl
  89              	
  90              	  # copy 16 dot's font
  91 035f FC       	  cld
  92              	
  93 0360 B9100000 	  mov $0x10, %ecx
  93      00
  94              	.Lvram_font_copy_10L:
  95              	  
  96              	  # create font mask
  97 0365 AC       	  lodsb
  98 0366 88C4     	  mov %al, %ah
  99 0368 F6D4     	  not %ah
 100              	  
 101              	  # front color(font color)
 102 036a 20D0     	  and %dl, %al
 103              	
 104              	  # background color
 105 036c F7C31000 	  test $0x0010, %ebx
 105      0000
 106 0372 7404     	  jz .Lvram_font_copy_11F
 107 0374 2227     	  and (%edi), %ah
 108 0376 EB02     	  jmp .Lvram_font_copy_11E
 109              	
 110              	.Lvram_font_copy_11F:
 111 0378 20F4     	  and %dh, %ah
 112              	
 113              	.Lvram_font_copy_11E:
 114              	
 115              	  # merge front and background color
 116 037a 08E0     	  or %ah, %al
 117              	
 118 037c 8807     	  mov %al, (%edi)
 119              	  
 120 037e 83C750   	  add $80, %edi
 121 0381 E2E2     	  loop .Lvram_font_copy_10L
 122              	
 123              	.Lvram_font_copy_10E:
 124              	
 125 0383 5F       	  pop %edi
 126 0384 5E       	  pop %esi
 127 0385 5A       	  pop %edx
 128 0386 59       	  pop %ecx
 129 0387 5B       	  pop %ebx
 130 0388 58       	  pop %eax
GAS LISTING kernel.s 			page 10


 131              	
 132 0389 89EC     	  mov %ebp, %esp
 133 038b 5D       	  pop %ebp
 134              	
 135 038c C3       	  ret
 136              	
 137              	
 138              	
 139              	
 140              	
 141              	/*
 142              	 *  vram_bit_copy(bit, vram, plane, color)
 143              	 *  arguments:
 144              	 *    bit:  bit pattern
 145              	 *    vram: vram addr
 146              	 *    plane:
 147              	 *    color:
 148              	 *
 149              	 */
 150              	
 151              	vram_bit_copy:
 152 038d 55       	  push %ebp
 153 038e 89E5     	  mov %esp, %ebp
 154              	
 155 0390 50       	  push %eax
 156 0391 53       	  push %ebx
 157 0392 57       	  push %edi
 158              	
 159 0393 8B7D0C   	  mov 0xc(%ebp), %edi # vram addr
 160 0396 0FB64510 	  movzxb 0x10(%ebp), %eax # plane
 161 039a 0FB75D14 	  movzxw 0x14(%ebp), %ebx # color
 162              	
 163 039e 84C3     	  test %al, %bl
 164 03a0 0F94C3   	  setz %bl
 165 03a3 FECB     	  dec %bl
 166              	
 167 03a5 8A4508   	  mov 0x8(%ebp), %al
 168 03a8 88C4     	  mov %al, %ah
 169 03aa F6D4     	  not %ah
 170              	
 171 03ac 2227     	  and (%edi), %ah
 172 03ae 20D8     	  and %bl, %al
 173 03b0 08E0     	  or %ah, %al
 174              	  
 175 03b2 8807     	  mov %al, (%edi)
 176              	
 177 03b4 5F       	  pop %edi
 178 03b5 5B       	  pop %ebx
 179 03b6 58       	  pop %eax
 180              	
 181 03b7 89EC     	  mov %ebp, %esp
 182 03b9 5D       	  pop %ebp
 183              	  
 184 03ba C3       	  ret
 116              	.include "../modules/protect/draw_char.s"
   1              	/*
   2              	 *  draw_char(col, row, color, ch)
GAS LISTING kernel.s 			page 11


   3              	 *  arguments:
   4              	 *    col: 0 ~ 79
   5              	 *    row: 0 ~ 29
   6              	 *    color: drawing color
   7              	 *    ch : char
   8              	 *  return : null
   9              	 */
  10              	
  11              	.include "./define.s"
  12              	
  13              	draw_char:
  14 03bb 55       	  push %ebp
  15 03bc 89E5     	  mov %esp, %ebp
  16              	
  17 03be 50       	  push %eax
  18 03bf 53       	  push %ebx
  19 03c0 51       	  push %ecx
  20 03c1 52       	  push %edx
  21 03c2 56       	  push %esi
  22 03c3 57       	  push %edi
  23              	
  24              	  # get font addr
  25 03c4 0FB67514 	  movzxb 0x14(%ebp), %esi # font addr
  26 03c8 C1E604   	  shl $0x4, %esi
  27 03cb 03350000 	  add (FONT_ADR), %esi
  27      0000
  28              	
  29 03d1 8B7D0C   	  mov 0xc(%ebp), %edi # row
  30 03d4 C1E708   	  shl $0x8, %edi
  31 03d7 8DBCBF00 	  lea VRAM(%edi, %edi, 0x4), %edi
  31      000A00
  32 03de 037D08   	  add 0x8(%ebp), %edi # col
  33              	  
  34              	  # put char
  35 03e1 0FB75D10 	  movzxw 0x10(%ebp), %ebx # color
  36              	 
  37 03e5 6A03     	  push $0x03
  38 03e7 E81CFFFF 	  call vga_set_read_plane
  38      FF
  39 03ec 6683C404 	  add $0x4, %sp
  40              	  
  41 03f0 6A08     	  push $0x08
  42 03f2 E82AFFFF 	  call vga_set_write_plane
  42      FF
  43 03f7 6683C404 	  add $0x4, %sp
  44              	
  45 03fb 53       	  push %ebx
  46 03fc 6A08     	  push $0x08
  47 03fe 57       	  push %edi
  48 03ff 56       	  push %esi
  49 0400 E835FFFF 	  call vram_font_copy
  49      FF
  50 0405 6683C410 	  add $0x10, %sp
  51              	
  52              	  
  53 0409 6A02     	  push $0x02
  54 040b E8F8FEFF 	  call vga_set_read_plane
GAS LISTING kernel.s 			page 12


  54      FF
  55 0410 6683C404 	  add $0x4, %sp
  56              	  
  57 0414 6A04     	  push $0x04
  58 0416 E806FFFF 	  call vga_set_write_plane
  58      FF
  59 041b 6683C404 	  add $0x4, %sp
  60              	
  61 041f 53       	  push %ebx
  62 0420 6A04     	  push $0x04
  63 0422 57       	  push %edi
  64 0423 56       	  push %esi
  65 0424 E811FFFF 	  call vram_font_copy
  65      FF
  66 0429 6683C410 	  add $0x10, %sp
  67              	
  68              	
  69 042d 6A01     	  push $0x01
  70 042f E8D4FEFF 	  call vga_set_read_plane
  70      FF
  71 0434 6683C404 	  add $0x4, %sp
  72              	  
  73 0438 6A02     	  push $0x02
  74 043a E8E2FEFF 	  call vga_set_write_plane
  74      FF
  75 043f 6683C404 	  add $0x4, %sp
  76              	
  77 0443 53       	  push %ebx
  78 0444 6A02     	  push $0x02
  79 0446 57       	  push %edi
  80 0447 56       	  push %esi
  81 0448 E8EDFEFF 	  call vram_font_copy
  81      FF
  82 044d 6683C410 	  add $0x10, %sp
  83              	
  84 0451 6A00     	  push $0x00
  85 0453 E8B0FEFF 	  call vga_set_read_plane
  85      FF
  86 0458 6683C404 	  add $0x4, %sp
  87              	  
  88 045c 6A01     	  push $0x01
  89 045e E8BEFEFF 	  call vga_set_write_plane
  89      FF
  90 0463 6683C404 	  add $0x4, %sp
  91              	
  92 0467 53       	  push %ebx
  93 0468 6A01     	  push $0x01
  94 046a 57       	  push %edi
  95 046b 56       	  push %esi
  96 046c E8C9FEFF 	  call vram_font_copy
  96      FF
  97 0471 6683C410 	  add $0x10, %sp
  98              	
  99 0475 5F       	  pop %edi
 100 0476 5E       	  pop %esi
 101 0477 5A       	  pop %edx
 102 0478 59       	  pop %ecx
GAS LISTING kernel.s 			page 13


 103 0479 5B       	  pop %ebx
 104 047a 58       	  pop %eax
 105              	
 106 047b 89EC     	  mov %ebp, %esp
 107 047d 5D       	  pop %ebp
 108              	
 109 047e C3       	  ret
 117              	.include "../modules/protect/draw_font.s"
   1              	/*
   2              	 *  draw_font(col, row)
   3              	 *  arguments:
   4              	 *    col:
   5              	 *    row
   6              	 *  return: null
   7              	 */
   8              	
   9              	draw_font:
  10 047f 55       	  push %ebp
  11 0480 89E5     	  mov %esp, %ebp
  12              	
  13 0482 50       	  push %eax
  14 0483 53       	  push %ebx
  15 0484 51       	  push %ecx
  16 0485 52       	  push %edx
  17 0486 56       	  push %esi
  18 0487 57       	  push %edi
  19              	
  20 0488 8B7508   	  mov 0x8(%ebp), %esi # col
  21 048b 8B7D0C   	  mov 0xc(%ebp), %edi # row
  22              	
  23 048e B9000000 	  mov $0x0, %ecx
  23      00
  24              	.Ldraw_font_10L:  
  25 0493 81F90001 	  cmp $0x100, %ecx
  25      0000
  26 0499 731F     	  jae .Ldraw_font_10E
  27              	
  28 049b 89C8     	  mov %ecx, %eax
  29 049d 83E00F   	  and $0x0F, %eax
  30 04a0 01F0     	  add %esi, %eax
  31              	
  32 04a2 89CB     	  mov %ecx, %ebx
  33 04a4 C1EB04   	  shr $0x4, %ebx
  34 04a7 01FB     	  add %edi, %ebx
  35              	
  36 04a9 51       	  push %ecx
  37 04aa 6A07     	  push $0x07
  38 04ac 53       	  push %ebx
  39 04ad 50       	  push %eax
  40 04ae E808FFFF 	  call draw_char
  40      FF
  41 04b3 6683C410 	  add $0x10, %sp
  42              	
  43 04b7 41       	  inc %ecx
  44 04b8 EBD9     	  jmp .Ldraw_font_10L
  45              	.Ldraw_font_10E:
  46              	
GAS LISTING kernel.s 			page 14


  47 04ba 5F       	  pop %edi
  48 04bb 5E       	  pop %esi
  49 04bc 5A       	  pop %edx
  50 04bd 59       	  pop %ecx
  51 04be 5B       	  pop %ebx
  52 04bf 58       	  pop %eax
  53              	
  54 04c0 89EC     	  mov %ebp, %esp
  55 04c2 5D       	  pop %ebp
  56              	
  57 04c3 C3       	  ret
 118              	.include "../modules/protect/draw_str.s"
   1              	/*
   2              	 *  draw_str(col, row, color, p)
   3              	 *  arguments:
   4              	 *    col
   5              	 *    row:
   6              	 *    color: drawing color
   7              	 *    str's addr
   8              	 */
   9              	
  10              	draw_str:
  11 04c4 55       	  push %ebp
  12 04c5 89E5     	  mov %esp, %ebp
  13              	
  14 04c7 50       	  push %eax
  15 04c8 53       	  push %ebx
  16 04c9 51       	  push %ecx
  17 04ca 52       	  push %edx
  18 04cb 56       	  push %esi
  19              	
  20 04cc 8B4D08   	  mov 0x8(%ebp), %ecx
  21 04cf 8B550C   	  mov 0xc(%ebp), %edx
  22 04d2 0FB75D10 	  movzxw 0x10(%ebp), %ebx
  23 04d6 8B7514   	  mov 0x14(%ebp), %esi
  24              	
  25 04d9 FC       	  cld
  26              	.Ldraw_str_10L:
  27              	
  28 04da AC       	  lodsb
  29 04db 3C00     	  cmp $0x0, %al
  30 04dd 7425     	  je .Ldraw_str_10E
  31              	
  32 04df 50       	  push %eax
  33 04e0 53       	  push %ebx
  34 04e1 52       	  push %edx
  35 04e2 51       	  push %ecx
  36 04e3 E8D3FEFF 	  call draw_char
  36      FF
  37 04e8 6683C410 	  add $0x10, %sp
  38              	
  39              	
  40              	
  41 04ec 41       	  inc %ecx
  42 04ed 83F950   	  cmp $80, %ecx
  43 04f0 7C10     	  jl .Ldraw_str_12E
  44 04f2 B9000000 	  mov $0, %ecx
GAS LISTING kernel.s 			page 15


  44      00
  45 04f7 42       	  inc %edx
  46 04f8 83FA1E   	  cmp $30, %edx
  47 04fb 7C05     	  jl .Ldraw_str_12E
  48 04fd BA000000 	  mov $0, %edx
  48      00
  49              	
  50              	.Ldraw_str_12E:
  51 0502 EBD6     	  jmp .Ldraw_str_10L
  52              	
  53              	.Ldraw_str_10E:
  54              	
  55 0504 5E       	  pop %esi
  56 0505 5A       	  pop %edx
  57 0506 59       	  pop %ecx
  58 0507 5B       	  pop %ebx
  59 0508 58       	  pop %eax
  60              	
  61 0509 89EC     	  mov %ebp, %esp
  62 050b 5D       	  pop %ebp
  63              	
  64 050c C3       	  ret
  65              	
 119              	.include "../modules/protect/draw_color_bar.s"
   1              	/*
   2              	 *  draw_color_bar(row, col)
   3              	 *  arguments:
   4              	 *    row:
   5              	 *    col:
   6              	 *  reuturn: void
   7              	 */
   8              	
   9              	draw_color_bar:
  10 050d 55       	  push %ebp
  11 050e 89E5     	  mov %esp, %ebp
  12              	
  13 0510 50       	  push %eax
  14 0511 53       	  push %ebx
  15 0512 51       	  push %ecx
  16 0513 52       	  push %edx
  17 0514 56       	  push %esi
  18 0515 57       	  push %edi
  19              	
  20 0516 8B7508   	  mov 0x8(%ebp), %esi #row
  21 0519 8B7D0C   	  mov 0xc(%ebp), %edi #col
  22              	
  23 051c B9000000 	  mov $0x0, %ecx
  23      00
  24              	.Ldraw_color_bar_10L:
  25 0521 83F910   	  cmp $0x10, %ecx
  26 0524 732E     	  jae .Ldraw_color_bar_10E
  27              	
  28 0526 89C8     	  mov %ecx, %eax
  29 0528 83E001   	  and $0x01, %eax
  30 052b C1E003   	  shl $0x3, %eax
  31 052e 01F0     	  add %esi, %eax
  32              	
GAS LISTING kernel.s 			page 16


  33 0530 89CB     	  mov %ecx, %ebx
  34 0532 D1EB     	  shr $0x1, %ebx
  35 0534 01FB     	  add %edi, %ebx
  36              	
  37 0536 89CA     	  mov %ecx, %edx
  38 0538 D1E2     	  shl $0x1, %edx
  39 053a 8B920000 	  mov .Ldraw_color_bar_t0(%edx), %edx
  39      0000
  40              	
  41 0540 68000000 	  push $.Ldraw_color_bar_s0
  41      00
  42 0545 52       	  push %edx
  43 0546 53       	  push %ebx
  44 0547 50       	  push %eax
  45 0548 E877FFFF 	  call draw_str
  45      FF
  46 054d 6683C410 	  add $0x10, %sp
  47              	
  48 0551 41       	  inc %ecx
  49 0552 EBCD     	  jmp .Ldraw_color_bar_10L
  50              	
  51              	.Ldraw_color_bar_10E:
  52              	  
  53 0554 5F       	  pop %edi
  54 0555 5E       	  pop %esi
  55 0556 5A       	  pop %edx
  56 0557 59       	  pop %ecx
  57 0558 5B       	  pop %ebx
  58 0559 58       	  pop %eax
  59              	
  60 055a 89EC     	  mov %ebp, %esp
  61 055c 5D       	  pop %ebp
  62              	
  63 055d C3       	  ret
  64              	
  65 055e 20202020 	.Ldraw_color_bar_s0: .string "        "
  65      20202020 
  65      00
  66              	
  67 0567 00000008 	.Ldraw_color_bar_t0: .word 0x0000, 0x0800 
  68 056b 00010009 	.word 0x0100, 0x0900
  69 056f 0002000A 	.word 0x0200, 0x0A00
  70 0573 0003000B 	.word 0x0300, 0x0B00
  71 0577 0004000C 	.word 0x0400, 0x0C00
  72 057b 0005000D 	.word 0x0500, 0x0D00
  73 057f 0006000E 	.word 0x0600, 0x0E00
  74 0583 0007000F 	.word 0x0700, 0x0F00
 120              	.include "../modules/protect/draw_pixel.s"
   1              	/*
   2              	 *  draw_pixel(X, Y, color)
   3              	 *  X:
   4              	 *  Y:
   5              	 *  color:
   6              	 *  return: void
   7              	 */
   8              	
   9              	
GAS LISTING kernel.s 			page 17


  10              	draw_pixel:
  11              	
  12 0587 55       	  push %ebp
  13 0588 89E5     	  mov %esp, %ebp
  14              	
  15 058a 50       	  push %eax
  16 058b 53       	  push %ebx
  17 058c 51       	  push %Ecx
  18 058d 57       	  push %edi
  19              	
  20 058e 8B7D0C   	  mov 0xc(%ebp), %edi # Y
  21 0591 C1E704   	  shl $0x4, %edi
  22 0594 8DBCBF00 	  lea VRAM(%edi, %edi, 0x4), %edi
  22      000A00
  23              	  
  24 059b 8B5D08   	  mov 0x8(%ebp), %ebx
  25 059e 89D9     	  mov %ebx, %ecx
  26 05a0 C1EB03   	  shr $0x3, %ebx
  27 05a3 01DF     	  add %ebx, %edi
  28              	
  29 05a5 83E107   	  and $0x7, %ecx
  30 05a8 BB800000 	  mov $0x80, %ebx
  30      00
  31 05ad D3EB     	  shr %cl, %ebx
  32              	
  33 05af 8B4D10   	  mov 0x10(%ebp), %ecx
  34              	
  35 05b2 6A03     	  push $0x03
  36 05b4 E84FFDFF 	  call vga_set_read_plane
  36      FF
  37 05b9 6683C404 	  add $0x04, %sp
  38              	
  39 05bd 6A08     	  push $0x08
  40 05bf E85DFDFF 	  call vga_set_write_plane
  40      FF
  41 05c4 6683C404 	  add $0x04, %sp
  42              	
  43 05c8 51       	  push %ecx
  44 05c9 6A08     	  push $0x08
  45 05cb 57       	  push %edi
  46 05cc 53       	  push %ebx
  47 05cd E8BBFDFF 	  call vram_bit_copy
  47      FF
  48 05d2 6683C410 	  add $0x10, %sp
  49              	
  50              	
  51 05d6 6A02     	  push $0x02
  52 05d8 E82BFDFF 	  call vga_set_read_plane
  52      FF
  53 05dd 6683C404 	  add $0x04, %sp
  54              	
  55 05e1 6A04     	  push $0x04
  56 05e3 E839FDFF 	  call vga_set_write_plane
  56      FF
  57 05e8 6683C404 	  add $0x04, %sp
  58              	
  59 05ec 51       	  push %ecx
GAS LISTING kernel.s 			page 18


  60 05ed 6A04     	  push $0x04
  61 05ef 57       	  push %edi
  62 05f0 53       	  push %ebx
  63 05f1 E897FDFF 	  call vram_bit_copy
  63      FF
  64 05f6 6683C410 	  add $0x10, %sp
  65              	
  66              	
  67 05fa 6A01     	  push $0x01
  68 05fc E807FDFF 	  call vga_set_read_plane
  68      FF
  69 0601 6683C404 	  add $0x04, %sp
  70              	
  71 0605 6A02     	  push $0x02
  72 0607 E815FDFF 	  call vga_set_write_plane
  72      FF
  73 060c 6683C404 	  add $0x04, %sp
  74              	
  75 0610 51       	  push %ecx
  76 0611 6A02     	  push $0x02
  77 0613 57       	  push %edi
  78 0614 53       	  push %ebx
  79 0615 E873FDFF 	  call vram_bit_copy
  79      FF
  80 061a 6683C410 	  add $0x10, %sp
  81              	
  82              	
  83              	
  84 061e 6A00     	  push $0x00
  85 0620 E8E3FCFF 	  call vga_set_read_plane
  85      FF
  86 0625 6683C404 	  add $0x04, %sp
  87              	
  88 0629 6A01     	  push $0x01
  89 062b E8F1FCFF 	  call vga_set_write_plane
  89      FF
  90 0630 6683C404 	  add $0x04, %sp
  91              	
  92 0634 51       	  push %ecx
  93 0635 6A01     	  push $0x01
  94 0637 57       	  push %edi
  95 0638 53       	  push %ebx
  96 0639 E84FFDFF 	  call vram_bit_copy
  96      FF
  97 063e 6683C410 	  add $0x10, %sp
  98              	
  99              	
 100 0642 5F       	  pop %edi
 101 0643 59       	  pop %ecx
 102 0644 5B       	  pop %ebx
 103 0645 58       	  pop %eax
 104              	
 105 0646 89EC     	  mov %ebp, %esp
 106 0648 5D       	  pop %ebp
 107              	
 108 0649 C3       	  ret
 121              	.include "../modules/protect/draw_line.s"
GAS LISTING kernel.s 			page 19


   1              	/*
   2              	 *  draw_line(X0, Y0, X1, Y1, color)
   3              	 *  X0: start point of x
   4              	 *  Y0: start point of y
   5              	 *  X1: end point of x
   6              	 *  Y1: end point of y
   7              	 *  color:  drawing color
   8              	 *  return: void
   9              	 */
  10              	
  11              	draw_line:
  12 064a 55       	  push %ebp
  13 064b 89E5     	  mov %esp, %ebp
  14              	
  15 064d 6A00     	  pushl $0
  16 064f 6A00     	  pushl $0
  17 0651 6A00     	  pushl $0
  18 0653 6A00     	  pushl $0
  19 0655 6A00     	  pushl $0
  20 0657 6A00     	  pushl $0
  21 0659 6A00     	  pushl $0
  22              	
  23 065b 50       	  push %eax
  24 065c 53       	  push %ebx
  25 065d 51       	  push %ecx
  26 065e 52       	  push %edx
  27 065f 56       	  push %esi
  28 0660 57       	  push %edi
  29              	
  30 0661 8B4508   	  mov 0x8(%ebp), %eax # X0
  31 0664 8B5D10   	  mov 0x10(%ebp), %ebx # X1
  32 0667 29C3     	  sub %eax, %ebx # X1 - X0
  33 0669 7D09     	  jge .Ldraw_line_10F
  34              	
  35 066b F7DB     	  neg %ebx
  36 066d BEFFFFFF 	  mov $-0x1, %esi
  36      FF
  37 0672 EB05     	  jmp .Ldraw_line_10E
  38              	
  39              	.Ldraw_line_10F:
  40              	
  41 0674 BE010000 	  mov $0x1, %esi
  41      00
  42              	
  43              	.Ldraw_line_10E:
  44              	  
  45 0679 8B4D0C   	  mov 0xc(%ebp), %ecx # Y0
  46 067c 8B5514   	  mov 0x14(%ebp), %edx # Y1
  47 067f 29CA     	  sub %ecx, %edx # Y1 - Y0
  48 0681 7D09     	  jge .Ldraw_line_20F
  49              	
  50 0683 F7DA     	  neg %edx
  51 0685 BFFFFFFF 	  mov $-0x1, %edi
  51      FF
  52 068a EB05     	  jmp .Ldraw_line_20E
  53              	
  54              	.Ldraw_line_20F:
GAS LISTING kernel.s 			page 20


  55              	  
  56 068c BF010000 	  mov $0x1, %edi
  56      00
  57              	
  58              	
  59              	.Ldraw_line_20E:
  60              	
  61 0691 8945F8   	  mov %eax, -0x8(%ebp)
  62 0694 895DF4   	  mov %ebx, -0xc(%ebp)
  63 0697 8975F0   	  mov %esi, -0x10(%ebp)
  64              	
  65 069a 894DEC   	  mov %ecx, -0x14(%ebp)
  66 069d 8955E8   	  mov %edx, -0x18(%ebp)
  67 06a0 897DE4   	  mov %edi, -0x1c(%ebp)
  68              	
  69 06a3 39D3     	  cmp %edx, %ebx
  70 06a5 7F08     	  jg .Ldraw_line_22F
  71              	
  72 06a7 8D75EC   	  lea -0x14(%ebp), %esi
  73 06aa 8D7DF8   	  lea -0x8(%ebp), %edi
  74              	
  75 06ad EB06     	  jmp .Ldraw_line_22E
  76              	
  77              	.Ldraw_line_22F:
  78              	
  79 06af 8D75F8   	  lea -0x8(%ebp), %esi
  80 06b2 8D7DEC   	  lea -0x14(%ebp), %edi
  81              	
  82              	
  83              	.Ldraw_line_22E:
  84 06b5 8B4EFC   	  mov -0x4(%esi), %ecx
  85 06b8 83F900   	  cmp $0x0, %ecx
  86 06bb 7505     	  jnz .Ldraw_line_30E
  87 06bd B9010000 	  mov $0x1, %ecx
  87      00
  88              	
  89              	
  90              	.Ldraw_line_30E:
  91              	  
  92              	
  93              	.Ldraw_line_50L:
  94              	  
  95 06c2 FF7518   	  pushl 0x18(%ebp)
  96 06c5 FF75EC   	  pushl -0x14(%ebp)
  97 06c8 FF75F8   	  pushl -0x8(%ebp)
  98 06cb E8B7FEFF 	  call draw_pixel
  98      FF
  99 06d0 6683C40C 	  add $0xc, %sp
 100              	
 101 06d4 8B46F8   	  mov -0x8(%esi), %eax
 102 06d7 0106     	  add %eax, (%esi)
 103              	
 104 06d9 8B45FC   	  mov -0x4(%ebp), %eax
 105 06dc 0347FC   	  add -0x4(%edi), %eax
 106 06df 8B5EFC   	  mov -0x4(%esi), %ebx
 107              	
 108 06e2 39D8     	  cmp %ebx, %eax
GAS LISTING kernel.s 			page 21


 109 06e4 7C07     	  jl .Ldraw_line_52E
 110 06e6 29D8     	  sub %ebx, %eax
 111              	
 112 06e8 8B5FF8   	  mov -0x8(%edi), %ebx
 113 06eb 011F     	  add %ebx, (%edi)
 114              	
 115              	.Ldraw_line_52E:
 116 06ed 8945FC   	  mov %eax, -0x4(%ebp)
 117 06f0 E2D0     	  loop .Ldraw_line_50L
 118              	
 119              	
 120              	.Ldraw_line_50E:
 121              	  
 122 06f2 5F       	  pop %edi
 123 06f3 5E       	  pop %esi
 124 06f4 5A       	  pop %edx
 125 06f5 59       	  pop %ecx
 126 06f6 5B       	  pop %ebx
 127 06f7 58       	  pop %eax
 128              	
 129 06f8 89EC     	  mov %ebp, %esp
 130 06fa 5D       	  pop %ebp
 131              	
 132 06fb C3       	  ret
 133              	
 134              	  
 135              	
 136              	  
 122              	.include "../modules/protect/draw_rect.s"
   1              	/*
   2              	 *  draw_rect(X0, Y0, X1, Y1, color)
   3              	 *  arguments:
   4              	 *    X0: starting x
   5              	 *    Y0: starting y
   6              	 *    X1: end of x
   7              	 *    Y1: end of y
   8              	 *    color: drawing color
   9              	 *  return: void
  10              	 */
  11              	
  12              	 draw_rect:
  13 06fc 55       	  push %ebp
  14 06fd 89E5     	  mov %esp, %ebp
  15              	
  16 06ff 50       	  push %eax
  17 0700 53       	  push %ebx
  18 0701 51       	  push %ecx
  19 0702 52       	  push %edx
  20 0703 56       	  push %esi
  21              	
  22 0704 8B4508   	  mov 0x8(%ebp), %eax # X0
  23 0707 8B5D0C   	  mov 0xc(%ebp), %ebx # Y0
  24 070a 8B4D10   	  mov 0x10(%ebp), %ecx # X1
  25 070d 8B5514   	  mov 0x14(%ebp), %edx # Y1
  26 0710 8B7518   	  mov 0x18(%ebp), %esi # color
  27              	
  28 0713 39C8     	  cmp %ecx, %eax
GAS LISTING kernel.s 			page 22


  29 0715 7C01     	  jl .Ldraw_rect_10E
  30 0717 91       	  xchg %ecx, %eax
  31              	
  32              	.Ldraw_rect_10E:
  33              	  
  34 0718 39D3     	  cmp %edx, %ebx
  35 071a 7C02     	  jl .Ldraw_rect_20E
  36 071c 87D3     	  xchg %edx, %ebx
  37              	
  38              	.Ldraw_rect_20E:
  39              	
  40 071e 56       	  push %esi
  41 071f 53       	  push %ebx
  42 0720 51       	  push %ecx
  43 0721 53       	  push %ebx
  44 0722 50       	  push %eax
  45 0723 E822FFFF 	  call draw_line
  45      FF
  46 0728 6683C414 	  add $0x14, %sp
  47              	
  48 072c 56       	  push %esi
  49 072d 52       	  push %edx
  50 072e 50       	  push %eax
  51 072f 53       	  push %ebx
  52 0730 50       	  push %eax
  53 0731 E814FFFF 	  call draw_line
  53      FF
  54 0736 6683C414 	  add $0x14, %sp
  55              	
  56 073a 4A       	  dec %edx
  57 073b 56       	  push %esi
  58 073c 52       	  push %edx
  59 073d 51       	  push %ecx
  60 073e 52       	  push %edx
  61 073f 50       	  push %eax
  62 0740 E805FFFF 	  call draw_line
  62      FF
  63 0745 6683C414 	  add $0x14, %sp
  64 0749 42       	  inc %edx
  65              	
  66 074a 49       	  dec %ecx
  67 074b 56       	  push %esi
  68 074c 52       	  push %edx
  69 074d 51       	  push %ecx
  70 074e 53       	  push %ebx
  71 074f 51       	  push %ecx
  72 0750 E8F5FEFF 	  call draw_line
  72      FF
  73 0755 6683C414 	  add $0x14, %sp
  74              	
  75 0759 5E       	  pop %esi
  76 075a 5A       	  pop %edx
  77 075b 59       	  pop %ecx
  78 075c 5B       	  pop %ebx
  79 075d 58       	  pop %eax
  80              	
  81 075e 89EC     	  mov %ebp, %esp
GAS LISTING kernel.s 			page 23


  82 0760 5D       	  pop %ebp
  83              	
  84 0761 C3       	  ret
 123              	.include "../modules/protect/itoa.s"
   1              	# void itoa(num, buff, size, radix, flag)
   2              	# num:source addr
   3              	# buff:dist addr
   4              	# radix:set 2, 8, 10, or 16 
   5              	# flag:When set 
   6              	#                 1st bit: 0 padding on space
   7              	#                 2nd bit: add +/- sign
   8              	#                 3rd bit: treat as signed variable 
   9              	
  10              	
  11              	itoa:
  12 0762 55       	  push %ebp
  13 0763 89E5     	  mov %esp, %ebp
  14              	
  15              	# store register
  16 0765 50       	  push %eax
  17 0766 53       	  push %ebx
  18 0767 51       	  push %ecx
  19 0768 52       	  push %edx
  20 0769 56       	  push %esi
  21 076a 57       	  push %edi
  22              	
  23              	# get arguments
  24 076b 8B4508   	  mov 0x8(%ebp), %eax # num
  25 076e 8B750C   	  mov 0xc(%ebp), %esi # buff
  26 0771 8B4D10   	  mov 0x10(%ebp), %ecx # size
  27 0774 8B5D18   	  mov 0x18(%ebp), %ebx # flag
  28              	# The remaining arguments(radix: 0xa(%bp) ) will be assigend later.
  29 0777 89F7     	  mov %esi, %edi
  30 0779 01CF     	  add %ecx, %edi
  31 077b 4F       	  dec %edi
  32              	
  33              	
  34              	
  35              	# detect signed variable
  36 077c F7C30100 	  test $0b0001, %ebx
  36      0000
  37 0782 7408     	  jz .Litoa1
  38 0784 83F800   	  cmp $0, %eax
  39 0787 7D03     	  jge .Litoa2
  40 0789 83CB02   	  or $0b0010, %ebx
  41              	.Litoa1: 
  42              	.Litoa2:
  43              	
  44              	# detect add +/- sign
  45 078c F7C30200 	  test $0b0010, %ebx
  45      0000
  46 0792 7410     	  jz .Litoa3
  47 0794 83F800   	  cmp $0, %eax
  48 0797 7D07     	  jge .Litoa4
  49 0799 F7D8     	  neg %eax
  50 079b C6062D   	  movb $0x2d, (%esi) # 0x2d == '-'
  51 079e EB03     	  jmp .Litoa5
GAS LISTING kernel.s 			page 24


  52              	.Litoa4:
  53 07a0 C6062B   	  movb $0x2b, (%esi) # 0x2b == '+'
  54              	.Litoa5:
  55 07a3 49       	  dec %ecx
  56              	.Litoa3:
  57              	
  58              	# convert to ascii
  59 07a4 8B5D14   	  mov 0x14(%ebp), %ebx
  60              	.LitoaLOOP1:
  61 07a7 BA000000 	  mov $0, %edx
  61      00
  62 07ac F7F3     	  div %ebx
  63 07ae 89D6     	  mov %edx, %esi
  64 07b0 8A960000 	  movb ascii_table(%esi), %dl
  64      0000
  65 07b6 8817     	  mov %dl, (%edi)
  66 07b8 4F       	  dec %edi
  67 07b9 83F800   	  cmp $0, %eax
  68 07bc E0E9     	  loopnz .LitoaLOOP1
  69              	.LotpaLOOPEND1:
  70              	
  71              	
  72              	# 0 padding in the space
  73 07be 83F900   	  cmp $0, %ecx
  74 07c1 740E     	  je .Litoa6
  75 07c3 B020     	  mov $0x20, %al
  76 07c5 66837D18 	  cmpw $0b0100, 0x18(%ebp)
  76      04
  77 07ca 7502     	  jne .Litoa7
  78 07cc B030     	  mov $0x30, %al
  79              	.Litoa7:
  80 07ce FD       	  std
  81 07cf F3AA     	  rep stosb
  82              	.Litoa6:
  83              	
  84              	# return register
  85 07d1 5F       	  pop %edi
  86 07d2 5E       	  pop %esi
  87 07d3 5A       	  pop %edx
  88 07d4 59       	  pop %ecx
  89 07d5 5B       	  pop %ebx
  90 07d6 58       	  pop %eax
  91              	
  92              	# destroy stack frame
  93 07d7 89EC     	  mov %ebp, %esp
  94 07d9 5D       	  pop %ebp
  95 07da C3       	  ret
  96              	
  97              	
  98              	
  99 07db 30313233 	ascii_table: .string "0123456789ABCDEF"
  99      34353637 
  99      38394142 
  99      43444546 
  99      00
 124              	.include "../modules/protect/rtc.s"
   1              	/*
GAS LISTING kernel.s 			page 25


   2              	 *  rtc_get_time(dst)
   3              	 *  arguments:
   4              	 *    dst:  stored address
   5              	 *  return:
   6              	 *    0:  sucsess
   7              	 *    other:  false
   8              	 */
   9              	rtc_get_time:
  10 07ec 55       	  push %ebp
  11 07ed 89E5     	  mov %esp, %ebp
  12              	
  13 07ef 53       	  push %ebx
  14              	
  15 07f0 B00A     	  mov $0x0A, %al
  16 07f2 E670     	  out %al, $0x70
  17 07f4 E471     	  in $0x71, %al
  18 07f6 A880     	  test $0x80, %al
  19 07f8 7407     	  je .Lrtc_10F
  20 07fa B8010000 	  mov $0x1, %eax
  20      00
  21 07ff EB27     	  jmp .Lrtc_10E
  22              	.Lrtc_10F:
  23              	
  24 0801 B004     	  mov $0x4, %al # hour data
  25 0803 E670     	  out %al, $0x70
  26 0805 E471     	  in $0x71, %al
  27              	  
  28 0807 C1E008   	  shl $0x8, %eax # hour 00
  29              	
  30 080a B002     	  mov $0x2, %al # minute
  31 080c E670     	  out %al, $0x70
  32 080e E471     	  in $0x71, %al 
  33              	  
  34 0810 C1E008   	  shl $0x8, %eax # hour minute 00
  35              	
  36 0813 B000     	  mov $0x0, %al # second
  37 0815 E670     	  out %al, $0x70
  38 0817 E471     	  in $0x71, %al # hour minute second 00
  39              	
  40 0819 25FFFFFF 	  and $0x00FFFFFF, %eax # FF(hour) FF(minute) FF(second)
  40      00
  41              	
  42 081e 8B5D08   	  mov 0x8(%ebp), %ebx
  43 0821 8903     	  mov %eax, (%ebx)
  44              	
  45 0823 B8000000 	  mov $0x0, %eax
  45      00
  46              	
  47              	.Lrtc_10E:
  48              	
  49 0828 5B       	  pop %ebx
  50              	
  51 0829 89EC     	  mov %ebp, %esp
  52 082b 5D       	  pop %ebp
  53              	
  54 082c C3       	  ret
 125              	.include "../modules/protect/draw_time.s"
GAS LISTING kernel.s 			page 26


   1              	/*
   2              	 *  draw_time(col, row, color, time)
   3              	 *  arguments:
   4              	 *    col:
   5              	 *    row:
   6              	 *    color:
   7              	 *    time:
   8              	 *  return: void
   9              	 */
  10              	
  11              	
  12              	 draw_time:
  13              	
  14 082d 55       	  push %ebp
  15 082e 89E5     	  mov %esp, %ebp
  16              	
  17 0830 50       	  push %eax
  18 0831 53       	  push %ebx
  19              	
  20 0832 8B4514   	  mov 0x14(%ebp), %eax
  21 0835 3B050000 	  cmp (.last), %eax
  21      0000
  22 083b 7466     	  je .Ldraw_time_10E
  23              	
  24 083d A3000000 	  mov %eax, (.last)
  24      00
  25              	  
  26              	
  27 0842 BB000000 	  mov $0x0, %ebx
  27      00
  28 0847 88C3     	  mov %al, %bl
  29 0849 6A04     	  push $0b100
  30 084b 6A10     	  push $0x10
  31 084d 6A02     	  push $0x2
  32 084f 68000000 	  push $.sec
  32      00
  33 0854 53       	  push %ebx
  34 0855 E808FFFF 	  call itoa
  34      FF
  35 085a 6683C414 	  add $0x14, %sp
  36              	  
  37 085e 88E3     	  mov %ah, %bl
  38 0860 6A04     	  push $0b100
  39 0862 6A10     	  push $0x10
  40 0864 6A02     	  push $0x2
  41 0866 68000000 	  push $.min
  41      00
  42 086b 53       	  push %ebx
  43 086c E8F1FEFF 	  call itoa
  43      FF
  44 0871 6683C414 	  add $0x14, %sp
  45              	
  46 0875 C1E810   	  shr $0x10, %eax
  47 0878 6A04     	  push $0b100
  48 087a 6A10     	  push $0x10
  49 087c 6A02     	  push $0x2
  50 087e 68000000 	  push $.hour
GAS LISTING kernel.s 			page 27


  50      00
  51 0883 50       	  push %eax
  52 0884 E8D9FEFF 	  call itoa
  52      FF
  53 0889 6683C414 	  add $0x14, %sp
  54              	
  55 088d 68000000 	  push $.hour
  55      00
  56 0892 FF7510   	  pushl 0x10(%ebp)
  57 0895 FF750C   	  pushl 0xc(%ebp)
  58 0898 FF7508   	  pushl 0x8(%ebp)
  59 089b E824FCFF 	  call draw_str
  59      FF
  60 08a0 83C410   	  add $0x10, %esp
  61              	
  62              	.Ldraw_time_10E:
  63              	
  64 08a3 5B       	  pop %ebx
  65 08a4 58       	  pop %eax
  66              	
  67 08a5 89EC     	  mov %ebp, %esp
  68 08a7 5D       	  pop %ebp
  69              	
  70 08a8 C3       	  ret
  71              	
  72 08a9 90       	.align 2
  73 08aa 00000000 	.temp:  .quad 0x0
  73      00000000 
  74 08b2 00000000 	.last:  .quad 0x0
  74      00000000 
  75 08ba 5A5A3A   	.hour:  .ascii "ZZ:"
  76 08bd 5A5A3A   	.min:   .ascii "ZZ:"
  77 08c0 5A5A00   	.sec:   .string "ZZ"
 126              	#.include "./modules/interrupt.s"
 127              	.include "../modules/protect/pic.s"
   1              	init_pic:
   2 08c3 50       	  push %eax
   3              	  
   4              	# setting master pic
   5              	
   6 08c4 B011E620 	  outp $0x20, $0x11 
   7 08c8 B020E621 	  outp $0x21, $0x20
   8 08cc B004E621 	  outp $0x21, $0x04
   9 08d0 B005E621 	  outp $0x21, $0x05
  10 08d4 B0FFE621 	  outp $0x21, $0xFF
  11              	
  12              	# setting slave
  13              	
  14 08d8 B011E6A0 	  outp $0xA0, $0x11
  15 08dc B028E6A1 	  outp $0xA1, $0x28
  16 08e0 B002E6A1 	  outp $0xA1, $0x02
  17 08e4 B001E6A1 	  outp $0xA1, $0x01
  18 08e8 B0FFE6A1 	  outp $0xA1, $0xFF
  19              	
  20 08ec 58       	  pop %eax
  21              	
  22 08ed C3       	  ret 
GAS LISTING kernel.s 			page 28


  23              	
 128              	.include "../modules/protect/int_rtc.s"
   1              	/*
   2              	 *  rtc_int(bit)
   3              	 */
   4              	
   5              	rtc_int_en:
   6 08ee 55       	  push %ebp
   7 08ef 89E5     	  mov %esp, %ebp
   8              	
   9 08f1 50       	  push %eax
  10              	
  11 08f2 B00BE670 	  outp $0x70, $0x0B
  12              	
  13 08f6 E471     	  in $0x71, %al
  14 08f8 0A4508   	  or 0x8(%ebp), %al
  15 08fb E671     	  out %al, $0x71
  16              	
  17 08fd 58       	  pop %eax
  18              	
  19 08fe 89EC     	  mov %ebp, %esp
  20 0900 5D       	  pop %ebp
  21 0901 C3       	  ret
  22              	
  23              	int_rtc:
  24 0902 60       	  pusha
  25 0903 1E       	  push %ds
  26 0904 06       	  push %es
  27              	
  28 0905 66B81000 	  mov $0x0010, %ax
  29 0909 8ED8     	  mov %ax, %ds
  30 090b 8EC0     	  mov %ax, %es
  31              	
  32 090d 68000000 	  push $RTC_TIME
  32      00
  33 0912 E8D5FEFF 	  call rtc_get_time
  33      FF
  34 0917 6683C404 	  add $0x4, %sp
  35              	
  36 091b B00CE670 	  outp $0x70, $0x0C
  37 091f E471     	  in $0x71, %al
  38              	
  39              	  # EOI command
  40 0921 B020E6A0 	  outp $0xA0, $0x20
  41 0925 B020E620 	  outp $0x20, $0x20
  42              	
  43 0929 07       	  pop %es
  44 092a 1F       	  pop %ds
  45 092b 61       	  popa
  46              	
  47 092c CF       	  iret
 129              	.include "../modules/protect/interrupt.s"
   1 092d 0F1F00   	.align 0x4
   2 0930 FF07     	IDTR: .word 8 * 256 - 1
   3 0932 00001000 	.long VECT_BASE
   4              	
   5              	init_int:
GAS LISTING kernel.s 			page 29


   6 0936 50       	  push %eax
   7 0937 53       	  push %ebx
   8 0938 51       	  push %ecx
   9 0939 57       	  push %edi
  10              	
  11 093a 8D050000 	  lea (int_default), %eax
  11      0000
  12 0940 BB008E08 	  mov $0x00088E00, %ebx
  12      00
  13 0945 6693     	  xchg %bx, %ax
  14              	
  15 0947 B9000100 	  mov $256, %ecx
  15      00
  16 094c BF000010 	  mov $VECT_BASE, %edi
  16      00
  17              	
  18              	.10L:
  19              	  
  20 0951 891F     	  mov %ebx, (%edi)
  21 0953 894704   	  mov %eax, 0x4(%edi)
  22 0956 83C708   	  add $0x8, %edi
  23 0959 E2F6     	  loop .10L
  24              	
  25 095b 0F011D00 	  lidt (IDTR)
  25      000000
  26              	
  27 0962 5F       	  pop %edi
  28 0963 59       	  pop %ecx
  29 0964 5B       	  pop %ebx
  30 0965 58       	  pop %eax
  31              	
  32 0966 C3       	  ret
  33              	
  34              	int_stop:
  35 0967 FB       	  sti
  36              	
  37 0968 50       	  push %eax
  38 0969 680F0600 	  push $0x060F
  38      00
  39 096e 6A0F     	  push $0xF
  40 0970 6A19     	  push $0x19
  41 0972 E84DFBFF 	  call draw_str
  41      FF
  42 0977 6683C410 	  add $0x10, %sp
  43              	
  44 097b 8B0424   	  mov (%esp), %eax
  45 097e 6A04     	  push $0b0100
  46 0980 6A10     	  push $0x10
  47 0982 6A08     	  push $0x8
  48 0984 68000000 	  push $.p1
  48      00
  49 0989 50       	  push %eax
  50 098a E8D3FDFF 	  call itoa
  50      FF
  51 098f 6683C414 	  add $0x14, %sp
  52              	
  53 0993 8B442404 	  mov 0x4(%esp), %eax
GAS LISTING kernel.s 			page 30


  54 0997 6A04     	  push $0b0100
  55 0999 6A10     	  push $0x10
  56 099b 6A08     	  push $0x8
  57 099d 68000000 	  push $.p2
  57      00
  58 09a2 50       	  push %eax
  59 09a3 E8BAFDFF 	  call itoa
  59      FF
  60 09a8 6683C414 	  add $0x14, %sp
  61              	
  62              	
  63 09ac 8B442408 	  mov 0x8(%esp), %eax
  64 09b0 6A04     	  push $0b0100
  65 09b2 6A10     	  push $0x10
  66 09b4 6A08     	  push $0x8
  67 09b6 68000000 	  push $.p3
  67      00
  68 09bb 50       	  push %eax
  69 09bc E8A1FDFF 	  call itoa
  69      FF
  70 09c1 6683C414 	  add $0x14, %sp
  71              	
  72 09c5 8B44240C 	  mov 0xc(%esp), %eax
  73 09c9 6A04     	  push $0b0100
  74 09cb 6A10     	  push $0x10
  75 09cd 6A08     	  push $0x8
  76 09cf 68000000 	  push $.p4
  76      00
  77 09d4 50       	  push %eax
  78 09d5 E888FDFF 	  call itoa
  78      FF
  79 09da 6683C414 	  add $0x14, %sp
  80              	
  81 09de 68000000 	  push $.s1
  81      00
  82 09e3 68040F00 	  push $0x0F04
  82      00
  83 09e8 6A10     	  push $0x10
  84 09ea 6A19     	  push $0x19
  85 09ec E8D3FAFF 	  call draw_str
  85      FF
  86 09f1 6683C410 	  add $0x10, %sp
  87              	  
  88 09f5 68000000 	  push $.s2
  88      00
  89 09fa 68040F00 	  push $0x0F04
  89      00
  90 09ff 6A11     	  push $0x11
  91 0a01 6A19     	  push $0x19
  92 0a03 E8BCFAFF 	  call draw_str
  92      FF
  93 0a08 6683C410 	  add $0x10, %sp
  94              	
  95 0a0c 68000000 	  push $.s3
  95      00
  96 0a11 68040F00 	  push $0x0F04
  96      00
GAS LISTING kernel.s 			page 31


  97 0a16 6A12     	  push $0x12
  98 0a18 6A19     	  push $0x19
  99 0a1a E8A5FAFF 	  call draw_str
  99      FF
 100 0a1f 6683C410 	  add $0x10, %sp
 101              	
 102 0a23 68000000 	  push $.s4
 102      00
 103 0a28 68040F00 	  push $0x0F04
 103      00
 104 0a2d 6A13     	  push $0x13
 105 0a2f 6A19     	  push $0x19
 106 0a31 E88EFAFF 	  call draw_str
 106      FF
 107 0a36 6683C410 	  add $0x10, %sp
 108              	
 109 0a3a EBFE     	  jmp .
 110              	
 111 0a3c 4553502B 	.s1: .ascii "ESP+ 0:"
 111      20303A
 112 0a43 5F5F5F5F 	.p1: .string "________ "
 112      5F5F5F5F 
 112      2000
 113 0a4d 2020202B 	.s2: .ascii "   + 4:"
 113      20343A
 114 0a54 5F5F5F5F 	.p2: .string "________ "
 114      5F5F5F5F 
 114      2000
 115 0a5e 2020202B 	.s3: .ascii "   + 8:"
 115      20383A
 116 0a65 5F5F5F5F 	.p3: .string "________ "
 116      5F5F5F5F 
 116      2000
 117 0a6f 2020202B 	.s4: .ascii "   +12:"
 117      31323A
 118 0a76 5F5F5F5F 	.p4: .string "________ "
 118      5F5F5F5F 
 118      2000
 119              	
 120              	int_default:
 121 0a80 9C       	  pushf
 122 0a81 0E       	  push %cs
 123 0a82 68000000 	  push $int_stop
 123      00
 124 0a87 B8000000 	  mov $.int_default_s0, %eax
 124      00
 125 0a8c CF       	  iret
 126              	
 127 0a8d 203C2020 	.int_default_s0: .string " <    STOP    > "
 127      20205354 
 127      4F502020 
 127      20203E20 
 127      00
 128              	
 129              	int_zero_div:
 130 0a9e 9C       	  pushf
 131 0a9f 0E       	  push %cs
GAS LISTING kernel.s 			page 32


 132 0aa0 68000000 	  push $int_stop
 132      00
 133              	
 134 0aa5 B8000000 	  mov $.int_zero_div, %eax
 134      00
 135 0aaa CF       	  iret
 136              	
 137 0aab 203C2020 	.int_zero_div: .string " <   ZERO DIV  > "
 137      205A4552 
 137      4F204449 
 137      5620203E 
 137      2000
 130              	.include "../modules/protect/int_keyboard.s"
   1              	int_keyboard:
   2 0abd 60       	  pusha
   3 0abe 1E       	  push %ds
   4 0abf 06       	  push %es
   5              	
   6 0ac0 66B81000 	  mov $0x0010, %ax
   7 0ac4 8ED8     	  mov %ax, %ds
   8 0ac6 8EC0     	  mov %ax, %es
   9              	
  10 0ac8 E460     	  in $0x60, %al
  11              	
  12 0aca 50       	  push %eax
  13 0acb 68000000 	  push $_KEY_BUFF
  13      00
  14 0ad0 E8650000 	  call ring_wr
  14      00
  15 0ad5 6683C408 	  add $0x8, %sp
  16              	
  17 0ad9 B020E620 	  outp $0x20, $0x20
  18              	
  19 0add 07       	  pop %es
  20 0ade 1F       	  pop %ds
  21 0adf 61       	  popa
  22              	
  23 0ae0 CF       	  iret
  24              	
  25 0ae1 0F1F00   	.align 4
  26 0ae4 00000000 	_KEY_BUFF: .fill ring_buff.size, 0x1, 0x0
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
 131              	.include "../modules/protect/ring_buff.s"
   1              	ring_rd:
   2 0afc 55       	  push %ebp
   3 0afd 89E5     	  mov %esp, %ebp
   4              	
   5 0aff 53       	  push %ebx
   6 0b00 56       	  push %esi
   7 0b01 57       	  push %edi
   8              	
   9 0b02 8B7508   	  mov 0x8(%ebp), %esi
  10 0b05 8B7D0C   	  mov 0xc(%ebp), %edi
  11              	
GAS LISTING kernel.s 			page 33


  12 0b08 B8000000 	  mov $0x0, %eax
  12      00
  13 0b0d 8B9E0000 	  mov ring_buff.rp(%esi), %ebx
  13      0000
  14 0b13 3B9E0400 	  cmp ring_buff.wp(%esi), %ebx
  14      0000
  15 0b19 7418     	  je .10E
  16              	
  17 0b1b 8A843308 	  mov ring_buff.item(%ebx, %esi), %al
  17      000000
  18 0b22 8807     	  mov %al, (%edi)
  19              	
  20 0b24 43       	  inc %ebx
  21 0b25 83E30F   	  and $RING_INDEX_MASK, %ebx
  22 0b28 899E0000 	  mov %ebx, ring_buff.rp(%esi)
  22      0000
  23 0b2e B8010000 	  mov $0x1, %eax
  23      00
  24              	.10E:
  25              	
  26 0b33 5F       	  pop %edi
  27 0b34 5E       	  pop %esi
  28 0b35 5B       	  pop %ebx
  29              	
  30 0b36 89EC     	  mov %ebp, %esp
  31 0b38 5D       	  pop %ebp
  32              	
  33 0b39 C3       	  ret
  34              	
  35              	ring_wr:
  36 0b3a 55       	  push %ebp
  37 0b3b 89E5     	  mov %esp, %ebp
  38              	
  39 0b3d 53       	  push %ebx
  40 0b3e 51       	  push %ecx
  41 0b3f 56       	  push %esi
  42              	
  43 0b40 8B7508   	  mov 0x8(%ebp), %esi
  44 0b43 B8000000 	  mov $0x0, %eax
  44      00
  45 0b48 8B9E0400 	  mov ring_buff.wp(%esi), %ebx
  45      0000
  46 0b4e 89D9     	  mov %ebx, %ecx
  47 0b50 41       	  inc %ecx
  48 0b51 83E10F   	  and $RING_INDEX_MASK, %ecx
  49              	
  50 0b54 3B8E0000 	  cmp ring_buff.rp(%esi), %ecx
  50      0000
  51 0b5a 7415     	  je .ringwr_10E
  52 0b5c 8A450C   	  mov 0xc(%ebp), %al
  53              	
  54 0b5f 88841E08 	  mov %al, ring_buff.item(%esi, %ebx)
  54      000000
  55 0b66 898E0400 	  mov %ecx, ring_buff.wp(%esi)
  55      0000
  56 0b6c B8010000 	  mov $0x1, %eax
  56      00
GAS LISTING kernel.s 			page 34


  57              	.ringwr_10E:
  58              	
  59 0b71 5E       	  pop %esi
  60 0b72 59       	  pop %ecx
  61 0b73 5B       	  pop %ebx
  62              	
  63 0b74 89EC     	  mov %ebp, %esp
  64 0b76 5D       	  pop %ebp
  65              	
  66 0b77 C3       	  ret
  67              	
  68              	draw_key:
  69 0b78 55       	  push %ebp
  70 0b79 89E5     	  mov %esp, %ebp
  71              	
  72 0b7b 60       	  pusha
  73              	
  74 0b7c 8B5508   	  mov 0x8(%ebp), %edx
  75 0b7f 8B7D0C   	  mov 0xc(%ebp), %edi
  76 0b82 8B7510   	  mov 0x10(%ebp), %esi
  77              	
  78 0b85 8B9E0000 	  mov ring_buff.rp(%esi), %ebx
  78      0000
  79 0b8b 8DB60800 	  lea ring_buff.item(%esi), %esi
  79      0000
  80 0b91 B9100000 	  mov $RING_ITEM_SIZE, %ecx
  80      00
  81              	
  82              	.draw_key10L:
  83              	  
  84 0b96 4B       	  dec %ebx
  85 0b97 83E30F   	  and $RING_INDEX_MASK, %ebx
  86 0b9a 8A041E   	  mov (%esi, %ebx), %al
  87              	
  88              	
  89              	
  90 0b9d 6A04     	  push $0b0100
  91 0b9f 6A10     	  push $0x10
  92 0ba1 6A02     	  push $0x2
  93 0ba3 68000000 	  push $.tmp
  93      00
  94 0ba8 50       	  push %eax
  95 0ba9 E8B4FBFF 	  call itoa
  95      FF
  96 0bae 6683C414 	  add $0x14, %sp
  97              	
  98 0bb2 68000000 	  push $.tmp
  98      00
  99 0bb7 6A02     	  push $0x02
 100 0bb9 57       	  push %edi
 101 0bba 52       	  push %edx
 102 0bbb E804F9FF 	  call draw_str
 102      FF
 103 0bc0 6683C410 	  add $0x10, %sp
 104              	
 105 0bc4 83C203   	  add $0x3, %edx
 106 0bc7 E2CD     	  loop .draw_key10L
GAS LISTING kernel.s 			page 35


 107              	
 108              	.draw_key_10E:
 109              	
 110 0bc9 61       	  popa
 111              	
 112 0bca 89EC     	  mov %ebp, %esp
 113 0bcc 5D       	  pop %ebp
 114              	
 115 0bcd C3       	  ret
 116              	
 117 0bce 5F5F2000 	.tmp: .string "__ "
 118              	
 119              	.section .data
 120              	
 121              	ring_buff: .struct 0
 122              	ring_buff.rp: .struct ring_buff.rp + 4
 123              	ring_buff.wp: .struct ring_buff.wp + 4
 124              	ring_buff.item: .struct ring_buff.item + RING_ITEM_SIZE
 125              	ring_buff.end:
 126              	
 127              	#.set ring_buff.size, 0x4
 128              	.set ring_buff.size, ring_buff.end - ring_buff.rp
 129              	
 130              	.section .text
 132              	.include "../modules/protect/timer.s"
   1              	
   2              	int_en_timer0:
   3              	
   4              	  # 8254 Timer
   5              	  # 0x2E9C(11932) = 10[ms] @ CLK = 1,193,182[Hz]
   6              	  # set Timer interrupt every 10[ms](0x2E9C count)
   7 0bd2 50       	  push %eax
   8 0bd3 B034E643 	  outp $0x43, $0b00110100 # take turns low byte / high byte, mode 2, binary
   9 0bd7 B09CE640 	  outp $0x40, $0x9C # low byte
  10 0bdb B02EE640 	  outp $0x40, $0x2E # high byte
  11              	
  12 0bdf 58       	  pop %eax
  13 0be0 C3       	  ret
 133              	.include "../modules/protect/draw_rotation_bar.s"
   1              	draw_rotation_bar:
   2 0be1 50       	  push %eax
   3              	
   4 0be2 A1000000 	  mov (TIMER_COUNT), %eax
   4      00
   5 0be7 C1E804   	  shr $0x4, %eax
   6 0bea 3B050000 	  cmp (.index), %eax
   6      0000
   7 0bf0 741E     	  je 10f
   8              	
   9 0bf2 A3000000 	  mov %eax, (.index)
   9      00
  10 0bf7 83E003   	  and $0x03, %eax
  11 0bfa 8A800000 	  mov .table(%eax), %al
  11      0000
  12              	
  13 0c00 50       	  push %eax
  14 0c01 6A0F     	  push $0x000F
GAS LISTING kernel.s 			page 36


  15 0c03 6A1D     	  push $0x1d
  16 0c05 6A00     	  push $0x0
  17 0c07 E8AFF7FF 	  call draw_char
  17      FF
  18 0c0c 6683C410 	  add $0x10, %sp
  19              	
  20              	10:
  21              	  
  22 0c10 58       	  pop %eax
  23 0c11 C3       	  ret
  24              	
  25 0c12 6690     	.align 0x4
  26 0c14 00000000 	.index: .long 0x0
  27 0c18 7C2F2DC2 	.table: .ascii "|/-¥"
  27      A5
 134              	
 135 0c1d 00000000 	.fill KERNEL_SIZE - (. - kernel), 0x1, 0x0
 135      00000000 
 135      00000000 
 135      00000000 
 135      00000000 
GAS LISTING kernel.s 			page 37


DEFINED SYMBOLS
          ./define.s:1      *ABS*:0000000000007c00 BOOT_LOAD
          ./define.s:2      *ABS*:0000000000002000 BOOT_SIZE
          ./define.s:3      *ABS*:0000000000000200 SECT_SIZE
          ./define.s:4      *ABS*:0000000000000010 BOOT_SECT
          ./define.s:5      *ABS*:0000000000009c00 BOOT_END
          ./define.s:6      *ABS*:0000000000000010 KERNEL_SECT
          ./define.s:7      *ABS*:0000000000002000 KERNEL_SIZE
          ./define.s:8      *ABS*:00000000000a0000 VRAM
          ./define.s:9      *ABS*:0000000000101000 KERNEL_LOAD
          ./define.s:10     *ABS*:0000000000100000 VECT_BASE
          ./define.s:12     *ABS*:0000000000000010 RING_ITEM_SIZE
          ./define.s:13     *ABS*:000000000000000f RING_INDEX_MASK
          ./define.s:15     *ABS*:0000000000103000 STACK_BASE
          ./define.s:16     *ABS*:0000000000000400 STACK_SIZE
          ./define.s:17     *ABS*:0000000000103400 SP_TASK_0
          ./define.s:18     *ABS*:0000000000103800 SP_TASK_1
            kernel.s:8      .text:0000000000000000 kernel
            kernel.s:107    .text:0000000000000194 FONT_ADR
        descriptor.s:67     .text:0000000000000290 GDT.tss_0
        descriptor.s:3      .text:00000000000001a0 TSS_0
        descriptor.s:68     .text:0000000000000298 GDT.tss_1
        descriptor.s:33     .text:0000000000000208 TSS_1
        descriptor.s:66     .text:0000000000000288 GDT.ldt
        descriptor.s:82     .text:00000000000002a6 LDT
                            *ABS*:0000000000000027 LDT_LIMIT
        descriptor.s:77     .text:00000000000002a0 GDTR
                            *ABS*:0000000000000020 SS_TASK_0
../modules/protect/interrupt.s:5      .text:0000000000000936 init_int
../modules/protect/pic.s:1      .text:00000000000008c3 init_pic
../modules/protect/interrupt.s:129    .text:0000000000000a9e int_zero_div
 modules/int_timer.s:1      .text:00000000000002ce int_timer
../modules/protect/int_keyboard.s:1      .text:0000000000000abd int_keyboard
../modules/protect/int_rtc.s:23     .text:0000000000000902 int_rtc
../modules/protect/int_rtc.s:5      .text:00000000000008ee rtc_int_en
../modules/protect/timer.s:2      .text:0000000000000bd2 int_en_timer0
../modules/protect/draw_font.s:9      .text:000000000000047f draw_font
../modules/protect/draw_color_bar.s:9      .text:000000000000050d draw_color_bar
../modules/protect/draw_str.s:10     .text:00000000000004c4 draw_str
            kernel.s:108    .text:0000000000000198 RTC_TIME
../modules/protect/draw_time.s:12     .text:000000000000082d draw_time
../modules/protect/draw_rotation_bar.s:1      .text:0000000000000be1 draw_rotation_bar
            kernel.s:109    .text:000000000000019c .int_key
../modules/protect/int_keyboard.s:26     .text:0000000000000ae4 _KEY_BUFF
../modules/protect/ring_buff.s:1      .text:0000000000000afc ring_rd
../modules/protect/ring_buff.s:68     .text:0000000000000b78 draw_key
        descriptor.s:4      .text:00000000000001a0 TSS_0.link
        descriptor.s:5      .text:00000000000001a4 TSS_0.esp0
        descriptor.s:6      .text:00000000000001a8 TSS_0.ss0
                            *ABS*:0000000000000010 DS_KERNEL
        descriptor.s:7      .text:00000000000001ac TSS_0.esp1
        descriptor.s:8      .text:00000000000001b0 TSS_0.ss1
        descriptor.s:9      .text:00000000000001b4 TSS_0.esp2
        descriptor.s:10     .text:00000000000001b8 TSS_0.ss2
        descriptor.s:11     .text:00000000000001bc TSS_0.cr3
        descriptor.s:12     .text:00000000000001c0 TSS_0.eip
        descriptor.s:13     .text:00000000000001c4 TSS_0.eflags
GAS LISTING kernel.s 			page 38


        descriptor.s:14     .text:00000000000001c8 TSS_0.eax
        descriptor.s:15     .text:00000000000001cc TSS_0.ecx
        descriptor.s:16     .text:00000000000001d0 TSS_0.edx
        descriptor.s:17     .text:00000000000001d4 TSS_0.ebx
        descriptor.s:18     .text:00000000000001d8 TSS_0.esp
        descriptor.s:19     .text:00000000000001dc TSS_0.ebp
        descriptor.s:20     .text:00000000000001e0 TSS_0.esi
        descriptor.s:21     .text:00000000000001e4 TSS_0.edi
        descriptor.s:22     .text:00000000000001e8 TSS_0.es
        descriptor.s:23     .text:00000000000001ec TSS_0.cs
        descriptor.s:24     .text:00000000000001f0 TSS_0.ss
        descriptor.s:25     .text:00000000000001f4 TSS_0.ds
        descriptor.s:26     .text:00000000000001f8 TSS_0.fs
        descriptor.s:27     .text:00000000000001fc TSS_0.gs
        descriptor.s:28     .text:0000000000000200 TSS_0.ldt
        descriptor.s:29     .text:0000000000000204 TSS_0.io
        descriptor.s:34     .text:0000000000000208 TSS_1.link
        descriptor.s:35     .text:000000000000020c TSS_1.esp0
        descriptor.s:36     .text:0000000000000210 TSS_1.ss0
        descriptor.s:37     .text:0000000000000214 TSS_1.esp1
        descriptor.s:38     .text:0000000000000218 TSS_1.ss1
        descriptor.s:39     .text:000000000000021c TSS_1.esp2
        descriptor.s:40     .text:0000000000000220 TSS_1.ss2
        descriptor.s:41     .text:0000000000000224 TSS_1.cr3
        descriptor.s:42     .text:0000000000000228 TSS_1.eip
      tasks/task_1.s:1      .text:00000000000002ec task_1
        descriptor.s:43     .text:000000000000022c TSS_1.eflags
        descriptor.s:44     .text:0000000000000230 TSS_1.eax
        descriptor.s:45     .text:0000000000000234 TSS_1.ecx
        descriptor.s:46     .text:0000000000000238 TSS_1.edx
        descriptor.s:47     .text:000000000000023c TSS_1.ebx
        descriptor.s:48     .text:0000000000000240 TSS_1.esp
        descriptor.s:49     .text:0000000000000244 TSS_1.ebp
        descriptor.s:50     .text:0000000000000248 TSS_1.esi
        descriptor.s:51     .text:000000000000024c TSS_1.edi
        descriptor.s:52     .text:0000000000000250 TSS_1.es
                            *ABS*:0000000000000024 DS_TASK_1
        descriptor.s:53     .text:0000000000000254 TSS_1.cs
                            *ABS*:000000000000001c CS_TASK_1
        descriptor.s:54     .text:0000000000000258 TSS_1.ss
        descriptor.s:55     .text:000000000000025c TSS_1.ds
        descriptor.s:56     .text:0000000000000260 TSS_1.fs
        descriptor.s:57     .text:0000000000000264 TSS_1.gs
        descriptor.s:58     .text:0000000000000268 TSS_1.ldt
                            *ABS*:0000000000000018 SS_LDT
        descriptor.s:59     .text:000000000000026c TSS_1.io
        descriptor.s:63     .text:0000000000000270 GDT
        descriptor.s:64     .text:0000000000000278 GDT.cs_kernel
        descriptor.s:65     .text:0000000000000280 GDT.ds_kernel
        descriptor.s:69     .text:00000000000002a0 GDT.GDT_end
        descriptor.s:71     *ABS*:0000000000000008 CS_KERNEL
        descriptor.s:75     *ABS*:0000000000000028 SS_TASK_1
        descriptor.s:83     .text:00000000000002ae LDT.cs_task_0
        descriptor.s:84     .text:00000000000002b6 LDT.ds_task_0
        descriptor.s:85     .text:00000000000002be LDT.cs_task_1
        descriptor.s:86     .text:00000000000002c6 LDT.ds_task_1
        descriptor.s:87     .text:00000000000002ce LDT.LDT_end
GAS LISTING kernel.s 			page 39


        descriptor.s:89     *ABS*:000000000000000c CS_TASK_0
        descriptor.s:90     *ABS*:0000000000000014 DS_TASK_0
 modules/int_timer.s:21     .text:00000000000002e8 TIMER_COUNT
      tasks/task_1.s:11     .text:0000000000000301 .s0
../modules/protect/vga.s:7      .text:0000000000000308 vga_set_read_plane
../modules/protect/vga.s:36     .text:0000000000000321 vga_set_write_plane
../modules/protect/vga.s:66     .text:000000000000033a vram_font_copy
../modules/protect/vga.s:151    .text:000000000000038d vram_bit_copy
../modules/protect/draw_char.s:13     .text:00000000000003bb draw_char
../modules/protect/draw_pixel.s:10     .text:0000000000000587 draw_pixel
../modules/protect/draw_line.s:11     .text:000000000000064a draw_line
../modules/protect/draw_rect.s:12     .text:00000000000006fc draw_rect
../modules/protect/itoa.s:11     .text:0000000000000762 itoa
../modules/protect/itoa.s:99     .text:00000000000007db ascii_table
../modules/protect/rtc.s:9      .text:00000000000007ec rtc_get_time
../modules/protect/draw_time.s:74     .text:00000000000008b2 .last
../modules/protect/draw_time.s:77     .text:00000000000008c0 .sec
../modules/protect/draw_time.s:76     .text:00000000000008bd .min
../modules/protect/draw_time.s:75     .text:00000000000008ba .hour
../modules/protect/draw_time.s:73     .text:00000000000008aa .temp
../modules/protect/interrupt.s:2      .text:0000000000000930 IDTR
../modules/protect/interrupt.s:120    .text:0000000000000a80 int_default
../modules/protect/interrupt.s:18     .text:0000000000000951 .10L
../modules/protect/interrupt.s:34     .text:0000000000000967 int_stop
../modules/protect/interrupt.s:112    .text:0000000000000a43 .p1
../modules/protect/interrupt.s:114    .text:0000000000000a54 .p2
../modules/protect/interrupt.s:116    .text:0000000000000a65 .p3
../modules/protect/interrupt.s:118    .text:0000000000000a76 .p4
../modules/protect/interrupt.s:111    .text:0000000000000a3c .s1
../modules/protect/interrupt.s:113    .text:0000000000000a4d .s2
../modules/protect/interrupt.s:115    .text:0000000000000a5e .s3
../modules/protect/interrupt.s:117    .text:0000000000000a6f .s4
../modules/protect/interrupt.s:127    .text:0000000000000a8d .int_default_s0
../modules/protect/interrupt.s:137    .text:0000000000000aab .int_zero_div
../modules/protect/ring_buff.s:35     .text:0000000000000b3a ring_wr
                            *ABS*:0000000000000018 ring_buff.size
                            *ABS*:0000000000000000 ring_buff.rp
                            *ABS*:0000000000000004 ring_buff.wp
../modules/protect/ring_buff.s:24     .text:0000000000000b33 .10E
                            *ABS*:0000000000000008 ring_buff.item
../modules/protect/ring_buff.s:57     .text:0000000000000b71 .ringwr_10E
../modules/protect/ring_buff.s:82     .text:0000000000000b96 .draw_key10L
../modules/protect/ring_buff.s:117    .text:0000000000000bce .tmp
../modules/protect/ring_buff.s:108    .text:0000000000000bc9 .draw_key_10E
../modules/protect/ring_buff.s:121    .data:0000000000000000 ring_buff
                            *ABS*:0000000000000018 ring_buff.end
../modules/protect/draw_rotation_bar.s:26     .text:0000000000000c14 .index
../modules/protect/draw_rotation_bar.s:27     .text:0000000000000c18 .table

NO UNDEFINED SYMBOLS
