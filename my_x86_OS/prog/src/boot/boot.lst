GAS LISTING boot.s 			page 1


   1              	.code16
   2              	
   3              	.section .bss
   4 ???? 00000000 		.space drive.size
   4      00000000 
   5              	
   6              	#.section .data
   7              	#.Lboot_drive:
   8              	#  .struct 0
   9              	#.Lboot_drive.no:
  10              	#  .struct .Lboot_drive.no + 2
  11              	#.Lboot_drive.cyln:
  12              	#  .struct .Lboot_drive.cyln + 2
  13              	#.Lboot_drive.head:
  14              	#  .struct .Lboot_drive.head + 2
  15              	#.Lboot_drive.sect:
  16              	
  17              	
  18              	.section .text
  19              	.global _start
  20              	
  21              	_start:
  22 ???? EB58     	  jmp ipl
  23              	
  24              	  # BPB(BIOS Prameter Block)  
  25 ???? 00000000 	  .fill 90 - (. - _start), 0x1, 0x0
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              	
  27              	  # IPL(Initial Program Loader)
  28              	ipl:
  29 ???? FA       	  cli
  30 ???? B80000   	  mov $0x0000, %ax
  31 ???? 8ED8     	  mov %ax, %ds
  32 ???? 8EC0     	  mov %ax, %es
  33 ???? 8ED0     	  mov %ax, %ss
  34              	  
  35 ???? 8B260000 	  mov (.Lboot_BOOT_LOAD), %sp
  36 ???? FB       	  sti
  37              	  
  38 ???? 53       	  push %bx
  39 ???? BB0800   	  mov $drive.size, %bx
  40 ???? 88970000 	  mov %dl, drive.no(%bx)
  41 ???? 5B       	  pop %bx
  42 ???? 680000   	  push $.Lboot_s0
  43 ???? E81800   	  call puts
  44 ???? 83C402   	  add $2, %sp
  45              	
  46              	
  47              	.include "../modules/real/putc.s"
   1              	.code16
   2              	
   3              	putc:
   4 ???? 55       	  push %bp
   5 ???? 89E5     	  mov %sp, %bp
GAS LISTING boot.s 			page 2


   6              	
   7 ???? 50       	  push %ax
   8 ???? 53       	  push %bx
   9              	
  10              	  
  11              	  # mov $0x41, %al
  12              	  # mov $0x0E, %ah
  13              	  # mov $0x0000, %bx
  14              	  # int $0x10
  15              	
  16              	
  17 ???? 8A4604   	  mov 0x4(%bp), %al
  18 ???? B40E     	  mov $0x0E, %ah
  19 ???? BB0000   	  mov $0x0000, %bx
  20 ???? CD10     	  int $0x10
  21              	
  22 ???? 5B       	  pop %bx
  23 ???? 58       	  pop %ax
  24              	
  25 ???? 89EC     	  mov %bp, %sp
  26 ???? 5D       	  pop %bp
  27              	
  28 ???? C3       	  ret
  48              	.include "../modules/real/puts.s"
   1              	.code16
   2              	
   3              	puts:
   4 ???? 55       	  push %bp
   5 ???? 89E5     	  mov %sp, %bp
   6              	
   7 ???? 50       	  push %ax
   8 ???? 53       	  push %bx
   9 ???? 56       	  push %si #arg1: pointer of strings
  10              	
  11 ???? 8B7604   	  mov 0x4(%bp), %si
  12              	
  13 ???? B40E     	  mov $0x0E, %ah # output one char
  14 ???? BB0000   	  mov $0x0000, %bx
  15 ???? FC       	  cld # DF = 0
  16              	
  17              	  
  18              	/*
  19              	for(i=0, AL != null; AL++){
  20              	  int 0x10 # put AL
  21              	}
  22              	*/
  23              	
  24              	
  25              	.loop1:
  26 ???? AC       	  lodsb # AL = *SI++
  27 ???? 3C00     	  cmp $0, %al
  28 ???? 7404     	  je .L1
  29              	  
  30 ???? CD10     	  int $0x10
  31 ???? EBF7     	  jmp .loop1
  32              	
  33              	.L1:
GAS LISTING boot.s 			page 3


  34              	
  35 ???? 5E       	  pop %si
  36 ???? 5B       	  pop %bx
  37 ???? 58       	  pop %ax
  38              	
  39 ???? 89EC     	  mov %bp, %sp
  40 ???? 5D       	  pop %bp
  41              	
  42 ???? C3       	  ret
  43              	 
  49              	#.include "../modules/real/itoa.s"
  50              	.include "../modules/real/reboot.s"
   1              	reboot:
   2 ???? 680000   		push $s_reboot_signal
   3 ???? E8DBFF   		call puts
   4 ???? 83C402   		add $0x2, %sp
   5              	
   6              	.Lreboot1:
   7 ???? B410     		mov $0x10, %ah # wait input key
   8 ???? CD16     		int $0x16 # bios call: input key
   9              	
  10 ???? 3C20     		cmp $0x20, %al
  11 ???? 75F8     		jne .Lreboot1
  12              	
  13              		
  14 ???? 680000   		push $s_reboot_newline
  15 ???? E8CAFF   		call puts
  16 ???? 83C402   		add $0x2, %sp
  17              	
  18 ???? CD19     		int $0x19 # bios call: reboot
  19              	
  20 ???? 50757368 	s_reboot_signal: .string "Push SPACE key to reboot...\r\n"
  20      20535041 
  20      4345206B 
  20      65792074 
  20      6F207265 
  21 ???? 0D0A0D0A 	s_reboot_newline: .string "\r\n\r\n"
  21      00
  22              	
  23              	
  51              	.include "../modules/real/read_chs.s"
   1              	/*
   2              	 * read_chs(drive, sect, dst)
   3              	 * return: number of read sectors: ax register
   4              	 * args:
   5              	 *		drive: addr of struct drive
   6              	 *      no: drive number
   7              	 *      cyln: cylinder
   8              	 *      head: head
   9              	 *      sect: sector
  10              	 *		sect: number of sectors you want to read
  11              	 *		dst: 
  12              	 */
  13              	
  14              	.code16
  15              	.section .text
  16              	
GAS LISTING boot.s 			page 4


  17              	read_chs:
  18 ???? 55       		push %bp
  19 ???? 89E5     		mov %sp, %bp
  20              	
  21 ???? 6A03     		push $3  # number of retries
  22 ???? FF360000 		push 0 # number of read sector
  23              	
  24 ???? 55       		push %bp
  25 ???? 51       		push %cx
  26 ???? 52       		push %dx
  27 ???? 06       		push %es
  28 ???? 56       		push %si
  29              	
  30 ???? 8B7604   		mov 0x4(%bp), %si # src buff
  31              		
  32              	  mov drive.clyn(%si, 0x0), %ch
  33 ???? 8A8C0000 	  mov drive.clyn(%si, 0x1), %cl
  34 ???? C0E106   	  shl $6, %cl
  35              	  or drive.sect(%si), $cl
  36              	  
  37 ???? 8AB40400 	  mov drive.head(%si), %dh
  38 ???? 8A940000 	  mov drive.no(%si), %dl
  39 ???? 8EC0     	  mov %ax, %es
  40 ???? 8B5E08   	  mov 0x8(%bp), %bx # dist copy
  41              	
  42              	.read_chs1L
  43 ???? B402     	  mov $0x2, %ah
  44 ???? 8A4606   	  mov 0x6(%bp), %al
  45              	
  46 ???? CD13     	  int $0x13
  47 ???? 0F830000 	  jnc .read_chs1E
  48              	
  49 ???? B000     	  mov $0, %al
  50 ???? E90000   	  jmp .read_chs2E
  51              	.read_chs1E
  52              	  
  53 ???? 3C00     	  cmp $0, %al
  54 ???? 0F850000 	  jne .read_chs2E
  55              	
  56              	  mvo $0, %ax
  57              	  dec -0x2(%bp)
  58 ???? 0F850000 	  jnz .read_chs1L
  59              	.read_chs2E
  60 ???? B400     	  mov $0, %ah
  61              	
  62 ???? 5E       	  pop %si
  63 ???? 07       	  pop %es
  64 ???? 5A       	  pop %dx
  65 ???? 59       	  pop %cx
  66 ???? 5B       	  pop %bx
  67              	
  68 ???? 89EC     	  mov %bp, %sp
  69 ???? 5D       	  pop %bp
  70              	
  71 ???? C3       	  ret
  72              	
  73              	.section .data
GAS LISTING boot.s 			page 5


  74              	drive:
  75              		.struct 0
  52              	
  53              	 /* 
  54              	  mov $.Lboot_BOOT_SECT, %bx
  55              	  mov (%bx), %bx
  56              	  sub 0x1, %bx
  57              	  mov %bx, bx
  58              	  #push %cx
  59              	  #push %bx
  60              	  #push $.Lboot_drive
  61              	  #call read_chs
  62              	  cmp %bx, %ax
  63              	  jz .Lboot_10E
  64              	  push $.Lboot_e0
  65              	  call puts
  66              	  add $2, %sp
  67              	  call reboot
  68              	.Lboot_10E:
  69              	  jmp stage_2
  70              	*/
  71              	
  72              	.section .text
  73              	
  74 ???? 426F6F74 	.Lboot_s0: .string "Booting...\r\n"
  74      696E672E 
  74      2E2E0D0A 
  74      00
  75 ???? 2D2D2D2D 	.Lboot_s1: .string "--------\r\n"
  75      2D2D2D2D 
  75      0D0A00
  76 ???? 4572726F 	.Lboot_e0: .string "Error:sector read"
  76      723A7365 
  76      63746F72 
  76      20726561 
  76      6400
  77 ???? 007C     	.Lboot_BOOT_LOAD: .word 0x7C00
  78 ???? 0020     	.Lboot_BOOT_SIZE: .word (1024 * 8)
  79 ???? 0002     	.Lboot_SECT_SIZE: .word 512
  80 ???? 1000     	.Lboot_BOOT_SECT: .word 16 #(.Lboot_BOOT_SIZE / .Lboot_SECT_SIZE)
  81              	
  82              	
  83              	/* write boot signature in 0x200 */
  84              	
  85 ???? 00000000 	.Lboot_boot_sig: .fill 0x1fe - (. - _start), 0x1, 0x0
  85      00000000 
  85      00000000 
  85      00000000 
  85      00000000 
  86 ???? 55AA     	.Lboot_BOOT_SIGNATURE: .word 0xAA55
  87              	
  88              	stage_2:
  89 ???? 680000   	  push $.Lboot_s2
  90 ???? E88AFE   	  call puts
  91 ???? 83C402   	  add $0x2, %sp
  92 ???? EBFE     	  jmp .
  93              	
GAS LISTING boot.s 			page 6


  94 ???? 326E6420 	.Lboot_s2: .string "2nd stage...\r\n"
  94      73746167 
  94      652E2E2E 
  94      0D0A00
  95              	
  96              	
GAS LISTING boot.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000008 drive.size
              boot.s:21     .text:0000000000000000 _start
              boot.s:28     .text:000000000000005a ipl
                            *ABS*:0000000000000000 drive.no
../modules/real/puts.s:3      .text:0000000000000090 puts
../modules/real/putc.s:3      .text:000000000000007b putc
../modules/real/puts.s:25     .text:000000000000009f .loop1
../modules/real/reboot.s:1      .text:00000000000000af reboot
../modules/real/reboot.s:20     .text:00000000000000cb s_reboot_signal
../modules/real/reboot.s:21     .text:00000000000000e9 s_reboot_newline
../modules/real/read_chs.s:17     .text:00000000000000ee read_chs
                            *ABS*:0000000000000006 drive.sect
                            *ABS*:0000000000000004 drive.head
../modules/real/read_chs.s:74     .data:0000000000000000 drive
                            *ABS*:0000000000000002 drive.cyln
                            *ABS*:0000000000000008 drive.end
              boot.s:88     .text:0000000000000200 stage_2

UNDEFINED SYMBOLS
drive.clyn
cl
.read_chs1E
.read_chs2E
.read_chs1L
